/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package PanelForm;

import Conexion.ExeSql;
import Dialogos.jdAbonosAsociadosCartola; 
import Dialogos.jdAutorizaPagoDocumento;
import Dialogos.jdBuscarCliPrv;
import Formularios.fmMain;
import java.awt.Color;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.sql.Array;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author David Alcaman
 */
public class pfCli_AbonosRecibidos extends javax.swing.JPanel {
    boolean Cargando=false;
    
    public int conciliado = 0;
    
    public String fechaBanco;
    public String doctoBanco;
    public String detalleBanco;
    public String cargo;
    public String abono;
    
    public String fechaAsiento;
    public String tipoAsiento;
    public String detalleAsiento;
    public String debe;
    public String haber;
    public Date hoy = new Date();
    
    
    
    JTable Tabla = new JTable();
    DefaultTableModel Modelo = new DefaultTableModel();
    
    private enum ColumnasBanco{FECHA, OFICINA, NUMERO, DETALLE, CARGO, ABONO, C,ID};
    private enum Columnas{TIPO, FECHA,DETALLE, MONTO, ID};
    /**
     * Creates new form Bco_Conciliacion
     */
    public pfCli_AbonosRecibidos() {

        Cargando = true;
        initComponents();
        CargaBancos();
        Fecha.setDate(new Date());
        Cargando = false;
        jLabel6.setVisible(false);
        cbRango.setVisible(false);
        chkGastos.setVisible(false);
        btConciliar.setEnabled(false);
        chkPagoProveedores.setVisible(false);
        txtDocumento.setEnabled(false);
        
        cbEspecifico1.setVisible(false);
        cbEspecifico1.setEnabled(false);
        
        jButton2.setVisible(false);
        if(fmMain.trae_nivel(fmMain.GetUsuario())>=90){
            jButton1.setEnabled(true);
        }
        else {
            jButton1.setEnabled(false);
        }
        
        jButton1.setVisible(false);
        GrillaMovimientos.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                SumaMonto();
                SumaPagado();
                
            }
        });
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        cbBanco = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        cbCuenta = new javax.swing.JComboBox();
        Fecha = new org.jdesktop.swingx.JXDatePicker();
        btCargaCartola = new javax.swing.JButton();
        chkFecha = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        cbConciliacion = new javax.swing.JComboBox();
        jLabel15 = new javax.swing.JLabel();
        txtDocumento = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        chkPagoProveedores = new javax.swing.JCheckBox();
        chkGastos = new javax.swing.JCheckBox();
        btRelaciones = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        cbRango = new javax.swing.JComboBox();
        jButton2 = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        cbEspecifico = new javax.swing.JComboBox();
        txDato = new javax.swing.JTextField();
        lbTexto = new javax.swing.JLabel();
        btIr = new javax.swing.JButton();
        cbEspecifico1 = new javax.swing.JComboBox();
        cbCostos = new javax.swing.JComboBox();
        jLabel16 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        btConciliar = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        cbBancoId = new javax.swing.JComboBox();
        cbCuentaId = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        GrillaMovimientos = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        GrillaCartola = new javax.swing.JTable();
        txSku = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED), "Cartola Bancaria", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        jLabel3.setText("Banco");

        cbBanco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbBancoActionPerformed(evt);
            }
        });

        jLabel4.setText("Cuenta");

        cbCuenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCuentaActionPerformed(evt);
            }
        });

        Fecha.setEnabled(false);

        btCargaCartola.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/refresh16.png"))); // NOI18N
        btCargaCartola.setText("Cargar Cartola");
        btCargaCartola.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        btCargaCartola.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCargaCartolaActionPerformed(evt);
            }
        });

        chkFecha.setText("Fecha");
        chkFecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkFechaActionPerformed(evt);
            }
        });

        jLabel5.setText("Estado");

        cbConciliacion.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Sin Conciliar", "Conciliadas", "Todas" }));

        jLabel15.setText("Documento:");

        txtDocumento.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtDocumentoKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(chkFecha, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Fecha, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbBanco, 0, 325, Short.MAX_VALUE)
                    .addComponent(cbCuenta, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel15)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(cbConciliacion, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btCargaCartola, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(73, 73, 73))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cbBanco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(cbCuenta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Fecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkFecha))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(txtDocumento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btCargaCartola, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbConciliacion)
                    .addComponent(jLabel5))
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED), "Movimientos Internos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        chkPagoProveedores.setText("Pago Proveedores");

        chkGastos.setText("Gastos");

        btRelaciones.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/refresh16.png"))); // NOI18N
        btRelaciones.setText("Carga Relaciones");
        btRelaciones.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        btRelaciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRelacionesActionPerformed(evt);
            }
        });

        jLabel6.setText("Rango");

        cbRango.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1 Peso", "5 Pesos", "10 Pesos", "50 Pesos", "100 Pesos", "500 Pesos", "1.000 Pesos" }));
        cbRango.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbRangoActionPerformed(evt);
            }
        });

        jButton2.setText("jButton2");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jPanel8.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel9.setText("Específico");

        cbEspecifico.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "RUT", "Nro. Documento" }));
        cbEspecifico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbEspecificoActionPerformed(evt);
            }
        });

        txDato.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txDatoKeyPressed(evt);
            }
        });

        lbTexto.setText("RUT  :");

        btIr.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos22/Go.png"))); // NOI18N
        btIr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btIrActionPerformed(evt);
            }
        });

        cbEspecifico1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "RUT", "Nro. Documento", "Nro. Folio", "Periodo", "Reporte", "Tarjeta Crédito", "Boleta Garantía", "Devolución Clientes" }));
        cbEspecifico1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbEspecifico1ActionPerformed(evt);
            }
        });

        cbCostos.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Todos" }));
        cbCostos.setEnabled(false);
        cbCostos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCostosActionPerformed(evt);
            }
        });

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel16.setText("Centro de Costos");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cbEspecifico1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(83, 83, 83))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addComponent(lbTexto, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txDato, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btIr)
                                .addGap(34, 34, 34)
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cbCostos, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(cbEspecifico, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(24, Short.MAX_VALUE))))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(cbEspecifico1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addComponent(cbEspecifico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btIr, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbTexto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txDato)
                    .addComponent(cbCostos, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(chkPagoProveedores)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbRango, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2))
                    .addComponent(chkGastos)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addComponent(btRelaciones, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel6))
                .addGap(187, 187, 187))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkPagoProveedores)
                    .addComponent(cbRango, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chkGastos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(btRelaciones, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED), "Conciliación", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        btConciliar.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btConciliar.setForeground(new java.awt.Color(204, 0, 0));
        btConciliar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/billetera24.png"))); // NOI18N
        btConciliar.setText("Pagar");
        btConciliar.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        btConciliar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btConciliarActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton1.setForeground(new java.awt.Color(204, 0, 0));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos16/ok_16.png"))); // NOI18N
        jButton1.setText("Autorizar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btConciliar, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btConciliar, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        cbBancoId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cbCuentaId.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(cbCuentaId, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbBancoId, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 0, Short.MAX_VALUE))
                .addGap(61, 61, 61))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbCuentaId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbBancoId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel2.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("MOVIMIENTOS");

        GrillaMovimientos.setAutoCreateRowSorter(true);
        GrillaMovimientos.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        GrillaMovimientos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "RUT", "Cliente", "C.Costo", "OC", "Tipo", "Doc.", "Fecha", "Vencimiento", "Monto", "Pagado", "Deuda", "ID", "Relacionados"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true, false, true, false, true, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        GrillaMovimientos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                GrillaMovimientosMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                GrillaMovimientosMouseEntered(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                GrillaMovimientosMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(GrillaMovimientos);
        if (GrillaMovimientos.getColumnModel().getColumnCount() > 0) {
            GrillaMovimientos.getColumnModel().getColumn(0).setMinWidth(55);
            GrillaMovimientos.getColumnModel().getColumn(0).setPreferredWidth(55);
            GrillaMovimientos.getColumnModel().getColumn(0).setMaxWidth(55);
            GrillaMovimientos.getColumnModel().getColumn(1).setMinWidth(245);
            GrillaMovimientos.getColumnModel().getColumn(1).setPreferredWidth(245);
            GrillaMovimientos.getColumnModel().getColumn(1).setMaxWidth(245);
            GrillaMovimientos.getColumnModel().getColumn(2).setMinWidth(55);
            GrillaMovimientos.getColumnModel().getColumn(2).setPreferredWidth(55);
            GrillaMovimientos.getColumnModel().getColumn(2).setMaxWidth(55);
            GrillaMovimientos.getColumnModel().getColumn(3).setMinWidth(95);
            GrillaMovimientos.getColumnModel().getColumn(3).setPreferredWidth(95);
            GrillaMovimientos.getColumnModel().getColumn(3).setMaxWidth(95);
            GrillaMovimientos.getColumnModel().getColumn(4).setMinWidth(40);
            GrillaMovimientos.getColumnModel().getColumn(4).setPreferredWidth(40);
            GrillaMovimientos.getColumnModel().getColumn(4).setMaxWidth(40);
            GrillaMovimientos.getColumnModel().getColumn(5).setMinWidth(60);
            GrillaMovimientos.getColumnModel().getColumn(5).setPreferredWidth(60);
            GrillaMovimientos.getColumnModel().getColumn(5).setMaxWidth(60);
            GrillaMovimientos.getColumnModel().getColumn(6).setMinWidth(70);
            GrillaMovimientos.getColumnModel().getColumn(6).setPreferredWidth(70);
            GrillaMovimientos.getColumnModel().getColumn(6).setMaxWidth(70);
            GrillaMovimientos.getColumnModel().getColumn(7).setMinWidth(70);
            GrillaMovimientos.getColumnModel().getColumn(7).setPreferredWidth(70);
            GrillaMovimientos.getColumnModel().getColumn(7).setMaxWidth(70);
            GrillaMovimientos.getColumnModel().getColumn(8).setMinWidth(65);
            GrillaMovimientos.getColumnModel().getColumn(8).setPreferredWidth(65);
            GrillaMovimientos.getColumnModel().getColumn(8).setMaxWidth(65);
            GrillaMovimientos.getColumnModel().getColumn(9).setMinWidth(65);
            GrillaMovimientos.getColumnModel().getColumn(9).setPreferredWidth(65);
            GrillaMovimientos.getColumnModel().getColumn(9).setMaxWidth(65);
            GrillaMovimientos.getColumnModel().getColumn(10).setMinWidth(65);
            GrillaMovimientos.getColumnModel().getColumn(10).setPreferredWidth(65);
            GrillaMovimientos.getColumnModel().getColumn(10).setMaxWidth(65);
            GrillaMovimientos.getColumnModel().getColumn(11).setMinWidth(0);
            GrillaMovimientos.getColumnModel().getColumn(11).setPreferredWidth(0);
            GrillaMovimientos.getColumnModel().getColumn(11).setMaxWidth(0);
            GrillaMovimientos.getColumnModel().getColumn(12).setMinWidth(0);
            GrillaMovimientos.getColumnModel().getColumn(12).setPreferredWidth(0);
            GrillaMovimientos.getColumnModel().getColumn(12).setMaxWidth(0);
        }

        jPanel7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel10.setText("Total Monto: ");

        jLabel11.setText("0");

        jLabel12.setText("Total Pagado: ");

        jLabel13.setText("0");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12)
                    .addComponent(jLabel13))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 907, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(61, 61, 61))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("CARTOLA BANCARIA");

        GrillaCartola.setAutoCreateRowSorter(true);
        GrillaCartola.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        GrillaCartola.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "FECHA", "OFICINA", "NUMERO", "DETALLE", "ABONO", "CARGO", "C", "id", "UTILIZADO", "DISPONIBLE"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        GrillaCartola.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        GrillaCartola.getTableHeader().setReorderingAllowed(false);
        GrillaCartola.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                GrillaCartolaMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                GrillaCartolaMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                GrillaCartolaMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(GrillaCartola);
        if (GrillaCartola.getColumnModel().getColumnCount() > 0) {
            GrillaCartola.getColumnModel().getColumn(0).setMinWidth(80);
            GrillaCartola.getColumnModel().getColumn(0).setPreferredWidth(80);
            GrillaCartola.getColumnModel().getColumn(0).setMaxWidth(80);
            GrillaCartola.getColumnModel().getColumn(1).setMinWidth(208);
            GrillaCartola.getColumnModel().getColumn(1).setPreferredWidth(208);
            GrillaCartola.getColumnModel().getColumn(1).setMaxWidth(208);
            GrillaCartola.getColumnModel().getColumn(2).setMinWidth(80);
            GrillaCartola.getColumnModel().getColumn(2).setPreferredWidth(80);
            GrillaCartola.getColumnModel().getColumn(2).setMaxWidth(80);
            GrillaCartola.getColumnModel().getColumn(4).setMinWidth(80);
            GrillaCartola.getColumnModel().getColumn(4).setPreferredWidth(80);
            GrillaCartola.getColumnModel().getColumn(4).setMaxWidth(80);
            GrillaCartola.getColumnModel().getColumn(5).setMinWidth(0);
            GrillaCartola.getColumnModel().getColumn(5).setPreferredWidth(0);
            GrillaCartola.getColumnModel().getColumn(5).setMaxWidth(0);
            GrillaCartola.getColumnModel().getColumn(6).setMinWidth(30);
            GrillaCartola.getColumnModel().getColumn(6).setPreferredWidth(30);
            GrillaCartola.getColumnModel().getColumn(6).setMaxWidth(30);
            GrillaCartola.getColumnModel().getColumn(7).setMinWidth(0);
            GrillaCartola.getColumnModel().getColumn(7).setPreferredWidth(0);
            GrillaCartola.getColumnModel().getColumn(7).setMaxWidth(0);
            GrillaCartola.getColumnModel().getColumn(8).setMinWidth(80);
            GrillaCartola.getColumnModel().getColumn(8).setPreferredWidth(80);
            GrillaCartola.getColumnModel().getColumn(8).setMaxWidth(80);
            GrillaCartola.getColumnModel().getColumn(9).setMinWidth(80);
            GrillaCartola.getColumnModel().getColumn(9).setPreferredWidth(80);
            GrillaCartola.getColumnModel().getColumn(9).setMaxWidth(80);
        }

        txSku.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txSkuKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txSkuKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txSkuKeyTyped(evt);
            }
        });

        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos16/search16.png"))); // NOI18N
        jLabel14.setText("FILTRO:");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(138, 138, 138)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 445, Short.MAX_VALUE)
                        .addGap(41, 41, 41)
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txSku, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 896, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txSku)
                    .addComponent(jLabel14)
                    .addComponent(jLabel1))
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    private void CargaBancos(){
        cbBancoId.setVisible(false);
        cbCuentaId.setVisible(false);
        ExeSql Sql = new ExeSql();
        ResultSet Rs;
        
        cbBanco.removeAllItems();
        cbBancoId.removeAllItems();
        
        try {
            Rs = Sql.Select("select id,nombre\n" +
                            "from bco_bancos where id IN ('1','2','3','4','6')\n" +
                            "order by id");
            while(Rs.next()){
                cbBancoId.addItem(Rs.getInt("id"));
                cbBanco.addItem(Rs.getString("nombre"));
            }
            cbBancoId.addItem("1000");
            cbBanco.addItem("LUVALY");
//            cbBanco.setSelectedIndex(-1);
//            cbBancoId.setSelectedIndex(-1);      
        } catch (Exception e) {
            fmMain.Mensaje("Error");
        } finally{
            Sql.Close();
        }
    }
    private void CargaCuentas(){
        System.out.println(cbBanco.getItemAt(cbBanco.getSelectedIndex()).toString());
        if(!cbBanco.getItemAt(cbBanco.getSelectedIndex()).toString().trim().equals("LUVALY")) {
            ExeSql Sql = new ExeSql();

            ResultSet Rs;
            cbCuenta.setEnabled(true);
            txtDocumento.setEnabled(false);
            cbCuenta.removeAllItems();
            cbCuentaId.removeAllItems();

            try {
                Rs = Sql.Select("select id,cuenta\n" +
                                "from bco_cuentas \n" +
                                "where banco="+ cbBancoId.getSelectedItem().toString().trim() +"\n" +
                                "and (cxc=true or cxp =true)");
    
                while(Rs.next()){
                    cbCuentaId.addItem(Rs.getString("id"));
                    cbCuenta.addItem(Rs.getString("cuenta"));
                }
            } catch (Exception e) {
                System.out.println(e.getMessage());
            } finally{
                Sql.Close();
            }
        }
        else {
            txtDocumento.setEnabled(true);      
            cbCuenta.setEnabled(false);
            cbCuenta.removeAllItems();
            cbCuentaId.removeAllItems();
            cbCuentaId.addItem("");
            cbCuenta.addItem("");
        }
    }
    private void btCargaCartolaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCargaCartolaActionPerformed
        
        btConciliar.setEnabled(false);
        
        if(!cbBanco.getItemAt(cbBanco.getSelectedIndex()).toString().trim().equals("LUVALY")) {   //BCI
            ExeSql Sql = new ExeSql();
            ResultSet Rs;
            String Query="";
            SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
            DefaultTableModel Modelo1 = (DefaultTableModel) GrillaCartola.getModel();
            DefaultTableModel Modelo2 = (DefaultTableModel) GrillaMovimientos.getModel();

            fmMain.LimpiaGrilla(Modelo1);
            fmMain.LimpiaGrilla(Modelo2);

            try {
                Query = "SELECT ba.nombre, ca.fecha,ca.oficina,"+
                        "CASE \n"+
                        "WHEN ca.nrodocumento = '' THEN '0' ELSE ca.nrodocumento \n" +
                        "END,"+
                        "ca.detalle,ca.abono,ca.cargo,ca.id,ca.asociado,ca.utilizado\n" +
                        "FROM bco_cartola ca\n" +
                        "left join bco_cuentas cu on ca.cuenta=cu.id\n" +
                        "left join bco_bancos ba on ba.id = cu.banco\n" + 
                        "where ca.cargo=0 and cu.id=" + cbCuentaId.getSelectedItem().toString().trim() + "\n" ;

                if(chkFecha.isSelected()){
                    Query = Query + "and ca.fecha = '" + sdf.format(Fecha.getDate()) +"'\n";
                }

                if(cbConciliacion.getSelectedIndex()==0){
                    
                    Query = Query + "and ca.asociado = false \n";
                    
                }else if(cbConciliacion.getSelectedIndex()==1){
                    
                    Query = Query + "and ca.asociado = true \n";
                }        
                
                Query = Query + " Order by ca.id";

                Rs = Sql.Select(Query);
                
                if (Sql.GetRowCount() > 0){
              
                    while(Rs.next()){
                                        
                        Modelo1.addRow(new Object[]{
                                        Rs.getString("Fecha").trim(),
                                        Rs.getString("Oficina").trim(),
                                        Rs.getInt("nrodocumento"),
                                        Rs.getString("detalle").trim().toUpperCase(),
                                        Rs.getInt("abono"),
                                        Rs.getInt("cargo"),
                                        Rs.getBoolean("asociado"),
                                        Rs.getInt("id"),
                                        Rs.getInt("utilizado"),
                                        Rs.getInt("abono")-Rs.getInt("utilizado")

                        });
                    }
                
                }
                
                
            } catch (SQLException e) {
                
                Logger.getLogger(pfCli_AbonosRecibidos.class.getName()).log(Level.SEVERE, null, e);
                
            } finally{
                Sql.Close();

            }
        }
        if(GrillaCartola.getRowCount()>0){
            GrillaCartola.setRowSelectionInterval(0, 0);
        }
    }//GEN-LAST:event_btCargaCartolaActionPerformed

    private void btConciliarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btConciliarActionPerformed
       
        if(!cbBanco.getItemAt(cbBanco.getSelectedIndex()).toString().trim().equals("LUVALY")){    //Si no es Luvaly
        
            conciliado = 0;
          
            int saldo = Integer.valueOf(GrillaCartola.getValueAt(GrillaCartola.getSelectedRow(), 9).toString());   //
            int utilizado = 0;
            ExeSql Sql = new ExeSql();
            
            int seleccionados = GrillaMovimientos.getSelectedRowCount();
            int[] filasSelec = GrillaMovimientos.getSelectedRows();
            int resultado = 0;
           
            int[] montos = new int[seleccionados];
            
            System.out.println("seleccionados : "+seleccionados);
            
            for(int i = 0; i < seleccionados; i++){
                
                montos[i]=Integer.valueOf(GrillaMovimientos.getValueAt(filasSelec[i],10).toString());
            }

            String pago = "0";
            
            for(int j = 0; j < seleccionados; j++){
                
                if(saldo >= montos[j]){          /**Si el Abono puede cubrir el monto del documento(s)**/
                    
                    System.out.println(saldo+ "-" + montos[j]+"= "+(saldo - montos[j]));
                    
                    try {  
                        
                        pago = "6";
                     
                        resultado += Sql.ExeSqlInt("insert into cli_pagos \n" +
                                                   "(cuenta,tipopago,banco,monto,nrodocumento,fechapago, id_cartola)\n" +
                                                   "values\n" +
                                                   "("+ GrillaMovimientos.getValueAt(filasSelec[j], 11).toString() +",'"+
                                                   pago +
                                                   "',"+cbBancoId.getSelectedItem()+","+
                                                   montos[j]+ "," +
                                                   GrillaCartola.getValueAt(GrillaCartola.getSelectedRow(), 2).toString().trim() + ",'" + 
                                                   GrillaCartola.getValueAt(GrillaCartola.getSelectedRow(), 0).toString().trim() + "','" +
                                                   GrillaCartola.getValueAt(GrillaCartola.getSelectedRow(), 7).toString().trim() + "')"
                                     );
                
                        Sql.Commit();
                         
                        saldo = saldo - montos[j];
                        utilizado = utilizado + montos[j];
                        
                        System.out.println("Abono: "+saldo +" - Saldo: "+utilizado);
                        conciliado = 1;
                    
                    }catch ( SQLException ex ) {
                    
                        Logger.getLogger(pfCli_AbonosRecibidos.class.getName()).log(Level.SEVERE, null, ex);
                        Sql.Rollback();
                        System.out.println("Hubo un error al pagar.");
                        conciliado = 0;
                    } 


                }else if (saldo > 0 && saldo < montos[j] ) {   //El monto a conciliar es Mayor al Abono o al Saaldo de éste
                
                
                    System.out.println("El Saldo del Abono : "+saldo+ " es menor al monto a conciliar: "+montos[j]);
               //******************************************************************************************************************************//
                    
                    if(JOptionPane.showConfirmDialog(null,"Desea abonar "+saldo+" a documento: "+GrillaMovimientos.getValueAt(filasSelec[j], 5).toString()+"?")==0) {/**Si aún tiene disponible pero no cubre el monto**/
                        
                        System.out.println("Disponible: "+ saldo +" - Utilizado: "+utilizado);
                        
                        try {
                            
                            
                            pago = "0";
                     
                            resultado += Sql.ExeSqlInt("insert into cli_pagos \n" +
                                                       "(cuenta,tipopago,banco,monto,nrodocumento,fechapago, id_cartola)\n" +
                                                       "values\n" +
                                                       "("+ GrillaMovimientos.getValueAt(filasSelec[j], 11).toString() +",'"+
                                                       pago +
                                                       "', 1,"+
                                                       saldo+ "," +
                                                       GrillaCartola.getValueAt(GrillaCartola.getSelectedRow(), 2).toString().trim() + ",'" + 
                                                       GrillaCartola.getValueAt(GrillaCartola.getSelectedRow(), 0).toString().trim() + "','" +
                                                       GrillaCartola.getValueAt(GrillaCartola.getSelectedRow(), 7).toString().trim() + "')"
                                     );
                
                            Sql.Commit();
                            
                            conciliado = 1;
                        
                        } catch (SQLException ex) {
                            Logger.getLogger(pfPrv_CargosRecibidos.class.getName()).log(Level.SEVERE, null, ex);
                            Sql.Rollback();
                            JOptionPane.showMessageDialog(null,"Hubo un error al pagar.");
                            conciliado = 0;
                            break;
                        }

                        utilizado = utilizado + saldo;
                        saldo = saldo - saldo;

                        System.out.println("Abono Disponible: "+saldo +" - Utilizado: "+utilizado);

                    }
                    
                    
                }
//                   
            }
            
            Sql.Close();
            
            if (conciliado == 1){
            
                JOptionPane.showMessageDialog(null, "Se pagaron correctamente.");
            
            }else if (conciliado == 0) {
            
                JOptionPane.showMessageDialog(null, "No se realizó la conciliación.");
                return;
            }
            
            
            //******************************************************************************************************************************************//
            
            
            ExeSql sql_sql = new ExeSql();
            
            try {       // Actualiza cartola
                
                if(resultado > 0){
                    
                    sql_sql.ExeSql("UPDATE bco_cartola set utilizado = utilizado + "+utilizado+" WHERE id=" + GrillaCartola.getValueAt(GrillaCartola.getSelectedRow(), 7).toString().trim());
                    sql_sql.Commit();
                    ResultSet rs = sql_sql.Select("select utilizado, abono from bco_cartola where id = "+GrillaCartola.getValueAt(GrillaCartola.getSelectedRow(), 7).toString().trim()+"");
                    rs.next();
                    
                    if(rs.getInt("utilizado") < rs.getInt("abono")){
                    
                        System.out.println("Utilizado menor que abono");
                        sql_sql.ExeSql("UPDATE bco_cartola set asociado = false WHERE id=" + GrillaCartola.getValueAt(GrillaCartola.getSelectedRow(), 7).toString().trim());
                        sql_sql.Commit();
                    
                    }else if(rs.getInt("utilizado") == rs.getInt("abono")){
                       
                        JOptionPane.showMessageDialog(null, "Se concilió correctamente");
                        sql_sql.ExeSql("UPDATE bco_cartola set asociado = true WHERE id=" + GrillaCartola.getValueAt(GrillaCartola.getSelectedRow(), 7).toString().trim());
                        sql_sql.Commit();
                    }

                    
                    if(txDato.getText().length()>0){
                        
                        btIr.doClick();
                    }
   
                    txDato.setText("");
                      
                    btCargaCartola.doClick();
                }
                else {
                    JOptionPane.showMessageDialog(null, "No se pudo completar el proceso.");
                }
            }
            catch (SQLException ex) {
                Logger.getLogger(pfPrv_CargosRecibidos.class.getName()).log(Level.SEVERE, null, ex);
                sql_sql.Rollback();
            }
            finally {
                sql_sql.Close();
            }
            
            
            //*****************************************************************************************************************************************
            
            
        
        }
        
    }//GEN-LAST:event_btConciliarActionPerformed

    private void btRelacionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRelacionesActionPerformed
        ExeSql Sql = new ExeSql();
        ResultSet Rs;
        
        String tpago = "2";
        DefaultTableModel Modelo = (DefaultTableModel) GrillaMovimientos.getModel();
        int Rango=0;
        try {
            fmMain.LimpiaGrilla(Modelo);
            
            Double Monto = Double.valueOf(GrillaCartola.getValueAt(GrillaCartola.getSelectedRow(), 4).toString());
            
            if(cbRango.getSelectedIndex()==0)
                Rango=1;
            else if (cbRango.getSelectedIndex()==1)
                Rango=5;
            else if (cbRango.getSelectedIndex()==2)
                Rango=10;
            else if (cbRango.getSelectedIndex()==3)
                Rango=50;
            else if (cbRango.getSelectedIndex()==4)
                Rango=100;
            else if (cbRango.getSelectedIndex()==5)
                Rango=500;
            else if (cbRango.getSelectedIndex()==6)
                Rango=1000;

            
//            Rs = Sql.Select("select p.id, 'Pago Proveedores' as tipo,cast(p.fecha as date) as fecha,prv.nombre || '   [FAP:' || cxp.nrodocto || ']  [Cuota ' || cxp.nrocuota || ']'  as detalle, p.monto\n" +
//                            "from prv_pagos p\n" +
//                            "left join prv_cuentasxpagar cxp on p.cuenta=cxp.id\n" +
//                            "left join proveedor prv on cxp.rut=prv.rut\n" +
//                            "where p.id_cartola=0\n" +
//                            "and p.monto between " + String.valueOf(Monto-Rango)+  "and " + String.valueOf(Monto+Rango));
            
            Rs = Sql.Select("select cxp.rut, cxp.id, \n" +
                            "case \n" +
                            "when cxp.tipdocto = 'FAP' then 'Pago Proveedores' \n" +
                            "when cxp.tipdocto = 'MUL' then 'Multa'\n" +
                            "when cxp.tipdocto = 'FAG' then 'Factura de Gastos'\n" +
                            "when cxp.tipdocto = 'BOG' then 'Boleta de Gastos'\n" +
                            "when cxp.tipdocto = 'BOH' then 'Boleta de Honorarios' \n" +
                            "when cxp.tipdocto = 'COM' then 'Comprobante de Gasto' \n" +
                            "when cxp.tipdocto = 'REM' then 'Pago de Remuneraciones' \n" +
                            "when cxp.tipdocto = 'PRV' then 'Pago Previsional' \n" +
                            "end as tipo, cxp.tipdocto,\n" +
                            "cast(cxp.fpago as date) as fecha,\n" +
                            "prv.nombre || '   ['||cxp.tipdocto||':' || cxp.nrodocto || ']  [Cuota ' || cxp.nrocuota || ']'  as detalle, cxp.monto,\n" +
                            "case\n" +
                            "when  cxp.monto - cxp.pagado > 0\n" +
                            "then cxp.pagado\n" +
                            "else 0\n" +
                            "end as pagado,\n" +
                            "case when cxp.pagado > 0\n" +
                            "then cxp.monto - cxp.pagado\n" +
                            "else 0\n" +
                            "end as diferencia,\n" +
                            "cef.numero \n" +
                            "from prv_cuentasxpagar cxp \n" +
                            "left join proveedor prv on cxp.rut=prv.rut\n" +
                            "left join cheques_emitidos_facturas cef ON cxp.nrodocto = cef.nrodocto AND cxp.rut = cef.rut \n"+
                            "where cxp.monto-cxp.pagado between " + String.valueOf(Monto-Rango)+  " and " + String.valueOf(Monto+Rango));
            

            while(Rs.next()){
               
                
                if ( Rs.getString("numero") == null ){
                    
                          tpago = "2";  
                    
                }else if ( Rs.getString("numero") != null ){
                    
                         tpago = "3";  
                    
                }
                
                Modelo.addRow(new Object[]{
                            Rs.getString("rut").trim(),
                            Rs.getString("tipo").trim(),
                            Rs.getString("fecha").trim(),
                            Rs.getString("detalle").trim().toUpperCase(),
                            Rs.getString("monto"),
                            Rs.getString("id").trim(),
                            Rs.getString("pagado"),
                            Rs.getInt("monto")-Rs.getInt("pagado"),
                            "",
                            tpago
                });
            }
            
        } catch (Exception e) {
            System.out.println(e.getMessage());
        } finally{
            Sql.Close();
        }
    }//GEN-LAST:event_btRelacionesActionPerformed

    private void cbBancoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbBancoActionPerformed
        if(!Cargando){
            cbBancoId.setSelectedIndex(cbBanco.getSelectedIndex());
            CargaCuentas();
            fmMain.LimpiaGrilla((DefaultTableModel) GrillaCartola.getModel());
            fmMain.LimpiaGrilla((DefaultTableModel) GrillaMovimientos.getModel());
        }
    }//GEN-LAST:event_cbBancoActionPerformed

    private void chkFechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkFechaActionPerformed
        if(chkFecha.isSelected())
            Fecha.setEnabled(true);
        else
            Fecha.setEnabled(false);
        
    }//GEN-LAST:event_chkFechaActionPerformed

    private void GrillaMovimientosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GrillaMovimientosMouseClicked
        
    }//GEN-LAST:event_GrillaMovimientosMouseClicked

    public void SumaMonto() {
        int[] filasSelec = GrillaMovimientos.getSelectedRows();
        int SumMontos = 0;    
        int Celda;
        String Tipo = "";
       
        for(int i = 0; i < filasSelec.length; i++){
           
            Celda = Integer.valueOf(GrillaMovimientos.getValueAt(filasSelec[i], 10).toString());
            Tipo = GrillaMovimientos.getValueAt(filasSelec[i], 1).toString();
            
            if(GrillaMovimientos.getValueAt(filasSelec[i], 10).toString().isEmpty())
                continue;
            
            
           
            if (GrillaMovimientos.getValueAt(filasSelec[i], 1).toString().equals("Ajuste Factura")){
                
                Celda = Celda * -1;
            
            }
            
            SumMontos = SumMontos + Celda;
            //fmMain.SetGuardar(TOOL_TIP_TEXT_KEY)
        }
        jLabel11.setText(String.valueOf(SumMontos));

    }
    
    public void SumaPagado() {
        int[] filasSelec = GrillaMovimientos.getSelectedRows();
        int SumMontos = 0;    
        int Celda;
        for(int i = 0; i < filasSelec.length; i++){
            
            Celda = Integer.valueOf(GrillaMovimientos.getValueAt(filasSelec[i], 9).toString());
            
            if(GrillaMovimientos.getValueAt(filasSelec[i], 9).toString().isEmpty())
                continue;

            SumMontos = SumMontos + Celda;
            //fmMain.SetGuardar(TOOL_TIP_TEXT_KEY)
        }
        jLabel13.setText(String.valueOf(SumMontos));

    }
    
    private void GrillaMovimientosMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GrillaMovimientosMouseEntered

        
    
    }//GEN-LAST:event_GrillaMovimientosMouseEntered

    private void BuscarGrupal(){
        int MontoBuscado;
        MontoBuscado = (Integer) GrillaCartola.getValueAt(GrillaCartola.getSelectedRow(), 4);
        Runnable miRunnable = new Runnable() {
            public void run() {
                try{
                        CargaRelacion();
                        
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        };
        Thread hilo = new Thread(miRunnable);
        hilo.start();

    }
    private void CargaRelacion(){
        int MontoBuscado = (int) GrillaCartola.getValueAt(GrillaCartola.getSelectedRow(), 4);
        DefaultTableModel Modelo = (DefaultTableModel) GrillaMovimientos.getModel();
        String Rut="";
        String Tipo = "";
        String Fecha="";
        String Detalle="";
        String Monto="";
        String Pagado = "";
        String Id = "";
        String Nro = "";
        String Facturas = "";
        ExeSql Sql = new ExeSql();
        ResultSet Rs;
//        DefaultTableModel ModeloRelacion = (DefaultTableModel) GrillaMovimientos.getModel();
//        while(ModeloRelacion.getRowCount()>0)
//              ModeloRelacion.removeRow(0);
//                
//        
        try {
            
            Rs = Sql.Select("select *\n" +
                            "from fn_pxp_search("+ MontoBuscado +")");
            
            while(Rs.next()){
                
                if(Nro.isEmpty()){
                   
                    Rut=Rs.getString("rut").trim();
                    Tipo=Rs.getString("tipo").trim();
                    Fecha = Rs.getString("fecha").trim();
                    Detalle = Rs.getString("detalle").trim();
                    Nro=Rs.getString("nrodocto").trim();
                    Id=Rs.getString("id");
                    Monto = Rs.getString("monto_real").trim();
                    Pagado = Rs.getString("pagado").trim();
                    while(Modelo.getRowCount()>0)
                        Modelo.removeRow(0);
                }
                
                if(!Nro.equals(Rs.getString("nrodocto").trim())){
                    for(int i=0; i< Tabla.getRowCount() ;i ++){
                        Facturas = Funcion(0,i,MontoBuscado);
                        if(!Facturas.isEmpty())
                            //System.out.println(Rut + " " + Nombre + " " + Codigo_Oc + " *" + Facturas);
                            AgregaResultado(Nro, Rut,Tipo,Fecha,Detalle,Monto, Id,Pagado,String.valueOf(Integer.valueOf(Monto)-Integer.valueOf(Pagado)));
                    }
                    Rut=Rs.getString("rut").trim();
                    Nro = Rs.getString("nrodocto");

                    while(Modelo.getRowCount()>0)
                        Modelo.removeRow(0);
                    Modelo.addRow(new Object[]{
                        Rs.getString("rut"),
                        Rs.getString("tipo"),
                        Rs.getString("fecha"),
                        Rs.getString("detalle"),
                        Rs.getString("monto_real"),
                        Rs.getString("id"),
                        Rs.getString("pagado"),
                        Rs.getInt("monto_real")-Rs.getInt("pagado"),
                        Rs.getString("nrodocto")
                    });
                }
                else{
                    Modelo.addRow(new Object[]{
                        Rs.getString("rut"),
                        Rs.getString("tipo"),
                        Rs.getString("fecha"),
                        Rs.getString("detalle"),
                        Rs.getString("monto_real"),
                        Rs.getString("id"),
                        Rs.getString("pagado"),
                        Rs.getInt("monto_real")-Rs.getInt("pagado"),
                        Rs.getString("nrodocto")
                    });
                }
            }
            for(int i=0; i< Tabla.getRowCount() ;i ++){
                        Facturas = Funcion(0,i,MontoBuscado);
                        if(!Facturas.isEmpty())
                            AgregaResultado(Nro, Rut,Tipo,Fecha,Detalle,Monto,Id, Pagado,String.valueOf(Integer.valueOf(Monto)-Integer.valueOf(Pagado)));
                    }
            
            
        } catch (Exception e) {
            System.out.println(e.getMessage());
           
        } finally{
            Sql.Close();
        }
        
    }
    private void AgregaResultado(String Nro, String Rut, String Tipo, String Fechaa,String Detalle, String Monto, String Id,String Pagado, String Diferencia){
        boolean Existe=false;
        DefaultTableModel Model = (DefaultTableModel) GrillaMovimientos.getModel();
        for (int i = 0; i < GrillaMovimientos.getRowCount(); i++) {
            if(Nro.equals(GrillaMovimientos.getValueAt(i,4).toString().trim()))
                Existe=true;
        }
        if(!Existe){
            Model.addRow(new Object[]{Rut,Tipo,Fechaa, Detalle, Monto,Id, Pagado,Diferencia});
        }
        
    }
       
    public void Resultado(String monto) {
        
        ExeSql sql = new ExeSql();
        ResultSet rs = null;
        String Query = "select * from fn_pxp_search("+monto+")";    
        try {
            rs = sql.Select(Query);
            rs.last();
            int[] resultados = new int[rs.getRow()];
            int[] numeros = new int[rs.getRow()];
            rs.beforeFirst();
            for(int i = 0; rs.next(); i++){
                resultados[i]=(rs.getInt("monto_real"));
                numeros[i]=(rs.getInt("nrodocto"));
            }
             
            int n = resultados.length; 

        } catch (SQLException ex) {
            Logger.getLogger(pfCli_AbonosRecibidos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Resultado(GrillaCartola.getValueAt(GrillaCartola.getSelectedRow(),4).toString().trim());
    }//GEN-LAST:event_jButton2ActionPerformed

    private void txSkuKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txSkuKeyPressed

    }//GEN-LAST:event_txSkuKeyPressed

    private void txSkuKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txSkuKeyReleased
        TableRowSorter<TableModel>sorter = new TableRowSorter<>(GrillaCartola.getModel());
        GrillaCartola.setRowSorter(sorter);
        String sku = txSku.getText().trim();
        if (sku.length()==0)
        {
            sorter.setRowFilter(null);     
        }
        else{
            int cant=0;     
            int ev=0;
            String precio = "";
            sorter.setRowFilter(RowFilter.regexFilter(sku));
        }
    }//GEN-LAST:event_txSkuKeyReleased

    private void txSkuKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txSkuKeyTyped
        // TODO add your handling code here:
        if (Character.isLowerCase(evt.getKeyChar()))
        evt.setKeyChar(Character.toUpperCase(evt.getKeyChar()));
    }//GEN-LAST:event_txSkuKeyTyped

    private void GrillaCartolaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GrillaCartolaMouseClicked
       
        if((boolean) GrillaCartola.getValueAt(GrillaCartola.getSelectedRow(), 6) || (int) GrillaCartola.getValueAt(GrillaCartola.getSelectedRow(), 8) > 0 ){
            String id = GrillaCartola.getValueAt(GrillaCartola.getSelectedRow(), 7).toString().trim();
            jdAbonosAsociadosCartola BP = new jdAbonosAsociadosCartola(null, true);
            BP.setId(id);
            BP.setLocationRelativeTo(null);
            BP.setTitle("Pago Asociado");
            BP.setVisible(true);
            
        }

        
    }//GEN-LAST:event_GrillaCartolaMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        jdAutorizaPagoDocumento jd = new jdAutorizaPagoDocumento(null, true);
        jd.setLocationRelativeTo(null);
        jd.setTitle("Pago Documento");
        jd.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void txtDocumentoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDocumentoKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            btCargaCartola.doClick();
        }
    }//GEN-LAST:event_txtDocumentoKeyPressed

    private void GrillaCartolaMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GrillaCartolaMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_GrillaCartolaMousePressed

    private void GrillaCartolaMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GrillaCartolaMouseReleased
        if(GrillaCartola.getSelectedRowCount()>0 && GrillaMovimientos.getSelectedRowCount()>0){
            btConciliar.setEnabled(true);
        }
        else {
            btConciliar.setEnabled(false);
        }
    }//GEN-LAST:event_GrillaCartolaMouseReleased

    private void GrillaMovimientosMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GrillaMovimientosMouseReleased
        if(GrillaCartola.getSelectedRowCount()>0 && GrillaMovimientos.getSelectedRowCount()>0){
            btConciliar.setEnabled(true);
        }
        else {
            btConciliar.setEnabled(false);
        }
    }//GEN-LAST:event_GrillaMovimientosMouseReleased

    private void txDatoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txDatoKeyPressed
          if (evt.getKeyCode() == KeyEvent.VK_ENTER){
            btIr.doClick();
        }
    }//GEN-LAST:event_txDatoKeyPressed

    private void btIrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btIrActionPerformed
       
        if (cbEspecifico.getSelectedIndex() == 0){              //Búsqueda por Rut Proveedor
        
            boolean Carga;
                     
            if (!txDato.getText().isEmpty()) {
            
                Carga = CargaCliente(txDato.getText());
                CargaRutCargos(txDato.getText());
            
            }else {
            
                jdBuscarCliPrv BPC = new jdBuscarCliPrv(null, true);
                BPC.setLocationRelativeTo(null);
                BPC.SetTipo(1);
                BPC.setTitle("Buscar Cliente");
                BPC.setVisible(true);
                Carga = CargaCliente(BPC.GetRut());
                CargaRutCargos(txDato.getText());
            }
        
            if (!Carga){
                txDato.setText("");
                txDato.requestFocus();
            } 
        
        }else if (cbEspecifico.getSelectedIndex() == 1){   //Búsequeda por N° de Factura o Boleta
        
                boolean Carga;
                        
                if (!txDato.getText().isEmpty()) {
                
                    CargaNroCargos(txDato.getText());
                
                }else {
                    JOptionPane.showMessageDialog(null, "Ingrese número documento.");
                    txDato.requestFocus();   
                }
        
        }
        
    }//GEN-LAST:event_btIrActionPerformed

    private void cbEspecificoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbEspecificoActionPerformed
        
        if (cbEspecifico.getSelectedIndex() == 0){              //Búsqueda por Rut Proveedor
          
            lbTexto.setText("RUT  :");
            
            txDato.setEnabled(true);
            txDato.setText("");
            btIr.setEnabled(true);
        
        }else if (cbEspecifico.getSelectedIndex() == 1){        //Búsqueda por N° de Documento
            
            lbTexto.setText("N° Docto  :");
            txDato.setEnabled(true);
            txDato.setText("");
            cbCostos.removeAllItems();
            cbCostos.setEnabled(false);
            btIr.setEnabled(true);
              
        }
        
        
        
        
    }//GEN-LAST:event_cbEspecificoActionPerformed

    private void cbCuentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCuentaActionPerformed
        if(!Cargando){
            cbCuentaId.setSelectedIndex(cbCuenta.getSelectedIndex());
           
        }
    }//GEN-LAST:event_cbCuentaActionPerformed

    private void cbEspecifico1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbEspecifico1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbEspecifico1ActionPerformed

    private void cbCostosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCostosActionPerformed
        
        if (!txDato.getText().isEmpty()) {
        
            CargaRutCargos(txDato.getText());
            
        }
        
        
    }//GEN-LAST:event_cbCostosActionPerformed

    private void cbRangoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbRangoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbRangoActionPerformed
    
    private String Funcion(int Suma, int Indice, int Monto ){
        String Retorno="";
        for (int i = Indice; i < Tabla.getRowCount(); i++) {
            if((Integer) Tabla.getValueAt(i, 4) > Monto)
                return "";
            
            else if( (Integer) Tabla.getValueAt(i, 4)  + Suma == Monto){
                return Tabla.getValueAt(i, 0).toString().trim();
            }
            else if((Integer) Tabla.getValueAt(i, 4) + Suma < Monto && Indice<Tabla.getRowCount()){
                    Retorno=Funcion(Suma + (Integer) Tabla.getValueAt(i, 1),i+1,Monto);
                if(!Retorno.isEmpty())
                    return Tabla.getValueAt(i, 0).toString().trim() + "," + Retorno;
            }
            
                
        }
        return "";
    }
     
    public void CargaRutCargos(String rut) {
        ExeSql sql = new ExeSql();
        ResultSet rs = null;
                        
        String query =  "select distinct \n" +
                        "case cxc.estado "+
                            "when 0 then 'Pendiente' "+
                            "when 1 then 'Vencida' "+
                            "when 2 then 'Parcial' "+
                            "else 'Pagado' end as Estado,\n" +
                        "cxc.tipdocto as tipo, \n" +
                        "cxc.rut,case when c.nombre is null then 'No Definido' else c.nombre end as nombre, \n" +
                        "cxc.codigo_oc,case when cli.occh is null then '--' else cli.occh end as occh,\n" +
                        "cxc.nrodocto,cxc.femision,cxc.femision + cast((select valor from par_general where tipo='PLAZOSCOBRANZA' and codigo=0) as integer) as fpago ,cxc.monto,\n" +
                        "cxc.pagado,cxc.monto-cxc.pagado as saldo,cxc.id, case cxc.estado when 3 then (clipa.fechapago-cxc.femision) ELSE (CURRENT_DATE-cxc.femision) end  as Dias\n" +
                        "from cli_cuentasxcobrar cxc\n" +
                        "left join cliente c on c.rut=cxc.rut\n" +
                        "left join ctactecli cli on cli.tipdocto=cxc.tipdocto and cli.rut=cxc.rut and cli.nrodocto=cxc.nrodocto\n" +
                        "left join cli_pagos clipa on clipa.cuenta =cxc.id \n "+                
                        "where cxc.estado in (0,1,2) and cxc.tipdocto IN ('FAC','FAT','FEC','BOC')";
        
                        query = query + " and cxc.rut=" + rut.trim() +"\n";
                        
                        
                        if (cbCostos.getSelectedIndex() > 0){
                            
                            String Codigo_Oc = cbCostos.getSelectedItem().toString().trim();
                            query = query + " and cxc.codigo_oc="+ Codigo_Oc +"\n";
                        
                        }
        
        try {
            rs = sql.Select(query);
            DefaultTableModel model = (DefaultTableModel) GrillaMovimientos.getModel();
            
            while(model.getRowCount()>0){
                model.removeRow(0);
            }
            
            rs.last();
            
            if(rs.getRow()>0){
                
                rs.beforeFirst();
                
                for(int i = 0; rs.next();i++){
            
                    model.addRow(new Object[]{
                        rs.getString("rut").trim(),
                        rs.getString("nombre").trim(),
                        rs.getString("codigo_oc").trim(),
                        rs.getString("occh").trim().trim(),
                        rs.getString("tipo").trim().trim(),
                        rs.getInt("nrodocto"),
                        rs.getString("femision").trim(),
                        rs.getString("fpago").trim(),
                        rs.getString("monto"),
                        rs.getString("pagado"),
                        rs.getInt("monto")-rs.getInt("pagado"),
                        rs.getString("id")
                       
                    });
                }
            }
            else {
                JOptionPane.showMessageDialog(null, "RUT sin cargos.");
                txDato.setText("");
            }
        } catch (SQLException ex) {
            Logger.getLogger(pfCli_AbonosRecibidos.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    public void CargaNroCargos(String nro) {
        ExeSql sql = new ExeSql();
        ResultSet rs = null;
                        
        String query =  "select distinct \n" +
                        "case cxc.estado "+
                            "when 0 then 'Pendiente' "+
                            "when 1 then 'Vencida' "+
                            "when 2 then 'Parcial' "+
                            "else 'Pagado' end as Estado,\n" +
                        "cxc.tipdocto as tipo, \n" +
                        "cxc.rut,case when c.nombre is null then 'No Definido' else c.nombre end as nombre, \n" +
                        "cxc.codigo_oc,case when cli.occh is null then '--' else cli.occh end as occh,\n" +
                        "cxc.nrodocto,cxc.femision,cxc.femision + cast((select valor from par_general where tipo='PLAZOSCOBRANZA' and codigo=0) as integer) as fpago ,cxc.monto,\n" +
                        "cxc.pagado,cxc.monto-cxc.pagado as saldo,cxc.id, case cxc.estado when 3 then (clipa.fechapago-cxc.femision) ELSE (CURRENT_DATE-cxc.femision) end  as Dias\n" +
                        "from cli_cuentasxcobrar cxc\n" +
                        "left join cliente c on c.rut=cxc.rut\n" +
                        "left join ctactecli cli on cli.tipdocto=cxc.tipdocto and cli.rut=cxc.rut and cli.nrodocto=cxc.nrodocto\n" +
                        "left join cli_pagos clipa on clipa.cuenta =cxc.id \n "+                
                        "where cxc.estado in (0,1,2) and cxc.tipdocto IN ('FAC','FAT','FEC','BOC')";
        
                        query = query + " and cxc.nrodocto=" + nro.trim() +"\n";
                        
                        
//                        if (cbCostos.getSelectedIndex() > 0){
//                            
//                            String Codigo_Oc = cbCostos.getSelectedItem().toString().trim();
//                            query = query + " and cxc.codigo_oc="+ Codigo_Oc +"\n";
//                        
//                        }
        
        try {
            rs = sql.Select(query);
            DefaultTableModel model = (DefaultTableModel) GrillaMovimientos.getModel();
            
            while(model.getRowCount()>0){
                model.removeRow(0);
            }
            
            rs.last();
            
            if(rs.getRow()>0){
                
                rs.beforeFirst();
                
                for(int i = 0; rs.next();i++){
            
                    model.addRow(new Object[]{
                        rs.getString("rut").trim(),
                        rs.getString("nombre").trim(),
                        rs.getString("codigo_oc").trim(),
                        rs.getString("occh").trim().trim(),
                        rs.getString("tipo").trim().trim(),
                        rs.getInt("nrodocto"),
                        rs.getString("femision").trim(),
                        rs.getString("fpago").trim(),
                        rs.getString("monto"),
                        rs.getString("pagado"),
                        rs.getInt("monto")-rs.getInt("pagado"),
                        rs.getString("id")
                       
                    });
                }
            }
            else {
                JOptionPane.showMessageDialog(null, "RUT sin cargos.");
                txDato.setText("");
            }
        } catch (SQLException ex) {
            Logger.getLogger(pfCli_AbonosRecibidos.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    private boolean CargaCliente(String Rut) {
        ExeSql Sql = new ExeSql();
        ResultSet Rs;
        DefaultComboBoxModel cbMd = new DefaultComboBoxModel();
        try {
            Rs = Sql.Select("select * from cliente where rut in ("+Rut+")");
              if(Sql.GetRowCount()==0){
                    fmMain.Mensaje("No Existen Registros");
                  return false;
                }
            if(Rut.length()<1){
                return false;
            }
      
            String texto = "";
            for(int i = 0; Rs.next(); i++){
                texto = texto + Rs.getString("Rut")+ ",";
                
            }
            String rut = texto.substring(0, texto.length() - 1);
            txDato.setText(rut);
            
            cbCostos.setEnabled(true);
            cbCostos.removeAllItems();
            
            cbCostos.addItem("Todos");
            
            Rs = Sql.Select("select codigo_oc\n" +
                            "from clicontacto\n" +
                            "where rut=" + Rut);
            while(Rs.next()){
              cbCostos.addItem(Rs.getString("codigo_oc").trim());
            }
          
            return true;

        } catch (Exception e) {
            JOptionPane.showMessageDialog(txDato, e);
            return false;
        }
        finally{
            Sql.Close();
        }
    }
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.jdesktop.swingx.JXDatePicker Fecha;
    private javax.swing.JTable GrillaCartola;
    private javax.swing.JTable GrillaMovimientos;
    private javax.swing.JButton btCargaCartola;
    private javax.swing.JButton btConciliar;
    private javax.swing.JButton btIr;
    private javax.swing.JButton btRelaciones;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cbBanco;
    private javax.swing.JComboBox cbBancoId;
    private javax.swing.JComboBox cbConciliacion;
    private javax.swing.JComboBox cbCostos;
    private javax.swing.JComboBox cbCuenta;
    private javax.swing.JComboBox cbCuentaId;
    private javax.swing.JComboBox cbEspecifico;
    private javax.swing.JComboBox cbEspecifico1;
    private javax.swing.JComboBox cbRango;
    private javax.swing.JCheckBox chkFecha;
    private javax.swing.JCheckBox chkGastos;
    private javax.swing.JCheckBox chkPagoProveedores;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbTexto;
    private javax.swing.JTextField txDato;
    private javax.swing.JTextField txSku;
    private javax.swing.JTextField txtDocumento;
    // End of variables declaration//GEN-END:variables
}
