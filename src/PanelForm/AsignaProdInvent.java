/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package PanelForm;

import Conexion.ExeSql;
import Conexion.ExeSqlLuvaly;
import Dialogos.jdBuscaUbicacion;
import Dialogos.jdBuscarProductos;
import Dialogos.jdBuscarProductosEsp;
import Dialogos.jdEntrada;
import Dialogos.jdProductosVenc;
import Formularios.fmMain;
import static Formularios.fmMain.intNivelUsuario;
import Utilidades.ComboCodigos;
import Utilidades.Combo_CodStr;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.table.DefaultTableModel;
import java.awt.Toolkit;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
/**
 *
 * @author luvaly
 */
public class AsignaProdInvent extends javax.swing.JPanel {
    
    public static Color DARK_GREEN = new Color(0,153,0);
    public boolean booAgregando = false;    
    public double en_ingreso=0.0;
    public String nombrePalabra ="", StrUnidad ="";
    public int cont = 0;
    String IdVenc = "0";
    int convenio = 0;
    String LaUbicacion = "";
    Date hoy = new Date();
    int esFec = 0;


    DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
     
    public AsignaProdInvent() {
     
        initComponents();
        btLimpiaTodo.doClick();
//        rightRenderer.setHorizontalAlignment(SwingConstants.RIGHT);
//        Grilla_prod.getColumnModel().getColumn(2).setCellRenderer(rightRenderer);
        jPanelHasta.setBorder(javax.swing.BorderFactory.createTitledBorder("UBICACION HASTA"));
        CargaBodega();
        rbAutoma.setSelected(true);
        rbManual.setSelected(false); 
        rbManual.setEnabled(false);
        jPanel5.setVisible(false);
        txFecha.setVisible(false);
        txtCant.setText("1");      //Se establece cantidad por defecto
        txtCant.setEditable(false);  //Cantidad bloqueada por modo automatico
        txtSku.requestFocus();
        
        if (intNivelUsuario!=100){              //Se Valida si usuario no es nivel 100
        
            btCodEsp.setVisible(false);         //se desactiva bot√≥n
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanelHasta = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txNombreUbica = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        btAdd = new javax.swing.JButton();
        txtSku = new javax.swing.JTextField();
        btMenos = new javax.swing.JButton();
        txtUbicacion = new javax.swing.JTextField();
        btTeclado = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtCant = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        btLimpiaTodo = new javax.swing.JButton();
        txNombre = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        cbBodega = new javax.swing.JComboBox<String>();
        cbRack = new javax.swing.JComboBox<String>();
        cbMetro = new javax.swing.JComboBox<String>();
        bt_hasta = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        Grilla_prod = new javax.swing.JTable();
        btEliminar_linea = new javax.swing.JButton();
        btEliminarTodo = new javax.swing.JButton();
        rbAutoma = new javax.swing.JRadioButton();
        rbManual = new javax.swing.JRadioButton();
        lblReg = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        btUbicacion = new javax.swing.JButton();
        btCodEsp = new javax.swing.JButton();
        txFecha = new javax.swing.JTextField();
        chkAgrega = new javax.swing.JCheckBox();

        jPanelHasta.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel3.setText("Nombre");

        txNombreUbica.setEditable(false);
        txNombreUbica.setBackground(new java.awt.Color(255, 255, 255));
        txNombreUbica.setForeground(new java.awt.Color(0, 0, 255));
        txNombreUbica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txNombreUbicaActionPerformed(evt);
            }
        });

        jLabel13.setText("Cantidad");

        btAdd.setText("+");
        btAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAddActionPerformed(evt);
            }
        });

        txtSku.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSkuKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSkuKeyReleased(evt);
            }
        });

        btMenos.setText("-");
        btMenos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btMenosActionPerformed(evt);
            }
        });

        txtUbicacion.setFocusable(false);
        txtUbicacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUbicacionActionPerformed(evt);
            }
        });
        txtUbicacion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtUbicacionKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtUbicacionKeyReleased(evt);
            }
        });

        btTeclado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/keyboard.png"))); // NOI18N
        btTeclado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btTecladoActionPerformed(evt);
            }
        });

        jLabel1.setText("Ubicacion");

        txtCant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCantActionPerformed(evt);
            }
        });
        txtCant.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCantKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCantKeyReleased(evt);
            }
        });

        jLabel2.setText("Sku");

        btLimpiaTodo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos16/erase16.png"))); // NOI18N
        btLimpiaTodo.setText("Limpiar");
        btLimpiaTodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLimpiaTodoActionPerformed(evt);
            }
        });

        txNombre.setEditable(false);
        txNombre.setBackground(new java.awt.Color(255, 255, 255));
        txNombre.setForeground(new java.awt.Color(255, 0, 0));

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("UBICACION"));

        cbBodega.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbBodegaActionPerformed(evt);
            }
        });

        cbRack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbRackActionPerformed(evt);
            }
        });

        cbMetro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbMetroActionPerformed(evt);
            }
        });

        bt_hasta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/Ok.png"))); // NOI18N
        bt_hasta.setEnabled(false);
        bt_hasta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_hastaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cbBodega, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbRack, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbMetro, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bt_hasta, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bt_hasta, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cbBodega, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cbRack, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cbMetro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        Grilla_prod.setAutoCreateRowSorter(true);
        Grilla_prod.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cod", "Nombre", "Cant", "Graba", "Ingr", "Unidades", "Fecha", "Publicado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Grilla_prod.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Grilla_prodMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(Grilla_prod);
        if (Grilla_prod.getColumnModel().getColumnCount() > 0) {
            Grilla_prod.getColumnModel().getColumn(0).setMinWidth(100);
            Grilla_prod.getColumnModel().getColumn(0).setPreferredWidth(100);
            Grilla_prod.getColumnModel().getColumn(0).setMaxWidth(100);
            Grilla_prod.getColumnModel().getColumn(1).setMinWidth(400);
            Grilla_prod.getColumnModel().getColumn(1).setPreferredWidth(400);
            Grilla_prod.getColumnModel().getColumn(1).setMaxWidth(400);
            Grilla_prod.getColumnModel().getColumn(2).setMinWidth(100);
            Grilla_prod.getColumnModel().getColumn(2).setPreferredWidth(100);
            Grilla_prod.getColumnModel().getColumn(2).setMaxWidth(100);
            Grilla_prod.getColumnModel().getColumn(4).setMinWidth(0);
            Grilla_prod.getColumnModel().getColumn(4).setPreferredWidth(0);
            Grilla_prod.getColumnModel().getColumn(4).setMaxWidth(0);
            Grilla_prod.getColumnModel().getColumn(5).setMinWidth(150);
            Grilla_prod.getColumnModel().getColumn(5).setPreferredWidth(150);
            Grilla_prod.getColumnModel().getColumn(5).setMaxWidth(150);
            Grilla_prod.getColumnModel().getColumn(7).setMinWidth(0);
            Grilla_prod.getColumnModel().getColumn(7).setPreferredWidth(0);
            Grilla_prod.getColumnModel().getColumn(7).setMaxWidth(0);
        }

        btEliminar_linea.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos16/Eliminar.png"))); // NOI18N
        btEliminar_linea.setText("Eliminar Linea");
        btEliminar_linea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEliminar_lineaActionPerformed(evt);
            }
        });

        btEliminarTodo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos16/trush16.png"))); // NOI18N
        btEliminarTodo.setText("Elimina Todo");
        btEliminarTodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEliminarTodoActionPerformed(evt);
            }
        });

        buttonGroup1.add(rbAutoma);
        rbAutoma.setText("Automatico");
        rbAutoma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbAutomaActionPerformed(evt);
            }
        });

        buttonGroup1.add(rbManual);
        rbManual.setText("Manual");
        rbManual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbManualActionPerformed(evt);
            }
        });

        lblReg.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblReg.setText("Reg");

        jButton1.setText("Busca Desc");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btUbicacion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos16/search16.png"))); // NOI18N
        btUbicacion.setToolTipText("Ubicaci√≥n");
        btUbicacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btUbicacionActionPerformed(evt);
            }
        });

        btCodEsp.setForeground(new java.awt.Color(51, 153, 0));
        btCodEsp.setText("Codigos Especiales");
        btCodEsp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCodEspActionPerformed(evt);
            }
        });

        txFecha.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txFecha.setToolTipText("");

        chkAgrega.setText("No Agrega a Stock");

        javax.swing.GroupLayout jPanelHastaLayout = new javax.swing.GroupLayout(jPanelHasta);
        jPanelHasta.setLayout(jPanelHastaLayout);
        jPanelHastaLayout.setHorizontalGroup(
            jPanelHastaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelHastaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelHastaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelHastaLayout.createSequentialGroup()
                        .addGroup(jPanelHastaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelHastaLayout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1029, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanelHastaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btEliminar_linea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btEliminarTodo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btLimpiaTodo, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(lblReg, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanelHastaLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(jPanelHastaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelHastaLayout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txNombre))
                            .addComponent(txNombreUbica)
                            .addGroup(jPanelHastaLayout.createSequentialGroup()
                                .addGroup(jPanelHastaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanelHastaLayout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(20, 20, 20)
                                        .addComponent(txtSku, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jButton1))
                                .addGap(6, 6, 6)
                                .addGroup(jPanelHastaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanelHastaLayout.createSequentialGroup()
                                        .addComponent(jLabel13)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtCant, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelHastaLayout.createSequentialGroup()
                                        .addGap(17, 17, 17)
                                        .addComponent(btMenos, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btAdd)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btTeclado, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanelHastaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rbManual)
                                    .addComponent(rbAutoma))
                                .addGap(169, 169, 169)
                                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanelHastaLayout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtUbicacion, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btUbicacion, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(164, 164, 164)
                                .addComponent(chkAgrega, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(134, 134, 134)))
                        .addGap(52, 52, 52)
                        .addComponent(btCodEsp, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(107, 107, 107))))
        );
        jPanelHastaLayout.setVerticalGroup(
            jPanelHastaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelHastaLayout.createSequentialGroup()
                .addGroup(jPanelHastaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelHastaLayout.createSequentialGroup()
                        .addGroup(jPanelHastaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelHastaLayout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addGroup(jPanelHastaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btUbicacion, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                                    .addGroup(jPanelHastaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel1)
                                        .addComponent(txtUbicacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18))
                            .addGroup(jPanelHastaLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanelHastaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(chkAgrega))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addComponent(txNombreUbica, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelHastaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelHastaLayout.createSequentialGroup()
                                .addGroup(jPanelHastaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanelHastaLayout.createSequentialGroup()
                                        .addGroup(jPanelHastaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel13)
                                            .addComponent(txtCant, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtSku, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanelHastaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(btMenos)
                                            .addComponent(btAdd)
                                            .addComponent(jButton1)))
                                    .addComponent(jLabel2)
                                    .addComponent(btTeclado, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanelHastaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3)))
                            .addGroup(jPanelHastaLayout.createSequentialGroup()
                                .addComponent(rbAutoma)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rbManual))))
                    .addGroup(jPanelHastaLayout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addComponent(btCodEsp, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelHastaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanelHastaLayout.createSequentialGroup()
                        .addComponent(btLimpiaTodo, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(70, 70, 70)
                        .addComponent(btEliminar_linea, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btEliminarTodo, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 126, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addComponent(lblReg, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelHasta, javax.swing.GroupLayout.PREFERRED_SIZE, 1194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(430, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelHasta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(120, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtSkuKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSkuKeyPressed
    
    if(evt.getKeyCode() == KeyEvent.VK_ENTER){
        
        if (txtSku.getText().trim().equals("")){
           
            fmMain.Mensaje("Debe Ingresar C√≥digo!");
            return;
           
        }
        
        
        
        
        nombrePalabra =txtSku.getText().trim() + Character.toString(evt.getKeyChar());
        
        if (nombrePalabra.substring(0,4).trim().equals("TRAN") || nombrePalabra.substring(0,3).trim().equals("INV") ||
            nombrePalabra.substring(0,3).trim().equals("BOD")  || nombrePalabra.substring(0,3).trim().equals("SAL") ) {
           
               txtSku.setText("");
               nombrePalabra = nombrePalabra.trim();
               txtUbicacion.setText(nombrePalabra);
               trae_ubicacion(nombrePalabra);
               Carga_Prod_Ubicacion(nombrePalabra,1);
               txtSku.requestFocus();
               return;   
           
        }else{
        
            carga_producto();

        }
    }
       
        
    }//GEN-LAST:event_txtSkuKeyPressed

    private void trae_ubicacion (String Ubica){
    
        ExeSql Sql = new ExeSql();
        
        ResultSet Rs, Rs1;
        String Query2 ;
        String strUbicacion = "";
        
        try{         
        
            strUbicacion = Ubica.trim();
            
            Query2 = "SELECT nombre AS ubc FROM mt_codmetro WHERE codmetro = '"+strUbicacion+"'";   
                 
            Rs1 = Sql.Select(Query2);

            if (Rs1.next()){
            
                strUbicacion =Rs1.getString("ubc").trim();

                txNombreUbica.setText(strUbicacion);
              //Carga_Prod_Ubicacion(Ubica,1);
            }else{
                
                Toolkit.getDefaultToolkit().beep(); 
                fmMain.Mensaje("Ubicacion no encontrada, favor revise la ubicaci√≥n");
                limpia_all();
            }
        }catch (Exception e) {
            System.out.println(e.getMessage());
        } finally{
            Sql.Close();
        }               
    }
    

//-------------------  Carga Combnobox ---------------------------------------
    public void CargaBodega(){
    
        DefaultComboBoxModel value;
        ExeSql Sql = new ExeSql();
        ResultSet Rs;
        String Query="";
        cbBodega.removeAllItems();
        int i=0;
        value =new DefaultComboBoxModel();
        try {
        
            Query="SELECT codigo, bodega FROM mt_bodega ORDER BY codigo;";
            Rs = Sql.Select(Query);
            if(Sql.GetRowCount()==0) return;
            
            value.addElement(new Combo_CodStr("Seleccione","",0));     
            
            while(Rs.next()){
               value.addElement(new Combo_CodStr(Rs.getString("bodega").trim(),Rs.getString("codigo").trim(),i));
               System.out.println(Rs.getString("bodega").trim());
               i++;
            } 
            cbBodega.setModel(value);
            cbBodega.setSelectedIndex(0);
         

        }catch (Exception e) {
            System.out.println(e);
        }finally{
     
            Sql.Close();
        }
    }
     
     
    public void CargaRack(){
    
        DefaultComboBoxModel value;
        ExeSql Sql = new ExeSql();
        ResultSet Rs;
        String Query="";
        cbRack.removeAllItems();
        int i=0;

        value =new DefaultComboBoxModel(); 

        try {   
           
            Query="SELECT r.rack, r.codigo FROM mt_rack r \n" +
                  "WHERE r.bodega = (SELECT b.codigo FROM mt_bodega b WHERE b.bodega='"+cbBodega.getSelectedItem().toString().trim()+"')";
            
            Rs = Sql.Select(Query);
            
            if(Sql.GetRowCount()==0) return;
            
            value.addElement(new ComboCodigos("Seleccione",0)); 
           
            while(Rs.next()){
            
                value.addElement(new ComboCodigos(Rs.getString("rack").trim(),Rs.getInt("codigo")));
                System.out.println(Rs.getString("rack").trim());
                i++;
            } 
           
            cbRack.setModel(value);
           
            if (cbRack.getSelectedIndex()>0){
                cbRack.setSelectedIndex(0);}
           
        }catch (Exception e) {
            System.out.println(e);
        }finally{
            Sql.Close();
        }
    }
     
     
     public void CargaMetro(){
        
        DefaultComboBoxModel value;
        ExeSql Sql = new ExeSql();
        ResultSet Rs;
        String Query="";
        cbMetro.removeAllItems();

        value =new DefaultComboBoxModel();
        try {
            String strbodega="";

            if ((cbRack.getSelectedIndex()>0) && (cbBodega.getSelectedIndex()>0)){
                   
                Combo_CodStr bodega = (Combo_CodStr) cbBodega.getSelectedItem();
                bodega.getId(); 
                        
                ComboCodigos RackCodigo = (ComboCodigos) cbRack.getSelectedItem();
                RackCodigo.getId();
                         
                Query ="SELECT m.metro,m.codigo FROM mt_bodega b \n" +
                       "LEFT JOIN mt_rack r ON b.codigo = r.bodega \n" +
                       "LEFT JOIN mt_metro m on m.rack = r.codigo\n" +
                       "WHERE m.rack =" + RackCodigo.getId() + " AND r.bodega = '" + bodega.getId() +"' ORDER BY m.codigo;";    
            }else{
            
                return;
            }
            
            Rs = Sql.Select(Query);
            if(Sql.GetRowCount()==0) return;
            
            value.addElement(new ComboCodigos("Seleccione",0)); 
            
            while(Rs.next()){
            
                value.addElement(new ComboCodigos(Rs.getString("metro").trim(),Rs.getInt("codigo")));
                System.out.println(Rs.getString("metro").trim());
            
            } 
            cbMetro.setModel(value);
            cbMetro.setSelectedIndex(0);
           
           
        }catch (Exception e) {
            System.out.println(e);
        }finally{
            Sql.Close();
        }
     }    
//  -------------------  Agrega la carga de combos en Ubicacion Original----------------------------
     
//-----------------------------------------------------------------------------------------------
     
    private String  existe_sku(String Codigo){
        
        ExeSql Sql = new ExeSql();
        ResultSet Rs1;
        String Query2 ="";
        String strUbicacion = "";
        
        try{
         
            Query2 = "SELECT * FROM mt_productos WHERE sku = '" + Codigo + "'";
            Rs1 = Sql.Select(Query2);
         
            if (Rs1.next()){
                return(Rs1.getString("sku"));
            }   
        }catch (Exception e) {
        
            System.out.println(e.getMessage());
        
        }finally{
        
            Sql.Close();
        }          
        return(""); 
    }
            
    private void agrega_linea(){
                 
        ExeSql Sql = new ExeSql();
        ExeSql Sql2 = new ExeSql();
        ExeSql Sql3 = new ExeSql();
        ExeSql Sql4 = new ExeSql();
        ExeSql Sql5 = new ExeSql();
        ExeSql Sql6 = new ExeSql();
        
        ResultSet Rs, Rs3, Rs4,Rs5;
        String Query, qryIns, qryUpd,Sku,Ubicacion,StUsuario ;
        Ubicacion ="";
        double cantidad_grilla_ins=0.0;    

        
        String codigo="";
        int pos = -1;
        double  cant_picking=0.00;
        double  cant_picking2=0.00;
        double cant_ingresa=0.00;

        DefaultTableModel TableModel = (DefaultTableModel) Grilla_prod.getModel();
        
         //---- Inicio----------------------------
        // Queda seteado para grabar
        if (booAgregando == false){
            
            for (int i=0; i<=Grilla_prod.getRowCount()-1; i++ ){
               
                Grilla_prod.setValueAt("NO", i, 3);
                Grilla_prod.setValueAt("0", i, 4);
            }
            
            booAgregando = true;
            Grilla_prod.changeSelection(0, 0 , false, false);
            en_ingreso=0.0;
            fmMain.SetEstado(fmMain.pnPestanas.getSelectedIndex(), 0);
        }
        //----------------------------------------
             
        // Busca si el codigo se ha ingresado anteriormente en la grilla
        for (int i=0; i<=Grilla_prod.getRowCount()-1; i++ ){
        
            codigo= Grilla_prod.getValueAt(i, 0).toString().trim();
            
            if (codigo.equals(txtSku.getText().trim())){
                pos = i;
                break;
            }
        }
         
        if (pos >= 0){    // Si el codigo del prodcuto ya esta ingresado en la grilla modificara la cantidad ingresada
         
                Grilla_prod.changeSelection(pos, 0 , false, false);
                cant_ingresa = Double.parseDouble(fmMain.SetGuardar(txtCant.getText().trim()));
                cant_picking = Double.valueOf(fmMain.SetGuardar(Grilla_prod.getValueAt(Grilla_prod.getSelectedRow(), 2).toString().trim()));
                cant_picking2 = Double.valueOf(fmMain.SetGuardar(Grilla_prod.getValueAt(Grilla_prod.getSelectedRow(), 4).toString().trim()));
                    
                cant_picking = cant_picking + cant_ingresa;
                en_ingreso = cant_picking2 + cant_ingresa;
                Grilla_prod.setValueAt(en_ingreso, pos, 4);
                Grilla_prod.setValueAt(cant_picking, pos, 2);
                Grilla_prod.setValueAt("SI", pos, 3);
               
                
                //************************************** Fecha Vencimiento Productos ************************************************// 
                try {
                 
                    if (convenio == 4){
                            
                        String Qry3 = "SELECT * FROM producto_venc2 \n "+
                                      "WHERE sku= '" + txtSku.getText().trim() +"' \n"+
                                      "AND id_venc = '"+ IdVenc+"'"; 
                            
                        Rs3 = Sql3.Select(Qry3);
                            
                        if(Sql3.GetRowCount()==0){                   //Si no existe el registro
                           
                            
                            String sfecha = txFecha.getText().trim();            //Crea la fecha a partir del Id
                        
                            Sql.ExeSql("INSERT INTO producto_venc2 \n" +
                                       "(id_venc,rut,tipdocto,nrodocto,sku,fecha_venc,cantidad_venc) " +
                                       "VALUES ('" +
                                       IdVenc +"',"+
                                       "'0',"+
                                       "'0'," +
                                       0 + ",'"+
                                       txtSku.getText().trim() + "','" +
                                       sfecha + "',"+
                                       txtCant.getText().trim() + ")");
                      
                            Sql.Commit();
                            
                            
                            
                          
                            
                           
                        
                        }else if(Sql3.GetRowCount() >0){      //Si existe un registro con la misma fecha de vencimiento
                            
                                Rs3.next();
                           
                                String sfecha = txFecha.getText().trim();         //Crea la fecha a partir del Id
                                String scant = txtCant.getText().trim();
                                
                                //scant = scant.substring(0, scant.length() - 2); 
                                                                
                                double cant_venc = Double.valueOf(scant);
                                double cantidad = (Rs3.getInt("cantidad_venc") + cant_venc );
                                int cantidad2 = (int)cantidad; 
                                
                                Sql.ExeSql("UPDATE producto_venc2 \n" +
                                           "SET cantidad_venc='" + cantidad2+"' \n" +
                                           "WHERE sku='"+ txtSku.getText().trim() +"'"+
                                           "AND fecha_venc='" +sfecha+"'" );
                                Sql.Commit();
                               
                        }
                    
                    } 
            
                 
                }catch (SQLException ex) {
                   Logger.getLogger(AsignaProdInvent.class.getName()).log(Level.SEVERE, null, ex);
                   
                }finally{
                
                     Sql.Close();
                     
                
                }
               //*****************************************************************************************************//           
                
                fmMain.SetEstado(fmMain.pnPestanas.getSelectedIndex(), 1);
                // Falta por pickear Grilla_prod.setValueAt(cant_solicitada-cant_picking, pos, 5); 
                // Marca lo pickeado Grilla_prod.setValueAt(1, pos, 6);
                txtSku.setText(""); // Asigno SKU vacio para leer el otro codigo
                return;
                    
        }else{    // Si el codigo del producto no est√° ingresado en la grilla se crea la cantidad ingresada
            
            System.out.println("ENTRA AQUI !!");
            
            
            TableModel.addRow(new Object[]{txtSku.getText().trim(),txNombre.getText().trim() ,txtCant.getText().trim(),"INS","0", StrUnidad.trim()});
                           
            Sku= txtSku.getText().trim() ;
            Ubicacion = txtUbicacion.getText().trim();
            StUsuario = fmMain.GetUsuario();  
          

            try{      
                
                double txCant = Double.parseDouble(txtCant.getText().trim());
                
                if (txCant < 1){
           
                    fmMain.Mensaje("La Cantidad no puede ser 0");
                    return;
           
                }
                
                
                qryIns = "INSERT INTO mt_productos (ubicacion,sku,usuario,cant) \n" +
                         "VALUES ('" + Ubicacion + "','" + Sku + "','" + StUsuario +  "'," + txtCant.getText().trim() + ")"; 
                Sql.ExeSql(qryIns);
                Sql.Commit();
                     
                if (!chkAgrega.isSelected()){
                        
                        String Qry4 = "SELECT * FROM inventario \n "+
                                      "WHERE sku= '" + txtSku.getText().trim() +"'";
                                      
                            
                        Rs4 = Sql4.Select(Qry4);
                            
                        if(Sql4.GetRowCount()==0){                   //Si no existe el registro
                
                
                            qryIns = "INSERT INTO inventario (sku,stock) \n" +
                                     "VALUES ('" + Sku + "'," + Double.valueOf(fmMain.SetGuardar(txtCant.getText().trim())) + ")"; 
                            Sql2.ExeSql(qryIns);
                            Sql2.Commit();
                 
                        }else if(Sql4.GetRowCount() > 0){
                
                
                            Sql2.ExeSql("UPDATE inventario SET stock = stock + " +  Double.valueOf(fmMain.SetGuardar(txtCant.getText().trim())) + " \n" +
                                        "WHERE sku = '" + Sku + "' ");
                
                            Sql2.Commit();
                        }
                }
      //*****************************************************************************************************************************************//
                
                String Qry5 = "SELECT * FROM producto_valores \n "+
                               "WHERE sku= '" + txtSku.getText().trim() +"'";
                                      
                            
                Rs5 = Sql4.Select(Qry5);
                            
                if(Sql5.GetRowCount()==0){                   //Si no existe el registro
                
                    qryIns = "INSERT INTO producto_valores (sku) \n" +
                             "VALUES ('" + Sku + "')"; 
                    Sql6.ExeSql(qryIns);
                    Sql6.Commit();
                 
                }
                
                
       //************************************** Fecha Vencimiento Productos ************************************************// 
                                          
                if (convenio == 4){
                            
                    String Qry3 = "SELECT * FROM producto_venc2 \n "+
                                   "WHERE sku= '" + txtSku.getText().trim() +"' \n"+
                                   "AND id_venc = '"+ IdVenc+"'"; 
                            
                    Rs3 = Sql3.Select(Qry3);
                            
                    if(Sql3.GetRowCount()==0){  //Si no existe el registro 
                                
                       String sfecha = txFecha.getText().trim();            //Crea la fecha a partir del Id
                                
                        Sql.ExeSql("INSERT INTO producto_venc2 \n" +
                                  "(id_venc,rut,tipdocto,nrodocto,sku,fecha_venc,cantidad_venc) " + 
                                   "VALUES ('" +
                                    IdVenc +"',"+
                                    "'0',"+
                                    "'0'," +
                                     0 + ",'"+
                                    txtSku.getText().trim() + "','" +
                                    sfecha + "',"+
                                    txtCant.getText().trim() + ")");
                        Sql.Commit();
                        
                            
                    }else if(Sql3.GetRowCount() >0){      //Si existe un registro con la misma fecha de vencimiento
                            
                            Rs3.next();
                           
                            String sfecha = txFecha.getText().trim();         //Crea la fecha a partir del Id
                                
                                
                           String scant = txtCant.getText().trim();
                           scant = scant.substring(0, scant.length() - 3); 
                           int cant_venc = Integer.valueOf(scant);
                           int cantidad = (Rs3.getInt("cantidad_venc") + cant_venc );
                                
                           Sql.ExeSql("UPDATE producto_venc2\n" +
                                      "SET cantidad_venc=" + cantidad+"\n" +
                                      "WHERE sku='"+ txtSku.getText().trim() +"'"+
                                      "AND fecha_venc='" +sfecha+"'" );
                           Sql.Commit();
                           
                    }
                
                }
                
               //*****************************************************************************************************//           
                
                        
            }catch (Exception e) {
               
                Sql.Rollback();
                Sql2.Rollback();
                
               System.out.println(e.getMessage());
            } finally{
              Sql.Close(); 
              Sql2.Close();
           }                

            
        }
       // TableModel.addRow(new Object[]{txtSku.getText().trim(), txNombre.getText().trim()});
        // txtSku.setText("");
         txNombre.setText("");
         txtSku.requestFocus();
    }
    
    private void txtUbicacionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUbicacionKeyPressed
        
        ExeSql Sql = new ExeSql();
        ResultSet Rs, Rs1;
        String Query2 ;
        String strUbicacion = "";
        
        try{ 
                if(evt.getKeyCode() == KeyEvent.VK_ENTER){
                    
                    strUbicacion = txtUbicacion.getText();
                    String nombrePalabra =strUbicacion + Character.toString(evt.getKeyChar());    
                 
                    String ubicaArray[] = strUbicacion.split("\\.");
                    
                    if (ubicaArray.length<3 ){
                        Toolkit.getDefaultToolkit().beep(); 
                        fmMain.Mensaje("Favor revise el codigo, no es de Ubicacion");
                         
                        txtUbicacion.setText("");
                        txNombreUbica.setText("");
                        txtUbicacion.requestFocus();
                        return;   
                    } 
                 
                 
                    if (nombrePalabra.substring(0,3).trim().equals("SAL") || nombrePalabra.substring(0,3).trim().equals("BOD") || 
                        nombrePalabra.substring(0,4).trim().equals("TRAN")){
                    
                        System.out.println("Codigo Correcto de Ubicacion");
                    
                    }else{ 
                        
                        Toolkit.getDefaultToolkit().beep(); 
                        fmMain.Mensaje("Favor revise el codigo, no es de Ubicacion");
                        
                        txtUbicacion.setText("");
                        txNombreUbica.setText("");
                        txtUbicacion.requestFocus();
                        return;   
                    }
 
                    Query2 = "SELECT nombre AS ubc FROM mt_codmetro WHERE codmetro = '"+strUbicacion+"'";    
                 
                     Rs1 = Sql.Select(Query2);
                     if (Rs1.next()){
                        strUbicacion =Rs1.getString("ubc").trim();
                        txNombreUbica.setText(strUbicacion);
                        Carga_Prod_Ubicacion(txtUbicacion.getText().trim(),1);
                     
                     }else{  
                     
                         Toolkit.getDefaultToolkit().beep(); 
                         fmMain.Mensaje("Ubicacion no encontrada, favor revise la ubicaci√≥n");
                        
                     }
                      
                 
                } 
        }catch (Exception e) {
            System.out.println(e.getMessage());
        } finally{
            Sql.Close();
        }    
    }//GEN-LAST:event_txtUbicacionKeyPressed

    
    private void grabar(){
    
        DefaultTableModel TableModel = (DefaultTableModel) Grilla_prod.getModel();
        ExeSql Sql = new ExeSql();
        ExeSql Sql2 = new ExeSql();
        ExeSql Sql4 = new ExeSql();
        ExeSql Sql5 = new ExeSql();
        ExeSql Sql6 = new ExeSql();
        
        ResultSet Rs, Rs4, Rs5;
        String Query, qryIns, qryUpd,Sku,Ubicacion,StUsuario ;
        Ubicacion ="";
        double cantidad_grilla_ins=0.0;
        boolean grabo = false;
    
        try{ 
        
            if (txtCant.getText().equals("")){
                Toolkit.getDefaultToolkit().beep(); 
                fmMain.Mensaje("Debe ingresar cantidad al producto");
                txtCant.requestFocus();
                return;
            }
                
            for (int i=0; i<=Grilla_prod.getRowCount()-1; i++ ){
                
                if (Grilla_prod.getValueAt(i, 3).toString().trim()=="SI"){
                    
                    grabo = true;
                    break;
                
                }else{
               
                    grabo = false; 
                }
            }
        
            for (int i=0; i<=Grilla_prod.getRowCount()-1; i++ ){
            
                if (Grilla_prod.getValueAt(i, 3).toString().trim()=="SI"){
                    
                    Sku= Grilla_prod.getValueAt(i, 0).toString().trim();
                    Ubicacion = txtUbicacion.getText().trim();
                    StUsuario = fmMain.GetUsuario();

                    qryIns = "UPDATE mt_productos SET cant = " +  Double.valueOf(fmMain.SetGuardar(Grilla_prod.getValueAt(i, 2).toString().trim())) + ", \n" +
                             "usuario_mod ='" +fmMain.GetUsuario() + "', fecha_mod = now(), ubica_origen ='" + "Carga_Inicial" + "' \n" +
                             "WHERE ubicacion = '" + txtUbicacion.getText().trim() + "' AND sku = '" + Sku + "' ";
                        
                    System.out.println("Fila grabada: " + i + " Ubic: " + txtUbicacion.getText().trim() + " SKU: " + Grilla_prod.getValueAt(i, 1).toString().trim());
                    Sql.ExeSql(qryIns);

                if (!chkAgrega.isSelected()){    
                     
                    String Qry4 = "SELECT * FROM inventario \n "+
                                  "WHERE sku= '" + Sku +"'";
                            
                    Rs4 = Sql4.Select(Qry4);
                            
                    if(Sql4.GetRowCount()==0){                   //Si no existe el registro en inventario
                                
                        qryIns = "INSERT INTO inventario (sku,stock) \n" +
                                 "VALUES ('" + Sku + "'," + Double.valueOf(fmMain.SetGuardar(Grilla_prod.getValueAt(i, 2).toString().trim())) + ")"; 
                        Sql2.ExeSql(qryIns);
                        Sql2.Commit();
                 
                    }else if(Sql4.GetRowCount() > 0){
                
                        Sql2.ExeSql("UPDATE inventario SET stock = stock + " +  Double.valueOf(fmMain.SetGuardar(txtCant.getText().trim())) + " \n" +
                                    "WHERE sku = '" + Sku + "' ");
                
                        Sql2.Commit();
                    }
                   
            //*****************************************************************************************************************************************//
                
                    String Qry5 = "SELECT * FROM producto_valores \n "+
                                  "WHERE sku= '" + Sku +"'";
                                      
                            
                    Rs5 = Sql5.Select(Qry5);
                            
                    if(Sql5.GetRowCount()==0){                   //Si no existe el registro
                
                        qryIns = "INSERT INTO producto_valores (sku) \n" +
                                 "VALUES ('" + Sku + "')"; 
                        Sql6.ExeSql(qryIns);
                        Sql6.Commit();
                 
                    }         
                    
                }    
                    
         //***************************************************************************************************************************************************//           
                    
                    
                    cantidad_grilla_ins=Double.valueOf(fmMain.SetGuardar(Grilla_prod.getValueAt(i, 4).toString().trim()));
                        
                }
                   
                else{
                    
                        System.out.println("Fila no grabada: " + i + " Ubic: " + txtUbicacion.getText().trim() + " SKU: " + Grilla_prod.getValueAt(i, 1).toString().trim());
                }    
            }

            Sql.Commit();
                          
            Carga_Prod_Ubicacion(LaUbicacion,1);
            fmMain.SetEstado(fmMain.pnPestanas.getSelectedIndex(), 0);
            setea_pivot_grabar();
                
            if (rbManual.isSelected()){
            
                txtSku.setText("");
                txtCant.setText("");
                txtCant.requestFocus();
            }else{
                txtSku.setText("");
                txtSku.requestFocus();
            }
                
                
        }catch (Exception e) {
         
            Sql.Rollback();
            Sql2.Rollback();
            Sql6.Rollback();
            System.out.println(e.getMessage());
            fmMain.Mensaje(e.getMessage());
        
        }finally{
         
            Sql.Close();
            Sql2.Close();
            Sql6.Close();
        }    
    }
    
    private void setea_pivot_grabar(){
        //---- Setea Pivot para grabar----------------------------
        // Queda seteado para grabar
//        if  (booAgregando == false)
//        {
//        for (int i=0; i<=Grilla_prod.getRowCount()-1; i++ ){
//                   Grilla_prod.setValueAt("0", i, 3);
//                   Grilla_prod.setValueAt("0", i, 4);
//                }
//        booAgregando = false;
//        Grilla_prod.changeSelection(0, 0 , false, false);
//        en_ingreso=0.0;
//        }
        booAgregando = false;
        Grilla_prod.changeSelection(0, 0 , false, false);
        en_ingreso=0.0;
    }
    
    
    private void limpiar_prod(){
       
        DefaultTableModel TableModel = (DefaultTableModel) Grilla_prod.getModel();    
        txNombre.setText("");
        txtUbicacion.setText("");
        txNombreUbica.setText("");
        txtUbicacion.requestFocus();
        booAgregando=false;
        
        if (rbManual.isSelected()){
            txtCant.setText("");
            txtSku.requestFocus();
        }else if (rbAutoma.isSelected()){
            txtCant.setText("1");
            txtSku.requestFocus();
        }
        
        lblReg.setText("Registros: 0");
        fmMain.LimpiaGrilla(TableModel);
    }
    
    private void limpiar_linea(){
       
        DefaultTableModel TableModel = (DefaultTableModel) Grilla_prod.getModel();    
        txNombre.setText("");
        txtSku.setText("");
        if (rbManual.isSelected()){
            txtCant.setText("");
            txtSku.requestFocus();
        
        }else if (rbAutoma.isSelected()){
            txtCant.setText("1");
            txtSku.requestFocus();
        }
        txtSku.requestFocus();
        booAgregando=false;
        fmMain.LimpiaGrilla(TableModel);
    }
    
    private void btAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAddActionPerformed
       
        double num =0;
        num = Double.parseDouble(txtCant.getText().trim()) +1;
        txtCant.setText(String.valueOf(num));
    }//GEN-LAST:event_btAddActionPerformed

    private void btMenosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btMenosActionPerformed
       
        double num =0;
        num = Double.parseDouble(txtCant.getText().trim()) -1;
        txtCant.setText(String.valueOf(num));
    }//GEN-LAST:event_btMenosActionPerformed

    private void btTecladoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btTecladoActionPerformed
        
        jdEntrada Ent = new jdEntrada(null, true);
        Ent.setLocationRelativeTo(null);
        Ent.setTitle("Ingreso de Cantidad");
        Ent.setVisible(true);
        Ent.setAlwaysOnTop(true);
        txtCant.setText(Ent.GetNumero());
    }//GEN-LAST:event_btTecladoActionPerformed

    private void txtCantKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCantKeyPressed
        
        ExeSql Sql = new ExeSql();
        ResultSet Rs, Rs1;
        String Query2,Query1 ;
        double cant_ub=0.0, cant_or=0.0;
        
         try{          
            if(evt.getKeyCode() == KeyEvent.VK_ENTER){
                    
                Toolkit.getDefaultToolkit().beep(); 
                if (Double.parseDouble(txtCant.getText().trim())>=1000){
                
                    if(fmMain.OkCancel("¬øEsta seguro de cantidad?") == JOptionPane.CANCEL_OPTION){
                      
                        return;  
                    }
                }  
                
                if (txtSku.getText().trim().equals("") && rbManual.isSelected()){
                 
                    txtSku.requestFocus();
                    return;
                }else if (txtCant.getText().trim().equals("")){
                 
                    Toolkit.getDefaultToolkit().beep(); 
                    fmMain.Mensaje("Falta ingresar Cantidad ");   
                    txtCant.requestFocus();
                    return;
                }else{
                 
                    agrega_linea();
                    grabar();
                    Carga_Prod_Ubicacion(txtUbicacion.getText().trim(), 1);
                    
                 
                }
                
              
                rbAutoma.setSelected(true);
                rbManual.setSelected(false); 
                rbManual.setEnabled(false);
                jPanel5.setVisible(false);
                txtCant.setText("1");      //Se establece cantidad por defecto
                txtCant.setEditable(false);  //Cantidad bloqueada por modo automatico
                txtSku.setText("");
                txtSku.requestFocus();
            
            
            }
      
         }catch (Exception e) {
            System.out.println(e.getMessage());
        } finally{
            Sql.Close();
        }        
    }//GEN-LAST:event_txtCantKeyPressed

    public void limpia_all(){
        
        limpiar_prod();
        txtUbicacion.setText("");
        txNombreUbica.setText("");
        txtSku.setText("");
      
    }
    
    private void btLimpiaTodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLimpiaTodoActionPerformed
       
        limpia_all();
        
    }//GEN-LAST:event_btLimpiaTodoActionPerformed

    private void txNombreUbicaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txNombreUbicaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txNombreUbicaActionPerformed

    private void txtUbicacionKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUbicacionKeyReleased
       
          txtUbicacion.setText( txtUbicacion.getText().toUpperCase());
    }//GEN-LAST:event_txtUbicacionKeyReleased

    private void txtCantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCantActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCantActionPerformed

    private void txtCantKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCantKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCantKeyReleased

    private void cbBodegaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbBodegaActionPerformed
        
        ExeSql Sql = new ExeSql();
        ResultSet Rs;

        if ((cbBodega.getSelectedIndex()>0) && (cbRack.getSelectedIndex()>0) && (cbBodega.getSelectedIndex()>0)){
            
            Combo_CodStr id = (Combo_CodStr) cbBodega.getSelectedItem();
            txtUbicacion.setText(id.getId());

            ComboCodigos id2 = (ComboCodigos) cbRack.getSelectedItem();
            txtUbicacion.setText(txtUbicacion.getText().trim()+ "." +  id2.getId());

            ComboCodigos id3 = (ComboCodigos) cbMetro.getSelectedItem();
            txtUbicacion.setText(txtUbicacion.getText().trim()+ "." +  id3.getId());
              bt_hasta.doClick();

        }else{

            txtUbicacion.setText("");
            txNombreUbica.setText("");
          
        }
        
        try{
           
            CargaRack();

        }catch(Exception e){
            
            Toolkit.getDefaultToolkit().beep(); 
            fmMain.Mensaje("Error: "+e);
             
        }finally{
            Sql.Close();
        }
    }//GEN-LAST:event_cbBodegaActionPerformed

    private void cbRackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbRackActionPerformed

        if (cbRack.getItemCount()==0)
        {
            return;
        }

        
        if ((cbBodega.getSelectedIndex()>0) && (cbRack.getSelectedIndex()>0) && (cbMetro.getSelectedIndex()>0)){
            Combo_CodStr id = (Combo_CodStr) cbBodega.getSelectedItem();
            txtUbicacion.setText(id.getId());

            ComboCodigos id2 = (ComboCodigos) cbRack.getSelectedItem();
            txtUbicacion.setText(txtUbicacion.getText().trim()+ "." +  id2.getId());

            ComboCodigos id3 = (ComboCodigos) cbMetro.getSelectedItem();
            txtUbicacion.setText(txtUbicacion.getText().trim()+ "." +  id3.getId());
            
            bt_hasta.doClick();
        }else{

            txtUbicacion.setText("");
            txNombreUbica.setText("");
         
        }
           
        CargaMetro();

    }//GEN-LAST:event_cbRackActionPerformed

    private void cbMetroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbMetroActionPerformed
        
        if ((cbBodega.getSelectedIndex()>0) && (cbRack.getSelectedIndex()>0) && (cbMetro.getSelectedIndex()>0)){

            Combo_CodStr id = (Combo_CodStr) cbBodega.getSelectedItem();
            txtUbicacion.setText(id.getId());

            ComboCodigos id2 = (ComboCodigos) cbRack.getSelectedItem();
            txtUbicacion.setText(txtUbicacion.getText().trim()+ "." +  id2.getId());

            ComboCodigos id3 = (ComboCodigos) cbMetro.getSelectedItem();
            txtUbicacion.setText(txtUbicacion.getText().trim()+ "." +  id3.getId());
            bt_hasta.doClick();
        }else{
         
            txtUbicacion.setText("");
            txNombreUbica.setText("");
            
        }

    }//GEN-LAST:event_cbMetroActionPerformed

    private void bt_hastaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_hastaActionPerformed
        
        ExeSql Sql = new ExeSql();
        ResultSet Rs, Rs1;
        String Query2 ;
        String strUbicacion = "";

        try{
            strUbicacion = txtUbicacion.getText().trim();
            String ubicaArray[] = strUbicacion.split("\\.");
           
            Query2 = "SELECT nombre AS ubc FROM mt_codmetro WHERE codmetro = '"+strUbicacion+"'";   
            
            Rs1 = Sql.Select(Query2);
            
            if (Rs1.next()){
                strUbicacion =Rs1.getString("ubc").trim();
                txNombreUbica.setText(strUbicacion);
                Carga_Prod_Ubicacion(txtUbicacion.getText().trim(),1);
            }else{
                
                Toolkit.getDefaultToolkit().beep(); 
                fmMain.Mensaje("Ubicacion no encontrada, favor revise la ubicaci√≥n");
                limpia_all();
                
            }
        }catch (Exception e) {
            System.out.println(e.getMessage());
        } finally{
            Sql.Close();
        }
    }//GEN-LAST:event_bt_hastaActionPerformed

    private void txtUbicacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUbicacionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUbicacionActionPerformed

    private void txtSkuKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSkuKeyReleased
        txtSku.setText( txtSku.getText().toUpperCase());
    }//GEN-LAST:event_txtSkuKeyReleased

    private void Grilla_prodMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Grilla_prodMouseClicked
        //        if(evt.getClickCount()==1 ){
            //
            //
            //           /* jdPagadoPrvCli Pagado = new jdPagadoPrvCli(null, true);
            //            Pagado.setLocationRelativeTo(null);
            //            Pagado.setTitle("Pagos Realizados");
            //            Pagado.CargaPagosPrv(Grilla.getValueAt(Grilla.getSelectedRow(), 12).toString().trim());
            //            Pagado.setVisible(true);*/
            //        }
    }//GEN-LAST:event_Grilla_prodMouseClicked

    private void btEliminar_lineaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEliminar_lineaActionPerformed
        
        ExeSql Sql = new ExeSql();
        ExeSql Sql2 = new ExeSql();
        
        ResultSet Rs, Rs1;
        String Query2, SKU, qryDel, STNombreP ;
        String strUbicacion = txtUbicacion.getText().trim();
        
        try{
            if (strUbicacion.trim().equals("")){
                
                Toolkit.getDefaultToolkit().beep(); 
                fmMain.Mensaje("Debe ingresar ubicacion para poder eliminar un SKU.");
                txtUbicacion.requestFocus();
                return;
            }
            
            if(Grilla_prod.getSelectedRow()==-1){
                fmMain.Mensaje("Debe seleccionar un SKU a eliminar en la Grilla");
                return;
            }
            
            STNombreP=Grilla_prod.getValueAt(Grilla_prod.getSelectedRow(), 1).toString().trim();
            Toolkit.getDefaultToolkit().beep(); 
            
            if(fmMain.OkCancel("¬øEsta seguro de Eliminar el producto " + STNombreP  ) == JOptionPane.CANCEL_OPTION){
                txtSku.requestFocus();
                return;
            }
            
            SKU=Grilla_prod.getValueAt(Grilla_prod.getSelectedRow(), 0).toString().trim();
           
            Query2= "SELECT * FROM mt_productos WHERE ubicacion ='" + strUbicacion + "' AND sku = '" + SKU + "'";
            Rs1 = Sql.Select(Query2);
            
            if (Rs1.next()){          // Elimina el registro Seleccionado
            
                qryDel = "DELETE FROM mt_productos WHERE ubicacion ='" + strUbicacion + "' AND sku = '" + SKU + "'";
                Sql.ExeSql(qryDel);
                Sql.Commit();
                
                
                Sql2.ExeSql("UPDATE inventario SET \n"+
                            "stock = stock - " + Double.valueOf(fmMain.SetGuardar(Grilla_prod.getValueAt(Grilla_prod.getSelectedRow(), 2).toString().trim())) + " \n" +
                            "WHERE sku = '" + SKU + "' ");
                
                Sql2.Commit();
                
                limpiar_linea();
                Carga_Prod_Ubicacion(strUbicacion,1);
            }else{
                
                Toolkit.getDefaultToolkit().beep(); 
                fmMain.Mensaje("Producto no Existe" );
            }
        
        }catch (Exception e) {
            System.out.println(e.getMessage());
            Sql.Rollback();
            Sql2.Rollback();
        }finally{
            Sql.Close();
            Sql2.Close();
        }

    }//GEN-LAST:event_btEliminar_lineaActionPerformed

    private void btEliminarTodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEliminarTodoActionPerformed

        ExeSql Sql = new ExeSql();
        ResultSet Rs, Rs1;
        String Query2, SKU, qryDel,STNombreP ;
        String strUbicacion = txtUbicacion.getText().trim();

        try{
            if (strUbicacion.trim().equals("")){
                
                fmMain.Mensaje("Debe ingresar ubicacion para poder Eliminar!");
                txtUbicacion.requestFocus();
                return;
            }
            
            Toolkit.getDefaultToolkit().beep(); 
            
            if(fmMain.OkCancel("¬øEsta seguro de Eliminar todos los productos??"  ) == JOptionPane.CANCEL_OPTION){
                
                txtSku.requestFocus();
                return;
            }
            
            Query2= "SELECT * FROM mt_productos WHERE ubicacion ='" + strUbicacion + "';";
            Rs1 = Sql.Select(Query2);
            
            if (Rs1.next()){  // Elimina el registro Seleccionado
                   
                    qryDel = "DELETE FROM mt_productos WHERE ubicacion ='" + strUbicacion + "';";
                    Sql.ExeSql(qryDel);
                   
                    limpiar_prod();
                    limpiar_linea();
                    Carga_Prod_Ubicacion(strUbicacion,1);
            }else{
                Toolkit.getDefaultToolkit().beep(); 
                fmMain.Mensaje("Producto no Existe" );
            }
        }
        catch (Exception e) {
            System.out.println(e.getMessage());
        }finally{
            Sql.Close();
        }

    }//GEN-LAST:event_btEliminarTodoActionPerformed

    private void rbAutomaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbAutomaActionPerformed
       
        txtCant.setText("1");
        txtCant.setEditable(false);
        txtSku.requestFocus();
    }//GEN-LAST:event_rbAutomaActionPerformed

    private void rbManualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbManualActionPerformed
        
        txtCant.setText("");
        txtCant.setEditable(true);
        txtSku.requestFocus();
    }//GEN-LAST:event_rbManualActionPerformed

    
    private void busca_codigo_desc(String Codigo){
        
        jdBuscarProductos BP = new jdBuscarProductos(null, true);
        BP.setLocationRelativeTo(null);
        BP.setTitle("Buscar Producto");
        BP.SetTexto(Codigo);
        BP.buscar_prod(false);
        BP.setVisible(true);
        
        if(!"".equals(BP.GetCodigo()))
           CargaProducto(BP.GetCodigo());
            
    }
    
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        busca_codigo_desc(txtSku.getText().trim());
      
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btUbicacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btUbicacionActionPerformed
       
        String StUbicacion ="" , StNomUbica="";
        jdBuscaUbicacion Ubicacion= new jdBuscaUbicacion(null, true);
        Ubicacion.CargaBodegaOR(1);
        Ubicacion.setVisible(true);
           
        StUbicacion=Ubicacion.GetUbicacion();   
        StNomUbica=Ubicacion.GetNombreUbicacion();
            
        if (Ubicacion.GetUbicacion().equals("")){
            fmMain.Mensaje("Ubicacion no ingresada, favor ingresar a la brevedad");
            btUbicacion.requestFocus();
            return;
        }
            
        txtUbicacion.setText(StUbicacion);
        txNombreUbica.setText(StNomUbica);
        Carga_Prod_Ubicacion(StUbicacion,1);
        txtSku.requestFocus();
    }//GEN-LAST:event_btUbicacionActionPerformed

    private void btCodEspActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCodEspActionPerformed
        
        jdBuscarProductosEsp BP = new jdBuscarProductosEsp(null, true);
        BP.setLocationRelativeTo(null);
        BP.setTitle("Buscar Producto Especial");
        BP.buscar_prod();
        BP.setVisible(true);
        
        if (fmMain.cierra){             //sentecia si se cerr√≥ dialogo jdBuscarProductoEspecial
           txtSku.requestFocus();       //se coloca cursor en campo txtSku
           fmMain.cierra = false;
        }
        if (fmMain.elimina){
            btMenos.setEnabled(false);
            btAdd.setEnabled(false);
            btTeclado.setEnabled(false);
            rbManual.setEnabled(false);
            rbManual.setSelected(false);
            txtCant.setEnabled(false);
            txtCant.setText("1");
            rbAutoma.setSelected(true);
        }
            
    }//GEN-LAST:event_btCodEspActionPerformed

    private void Carga_Prod_Ubicacion(String ubicacion, int  llamado){
        
        ExeSql Sql = new ExeSql();
      //ExeSql Sql2 = new ExeSql();
        ExeSql Sql3 = new ExeSql();
        
        ExeSqlLuvaly luv = new ExeSqlLuvaly();
        ExeSqlLuvaly Sql2Luv = new ExeSqlLuvaly();
   
        ResultSet producto = null;
        ResultSet Rs,Rs2,Rs3;
        
        DefaultTableModel dfTm = (DefaultTableModel) Grilla_prod.getModel();
        double peso=0;
        fmMain.LimpiaGrilla(dfTm);
        String Ubica="";
        String SkuAnt = "";
        int i =0;
        
        LaUbicacion = ubicacion;
        try {
           
            Rs = Sql.Select("SELECT  mp.sku Sku, mp.cant, CASE WHEN mp.fecha_mod IS null THEN mp.fecha ELSE mp.fecha_mod END AS fechita \n" +
                            "FROM mt_productos mp \n" +
                            "WHERE ubicacion = '" + ubicacion  + "' ORDER BY fechita DESC" );
           if (llamado ==0){
               //Ubica =txNombreUbicaOrig.getText().trim();
           }else{
               Ubica =txNombreUbica.getText().trim();
           }                     
           
           if(Sql.GetRowCount()==0){  
           
              Toolkit.getDefaultToolkit().beep();  
              fmMain.Mensaje("No existen Productos asociados a esta ubicacion :" + Ubica);
              bt_hasta.requestFocus();
              txtSku.requestFocus();
              return;
           }      

           while(Rs.next()){
                
               String sku = Rs.getString("Sku");
               
               String qry = "SELECT p.sku AS Sku1,cc.sku AS cchile, tr.sku AS skut,tr.skurel\n" +
                            "FROM producto p \n" +
                            "LEFT JOIN codchile cc ON p.sku = cc.sku\n" +
                            "LEFT JOIN transformacion tr ON p.sku = tr.skurel \n" +
                            "WHERE p.sku = '"+sku+"' AND p.sku IS NOT null \n" +
                            "ORDER BY p.sku\n";
               
                            
               producto =  luv.Select("select p.nombre Nombre,trim(u.unidad) as unidad, u.um from producto p \n"
                                    + "LEFT JOIN par_unidad u ON u.codigo=p.unidad\n "
                                    + "where p.sku = '"+Rs.getString("sku").trim()+"'");
               producto.next();
               
               Rs2 = Sql2Luv.Select(qry);
               
                if (Sql2Luv.GetRowCount() > 0){
                   
                   Rs2.next();
                   
                   if(Rs2.getString("cchile") != null){ 
                       
                        if (!Rs2.getString("Sku1").equals(SkuAnt)){        //Que no se repita el SKU
                           
                           SkuAnt = Rs2.getString("Sku1").trim();
                   
                            dfTm.addRow(new Object[]{Rs.getString("Sku"),producto.getString("Nombre"),Rs.getDouble("cant"),"NO","0",producto.getString("unidad"),Rs.getString("fechita"),true});
                            i++;
                  
                        }
                    
                    }else if(Rs2.getString("cchile") == null){
                
                            if(Rs2.getString("skurel") != null){
                     
                                String skut = Rs2.getString("skut");
                                
                                String Query3 = "SELECT sku FROM codchile WHERE sku ='"+skut+"'";
                                Rs3 = Sql3.Select(Query3);
                                
                                if (Sql3.GetRowCount() > 0){
                                
                                   dfTm.addRow(new Object[]{Rs.getString("Sku"),producto.getString("Nombre"),Rs.getDouble("cant"),"NO","0",producto.getString("unidad"),Rs.getString("fechita"),true});
                                     i++;
                                
                                }else if (Sql3.GetRowCount() == 0){
                                                                    
                                   dfTm.addRow(new Object[]{Rs.getString("Sku"),producto.getString("Nombre"),Rs.getDouble("cant"),"NO","0",producto.getString("unidad"),Rs.getString("fechita"),false});
                                     i++;
                                
                                }
                                  
                            }else {
                            
                                  dfTm.addRow(new Object[]{Rs.getString("Sku"),producto.getString("Nombre"),Rs.getDouble("cant"),"NO","0",producto.getString("unidad"),Rs.getString("fechita"),false});
                                  i++;
                            
                            
                            }   
                
                
                    }
                   
                   
               }
              
               
//                dfTm.addRow(new Object[]{Rs.getString("Sku"),Rs.getString("Nombre"),Rs.getDouble("cant"),"NO","0",Rs.getString("unidad"),Rs.getString("fechita"),true});
//                
//                i++;
//              
           }  //en while
           Grilla_prod.setDefaultRenderer(Object.class, new Elrender());           
           Grilla_prod.changeSelection(0, 0 , false, false);
           txtSku.requestFocus();
        //   txtSku.setText("");
           lblReg.setText("Registros: " + String.valueOf(i));
        }
        catch (Exception e) {
            System.out.println(e.getMessage());
        } finally{
            Sql.Close();
            luv.Close();
        }    
        
    }

    
 public  boolean  es_numero(String cadenaUno){

    if (cadenaUno.matches("[0-9]*"))
        return true;
    else
        return false;
    
 }   
    
    private void carga_producto(){
        
        String codbarfinal = txtSku.getText().replace("'", "-");
        txtSku.setText(codbarfinal.trim());
        
        if(!txtSku.getText().isEmpty()){
            
           CargaProducto(txtSku.getText());
        }     
    }

    public void CargaProducto(String Codigo) {
        ExeSqlLuvaly luv = new ExeSqlLuvaly();
       // ExeSqlLuvaly Luv2 = new ExeSqlLuvaly();
        ResultSet producto = null;
        ExeSql Sql = new ExeSql();
        ResultSet Rs = null;
        double Margen;
        int revisa_codbar =0;
        int revisa_codchile =0;
        String codigo="";
        int pos = -1;
   
        try {
            String Query;
            //Limpia la Lista

            Rs = luv.Select("SELECT codbar, sku FROM codbar WHERE sku='" + Codigo + "' OR codbar='"+ Codigo + "'" );        
            if (Rs.next()){
                    
                Codigo = Rs.getString("sku").trim();
                revisa_codbar++;
            }
            
            Rs = luv.Select("SELECT idch, sku FROM codchile WHERE sku='" + Codigo +"' OR idch='"+ Codigo + "'" );
            if (Rs.next()){
                    
                Codigo = Rs.getString("sku").trim();
                revisa_codchile++;
            }
            
            Rs = luv.Select("SELECT codbar, sku FROM codbar WHERE sku='" + Codigo + "' OR codbar='"+ Codigo + "'" );        
            if (Rs.next()){
                     
                Codigo = Rs.getString("sku").trim();
                revisa_codbar++;
            }
                        
            Query ="SELECT p.sku,p.nombre,p.estado_codigo,u.unidad,p.convenio \n"+ 
                   "FROM producto p \n"+
                   "LEFT JOIN inventario i \n"+
                   "ON p.sku = i.Sku \n"+
                   "LEFT JOIN par_unidad u ON  u.codigo = p.unidad \n"+
                   "WHERE p.sku='" + Codigo + "' OR p.sku IN (SELECT sku FROM codbar WHERE codbar='" + Codigo + "')";
            
            Rs = luv.Select(Query);
            
                                   
            if(luv.GetRowCount()==0){  //Si no existe el producto 
                
                Toolkit.getDefaultToolkit().beep(); 
                fmMain.Mensaje("SKU: " + txtSku.getText().trim() + " no esta en Nuestra Bases de Datos. Comuniquese con Inform√°tica");
                txtSku.setText("");
                txtSku.requestFocus();
                return;
            }      
     
            Rs.next();
            producto =  luv.Select("select p.nombre,trim(u.unidad) as unidad, u.um from producto p \n"
                                 + "LEFT JOIN par_unidad u ON u.codigo=p.unidad\n "
                                 + "where p.sku = '"+Rs.getString("sku").trim()+"'");
            producto.next();
            Codigo = Rs.getString("sku").trim();
            String Nombre = producto.getString("nombre");
            StrUnidad= producto.getString("unidad").trim();
            Boolean estado = Rs.getBoolean("estado_codigo");
            
            convenio = Rs.getInt("convenio");
            
            if (Nombre.length() > 20) {
                Nombre.substring(0, 20);
            }
            txtSku.setText(Rs.getString("sku"));
            txNombre.setText(producto.getString("nombre") + " - "  + StrUnidad);
            
            
            if ((txtCant.getText().trim().equals("")) || (txtCant.getText().trim().equals("0")) && (rbManual.isSelected()) ){
                  txtCant.requestFocus();
                  return;
            }
            
            if (txtUbicacion.getText().trim().equals("")){
                
                Toolkit.getDefaultToolkit().beep(); 
                fmMain.Mensaje("Para grabar un producto debe ingresar la ubicacion");
                txtSku.setText("");
                txtSku.requestFocus();
                return;
            }
            
           
            String sid1,sid2, sid3 = "";
            
            
            if (convenio == 4){
            
               jdProductosVenc IngFecha = new jdProductosVenc(null, true);
               IngFecha.setLocationRelativeTo(null);
               IngFecha.setVisible(true);
               IngFecha.setAlwaysOnTop(true);  
               
               esFec = IngFecha.GetesFecha();
               System.out.println("EL esFec ES : "+esFec);
               
               if (esFec == 1){
           
                    txFecha.setText(IngFecha.GetFecha());
               
                    String sfecha = txFecha.getText().toString().replaceAll("-", "");
                         
                    sid1 = sfecha.substring(6);  //a√±o
                    sid2 = sfecha.substring(2,4);  //mes               
                    sid3 = sfecha.substring(0,2);  //dia
                        
                    IdVenc = sid1+sid2+sid3;     //Se crea c√≥digo a partir de la fecha 
                    
                    System.out.println("EL IdVenc ES : "+IdVenc);
               
               }else if (esFec == 0){
                   
                   IdVenc = String.valueOf(IngFecha.GetCodigo());
                   txFecha.setText(IngFecha.GetFecha());
               
               }else{
               
                    IdVenc = "0";  
            
              }
            }   
               
            // Aqui va el codigo si agrega el producto a la Grilla
            //-------------------------------------------------------------------------------------------------
                // Busca si el codigo se ha ingresado anteriormente en la grilla
            for (int i=0; i<=Grilla_prod.getRowCount()-1; i++ ){
                
                codigo= Grilla_prod.getValueAt(i, 0).toString().trim();
                
                if (codigo.equals(txtSku.getText().trim())){
                
                    pos = i;
                    break;
                }
            }
           
          
            if (!estado){               //Si no es codigo especial
            
                agrega_linea(); 
                grabar();
                
                Carga_Prod_Ubicacion(txtUbicacion.getText().trim(), 1);
                //btMenos.setEnabled(false);
                //btAdd.setEnabled(false);
                btTeclado.setEnabled(false);
                rbManual.setEnabled(false);
                rbManual.setSelected(false);
                txtCant.setEnabled(false);
                txtSku.setText("");
                txtSku.requestFocus();
            
            }else if(estado){      //Si es un codigo especial
             
                btTeclado.setEnabled(false);
                rbManual.setEnabled(true);
                rbManual.setSelected(true);
                rbAutoma.setSelected(false);
                Carga_Prod_Ubicacion(txtUbicacion.getText().trim(), 1);
                txtCant.setEnabled(true);
                txtCant.setEditable(true);
                txtCant.requestFocus();
                
                
                
            }
            
        } catch (SQLException ex) {
            System.out.println(ex);
        } finally {
            Sql.Close();
            luv.Close();
        }
    }
    
    
    class Elrender extends DefaultTableCellRenderer {
         
        @Override
        public Component getTableCellRendererComponent(JTable tabla, Object valor, boolean isSelected, boolean hasFocus, int fila, int columna) {
        super.getTableCellRendererComponent(tabla,valor,isSelected, hasFocus, fila, columna);
         
            if( (Boolean)tabla.getValueAt(fila,7) == true)
            {
                
                if(isSelected==true){
                    this.setBackground(DARK_GREEN);
                    this.setForeground(Color.white);    
                }else{
                
                    this.setForeground(DARK_GREEN);
                    this.setBackground(Color.white);
                
                }
                
            }else if((Boolean)tabla.getValueAt(fila,7) == false){
             
                if(isSelected==true){
                
                    this.setBackground(Color.red);
                    this.setForeground(Color.white);    
                
                }else{
                
                    this.setForeground(Color.red);
                    this.setBackground(Color.white);
                
                }
            
            
            }else {
             
                this.setBackground(Color.white);
                this.setForeground(Color.black);  
            } 
            return this;
        }
    } 
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Grilla_prod;
    private javax.swing.JButton btAdd;
    private javax.swing.JButton btCodEsp;
    private javax.swing.JButton btEliminarTodo;
    private javax.swing.JButton btEliminar_linea;
    private javax.swing.JButton btLimpiaTodo;
    private javax.swing.JButton btMenos;
    private javax.swing.JButton btTeclado;
    private javax.swing.JButton btUbicacion;
    private javax.swing.JButton bt_hasta;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> cbBodega;
    private javax.swing.JComboBox<String> cbMetro;
    private javax.swing.JComboBox<String> cbRack;
    private javax.swing.JCheckBox chkAgrega;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanelHasta;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblReg;
    private javax.swing.JRadioButton rbAutoma;
    private javax.swing.JRadioButton rbManual;
    private javax.swing.JTextField txFecha;
    private javax.swing.JTextField txNombre;
    private javax.swing.JTextField txNombreUbica;
    private javax.swing.JTextField txtCant;
    private javax.swing.JTextField txtSku;
    private javax.swing.JTextField txtUbicacion;
    // End of variables declaration//GEN-END:variables
    
}
