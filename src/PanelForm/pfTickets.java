/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package PanelForm;

import Conexion.ExeSql;
import Dialogos.jdTicketsMensajes;
import Formularios.fmMain;
import Utilidades.Ftp;
import java.awt.Desktop;
import java.io.File;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import org.apache.batik.gvt.renderer.ImageRenderer;

/**
 *
 * @author infornatica
 */
public class pfTickets extends javax.swing.JPanel {

    /**
     * Creates new form pfTickets
     */
    public pfTickets() {
        initComponents();
        GetUser();
        GetArea();
        GetCantidad();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        label_usuario = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        label_area = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla_principal = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        area_combo = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        txSku1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabla_cantidad = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel5.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel5.setText("Usuario:");

        label_usuario.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        label_usuario.setText("Usuario");

        jLabel6.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel6.setText("Área:");

        label_area.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        label_area.setText("Área");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label_usuario)
                    .addComponent(label_area))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_usuario)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_area)
                    .addComponent(jLabel6))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        tabla_principal.setAutoCreateRowSorter(true);
        tabla_principal.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tabla_principal.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Area", "ID", "Remitente", "Destinatario", "Fecha Creación", "Estado", "Cantidad Mensajes", "Archivo", "Asunto", "Prioridad"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabla_principal.setSelectionForeground(new java.awt.Color(204, 255, 255));
        tabla_principal.getTableHeader().setReorderingAllowed(false);
        tabla_principal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabla_principalMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabla_principal);
        if (tabla_principal.getColumnModel().getColumnCount() > 0) {
            tabla_principal.getColumnModel().getColumn(1).setMinWidth(30);
            tabla_principal.getColumnModel().getColumn(1).setPreferredWidth(50);
            tabla_principal.getColumnModel().getColumn(1).setMaxWidth(80);
            tabla_principal.getColumnModel().getColumn(6).setMinWidth(50);
            tabla_principal.getColumnModel().getColumn(6).setPreferredWidth(50);
            tabla_principal.getColumnModel().getColumn(6).setMaxWidth(50);
            tabla_principal.getColumnModel().getColumn(7).setMinWidth(30);
            tabla_principal.getColumnModel().getColumn(7).setPreferredWidth(50);
            tabla_principal.getColumnModel().getColumn(7).setMaxWidth(70);
        }

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 996, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        area_combo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                area_comboActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel7.setText("Área:");

        txSku1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txSku1ActionPerformed(evt);
            }
        });
        txSku1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txSku1KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txSku1KeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txSku1KeyTyped(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel1.setText("Filtrar:");

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos16/Actualiza.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jLabel1)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txSku1)
                    .addComponent(area_combo, 0, 202, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(area_combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txSku1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabla_cantidad.setAutoCreateRowSorter(true);
        tabla_cantidad.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Area", "Cantidad"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tabla_cantidad);
        if (tabla_cantidad.getColumnModel().getColumnCount() > 0) {
            tabla_cantidad.getColumnModel().getColumn(1).setMinWidth(30);
            tabla_cantidad.getColumnModel().getColumn(1).setPreferredWidth(50);
            tabla_cantidad.getColumnModel().getColumn(1).setMaxWidth(80);
        }

        jPanel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos16/Cancel16.png"))); // NOI18N
        jButton3.setText("Cerrar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos16/trush16.png"))); // NOI18N
        jButton2.setText("Eliminar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos16/search16.png"))); // NOI18N
        jButton4.setText("Archivo");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos16/ok_16.png"))); // NOI18N
        jButton5.setText("Finalizar");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel2.setText("Ver archivo adjunto:");

        jLabel3.setText("Acciones:");

        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos16/Pencil16.png"))); // NOI18N
        jButton6.setText("Re-abrir");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(jButton6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(146, 146, 146)
                        .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jButton5)
                    .addComponent(jButton6)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addGap(55, 55, 55)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jLabel2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "TODOS", "ABIERTO", "FINALIZADO", "CERRADO" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel4.setText("Estado ticket:");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "TODOS", "BAJA", "MEDIA", "ALTA", "URGENTE" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jLabel8.setText("Prioridad:");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addContainerGap(38, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        GetUser();
        GetArea();
        GetCantidad();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void area_comboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_area_comboActionPerformed
        TableRowSorter<TableModel>sorter = new TableRowSorter<TableModel>(tabla_principal.getModel());
        tabla_principal.setRowSorter(sorter);
        String sku = area_combo.getSelectedItem().toString().trim();
        if (sku.length()==0)
        {
            sorter.setRowFilter(null);
        }
        else{
            int cant=0;
            int ev=0;
            String precio = "";
            if(sku.equals("TODOS")){
                sorter.setRowFilter(RowFilter.regexFilter(""));
            }
            else {
                sorter.setRowFilter(RowFilter.regexFilter(sku));
            }
        }    
    }//GEN-LAST:event_area_comboActionPerformed

    private void txSku1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txSku1KeyPressed

    }//GEN-LAST:event_txSku1KeyPressed

    private void txSku1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txSku1KeyReleased
        TableRowSorter<TableModel>sorter = new TableRowSorter<TableModel>(tabla_principal.getModel());
        tabla_principal.setRowSorter(sorter);
        String sku = txSku1.getText().trim();
        if (sku.length()==0)
        {
            sorter.setRowFilter(null);
        }
        else{
            int cant=0;
            int ev=0;
            String precio = "";
            sorter.setRowFilter(RowFilter.regexFilter(sku));
        }
    }//GEN-LAST:event_txSku1KeyReleased

    private void txSku1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txSku1KeyTyped
        if (Character.isLowerCase(evt.getKeyChar()))
        evt.setKeyChar(Character.toUpperCase(evt.getKeyChar()));
    }//GEN-LAST:event_txSku1KeyTyped

    private void txSku1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txSku1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txSku1ActionPerformed

    public void BorrarSeleccionados() {
        ExeSql sql = new ExeSql();
        String values = "";
        if(tabla_principal.getSelectedRowCount()>1){
            int cantidad = tabla_principal.getSelectedRowCount();
            int[] indices = tabla_principal.getSelectedRows();
            String str = "";
            for(int i = 0; i < indices.length;i++){
                
                str = str + tabla_principal.getValueAt(indices[i], 1).toString().trim()+ ",";
            }
            values = str.substring(0, str.length()-1);
            System.out.println(values);
        }
        else {
            System.out.println(tabla_principal.getValueAt(tabla_principal.getSelectedRow(), 1).toString().trim());
            values = tabla_principal.getValueAt(tabla_principal.getSelectedRow(), 1).toString().trim();
        }
        String query = "delete from tickets_luvaly where id in ("+values+")";
        try {
            if(JOptionPane.showConfirmDialog(null, "Desea borrar seleccionados?")==0){
                int resultado = sql.ExeSqlInt(query);
                if(resultado > 0){
                    JOptionPane.showMessageDialog(null, "Se han borrado "+resultado+" tickets.");
                    sql.Commit();
                }
            }
            else {
                JOptionPane.showMessageDialog(null, "Operación cancelada.");
                sql.Rollback();
            }   
            GetUser();
        } catch (SQLException ex) {
            Logger.getLogger(pfTickets.class.getName()).log(Level.SEVERE, null, ex);
            sql.Rollback();
        }
        finally {
            sql.Close();
        }     
       
    }
    public void CerrarSeleccionados() {
        ExeSql sql = new ExeSql();
        String values = "";
        if(tabla_principal.getSelectedRowCount()>1){
            int cantidad = tabla_principal.getSelectedRowCount();
            int[] indices = tabla_principal.getSelectedRows();
            String str = "";
            for(int i = 0; i < indices.length;i++){
                
                str = str + tabla_principal.getValueAt(indices[i], 1).toString().trim()+ ",";
            }
            values = str.substring(0, str.length()-1);
            System.out.println(values);
        }
        else {
            System.out.println(tabla_principal.getValueAt(tabla_principal.getSelectedRow(), 1).toString().trim());
            values = tabla_principal.getValueAt(tabla_principal.getSelectedRow(), 1).toString().trim();
        }
        String query = "update tickets_luvaly set estado = 3 where id in ("+values+")";
        try {
            if(JOptionPane.showConfirmDialog(null, "Desea cerrar seleccionados?")==0){
                int resultado = sql.ExeSqlInt(query);
                if(resultado > 0){
                    JOptionPane.showMessageDialog(null, "Se han cerrado "+resultado+" tickets.");
                    sql.Commit();
                }
            }
            else {
                JOptionPane.showMessageDialog(null, "Operación cancelada.");
                sql.Rollback();
            }   
            GetUser();
        } catch (SQLException ex) {
            Logger.getLogger(pfTickets.class.getName()).log(Level.SEVERE, null, ex);
            sql.Rollback();
        }
        finally {
            sql.Close();
        }     
       
    }
    
    public void FinalizarSeleccionados() {
        ExeSql sql = new ExeSql();
        String values = "";
        if(tabla_principal.getSelectedRowCount()>1){
            int cantidad = tabla_principal.getSelectedRowCount();
            int[] indices = tabla_principal.getSelectedRows();
            String str = "";
            for(int i = 0; i < indices.length;i++){
                
                str = str + tabla_principal.getValueAt(indices[i], 1).toString().trim()+ ",";
            }
            values = str.substring(0, str.length()-1);
            System.out.println(values);
        }
        else {
            System.out.println(tabla_principal.getValueAt(tabla_principal.getSelectedRow(), 1).toString().trim());
            values = tabla_principal.getValueAt(tabla_principal.getSelectedRow(), 1).toString().trim();
        }
        String query = "update tickets_luvaly set estado = 2 where id in ("+values+")";
        try {
            if(JOptionPane.showConfirmDialog(null, "Desea finalizar seleccionados?")==0){
                int resultado = sql.ExeSqlInt(query);
                if(resultado > 0){
                    JOptionPane.showMessageDialog(null, "Se han finalizado "+resultado+" tickets.");
                    sql.Commit();
                }
            }
            else {
                JOptionPane.showMessageDialog(null, "Operación cancelada.");
                sql.Rollback();
            }   
            GetUser();
        } catch (SQLException ex) {
            Logger.getLogger(pfTickets.class.getName()).log(Level.SEVERE, null, ex);
            sql.Rollback();
        }
        finally {
            sql.Close();
        }     
       
    }
    public void AbrirSeleccionados() {
        ExeSql sql = new ExeSql();
        String values = "";
        if(tabla_principal.getSelectedRowCount()>1){
            int cantidad = tabla_principal.getSelectedRowCount();
            int[] indices = tabla_principal.getSelectedRows();
            String str = "";
            for(int i = 0; i < indices.length;i++){
                
                str = str + tabla_principal.getValueAt(indices[i], 1).toString().trim()+ ",";
            }
            values = str.substring(0, str.length()-1);
            System.out.println(values);
        }
        else {
            System.out.println(tabla_principal.getValueAt(tabla_principal.getSelectedRow(), 1).toString().trim());
            values = tabla_principal.getValueAt(tabla_principal.getSelectedRow(), 1).toString().trim();
        }
        String query = "update tickets_luvaly set estado = 0 where id in ("+values+")";
        try {
            if(JOptionPane.showConfirmDialog(null, "Desea abrir nuevamente los tickets seleccionados seleccionados?")==0){
                int resultado = sql.ExeSqlInt(query);
                if(resultado > 0){
                    JOptionPane.showMessageDialog(null, "Se han abierto "+resultado+" tickets.");
                    sql.Commit();
                }
            }
            else {
                JOptionPane.showMessageDialog(null, "Operación cancelada.");
                sql.Rollback();
            }   
            GetUser();
        } catch (SQLException ex) {
            Logger.getLogger(pfTickets.class.getName()).log(Level.SEVERE, null, ex);
            sql.Rollback();
        }
        finally {
            sql.Close();
        }     
       
    }
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if(tabla_principal.getSelectedRowCount()>0){
            BorrarSeleccionados();
        }
        else {
            JOptionPane.showMessageDialog(null, "Debe seleccionar ticket/tickets.");
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void tabla_principalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabla_principalMouseClicked
        if(evt.getClickCount()==2){
            String id = tabla_principal.getValueAt(tabla_principal.getSelectedRow(), 1).toString();
            jdTicketsMensajes BP = new jdTicketsMensajes(null, true);
            BP.CargaMensajes(id);
            BP.setLocationRelativeTo(null);
            BP.setTitle("Mensajes");
            BP.setVisible(true);
        }
    }//GEN-LAST:event_tabla_principalMouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if(tabla_principal.getSelectedRowCount()>0){
            CerrarSeleccionados();
        }
        else {
            JOptionPane.showMessageDialog(null, "Debe seleccionar ticket/tickets.");
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
            ExeSql sql = new ExeSql();
            ResultSet rs = null;
            String id = tabla_principal.getValueAt(tabla_principal.getSelectedRow(),1).toString();
        try {
            rs=sql.Select("select adjunto from tickets_luvaly where id = "+id+"");
            rs.next();
            if(!rs.getString("adjunto").equals("0")){
                CargaPdf(id, rs.getString("adjunto"));
            }
            else {
                JOptionPane.showMessageDialog(null, "No posee archivo adjunto");
            }
        } catch (SQLException ex) {
            Logger.getLogger(pfTicketsLuvaly.class.getName()).log(Level.SEVERE, null, ex);
        }
            
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        if(tabla_principal.getSelectedRowCount()>0){
            FinalizarSeleccionados();
        }
        else {
            JOptionPane.showMessageDialog(null, "Debe seleccionar ticket/tickets.");
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        if(tabla_principal.getSelectedRowCount()>0){
            AbrirSeleccionados();
        }
        else {
            JOptionPane.showMessageDialog(null, "Debe seleccionar ticket/tickets.");
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        TableRowSorter<TableModel>sorter = new TableRowSorter<TableModel>(tabla_principal.getModel());
        tabla_principal.setRowSorter(sorter);
        String sku = "";
        if(jComboBox1.getSelectedItem()!="TODOS") {
            sku = jComboBox1.getSelectedItem().toString().trim();
        }
        else {
            sku = "";
        }
        if (sku.length()==0)
        {
            sorter.setRowFilter(null);
        }
        else{
            int cant=0;
            int ev=0;
            String precio = "";
            sorter.setRowFilter(RowFilter.regexFilter(sku));
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        TableRowSorter<TableModel>sorter = new TableRowSorter<TableModel>(tabla_principal.getModel());
        tabla_principal.setRowSorter(sorter);
        String sku = "";
        if(jComboBox2.getSelectedItem()!="TODOS") {
            sku = jComboBox2.getSelectedItem().toString().trim();
        }
        else {
            sku = "";
        }
        if (sku.length()==0)
        {
            sorter.setRowFilter(null);
        }
        else{
            int cant=0;
            int ev=0;
            String precio = "";
            sorter.setRowFilter(RowFilter.regexFilter(sku));
        }
    }//GEN-LAST:event_jComboBox2ActionPerformed

       public void CargaPdf(String id, String Voucher){
        ResultSet Rs;
        ExeSql Sql = new ExeSql();
        String server,user,pass,ruta_local="";
        int puerto =21;
         String rutaimage="";
          String rutrans="";
        try {

//            server= "192.168.0.130";
//            user="voucher";
//            pass="V2369";
            
            
           //trae datos ftp
            server="";
            puerto=0;
            user=""; 
            pass="";
            
            	Rs = Sql.Select("SELECT * from conexiones where tipo='tickets'");
                if (Rs.next())
                {
                    server = Rs.getString("serv");
                    user  = Rs.getString("usu");
                    puerto  = Rs.getInt("port");
                    pass = Rs.getString("pass");
                }
           //trae datos ftp
            
            Rs = Sql.Select("SELECT count(*) as hay from tickets_luvaly where id="+id+"");
            Rs.next();
            if (Rs.getInt("hay")>=1)
            {
                Rs = Sql.Select("SELECT adjunto as pdf from tickets_luvaly where id="+id+"");
                Rs.first();
                if (Rs.getString("pdf") != null)
                {

                    //Verifica SO
                    String sistema = System.getProperty("os.name").toLowerCase();
                    File folder = new File("");
                    if (sistema.contains("win"))
                    {
                         ruta_local = "c:/fotos2/";
                         folder = new File(ruta_local.substring(0,ruta_local.length()-1));
                    }
                    else{
                          ruta_local = "/fotos2/";
                          folder = new File(ruta_local);
                    }
                    if (!folder.exists())
                    {
                        folder.mkdir();
                    }
                    String archivo = "";

                    rutaimage = Rs.getString("pdf");
                    
                    if (Rs.getString("pdf") != null)
                    {
                        
                        archivo = fmMain.GetStringDeFinal('\\', rutaimage);
                        rutrans = fmMain.GetStringDeFinal('\\', rutaimage);
                        System.out.println(rutrans);
                        System.out.println(archivo);
                    }
//                            String rutrans="";
//                            if (Transporte == 1)
//                            {
//                                rutrans = "/tnt/";
//                                //archivo = rutaimage.substring(33,rutaimage.length());
//                                archivo = fmMain.GetStringDeFinal('\\', rutaimage);
//                            }
//                            else if (Transporte == 7)
//                            {
//                                rutrans = "/blue/";
//                                //archivo = rutaimage.substring(34,rutaimage.length());
//                                archivo = fmMain.GetStringDeFinal('\\', rutaimage);
//                            }
//                            else
//                                {
//                                rutrans = "/";
//                                archivo = fmMain.GetStringDeFinal('\\', rutaimage);
//                            }
                      
//                        rutrans = "/";
//                        archivo = fmMain.GetStringDeFinal('\\', rutaimage);
                    
//                    String  Archivo_buscado = Ftp.busca_archivoFTP(server, puerto, user, pass, ruta_local, "",archivo);
//                   if (Archivo_buscado.equals("") )
//                   {
                    Ftp.baja_archivo_ftp(server, puerto,user, pass,"/" + rutrans,ruta_local + archivo);
                    File file = new File(archivo);
                    File pathCompleto = new File(ruta_local + file);
                    Desktop.getDesktop().open(pathCompleto); 
//                   } 
//                   else
//                   {
//                       rutrans = "/";
//                       Ftp.baja_archivo_ftp(server, puerto,user, pass,rutrans+archivo,ruta_local + Archivo_buscado);
//                       File file = new File(archivo);
//                       File pathCompleto = new File(ruta_local + file);
//                       Desktop.getDesktop().open(pathCompleto); 
//                   }
                                      
                }
               
            }
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
        }
        finally{
            Sql.Close();
            
        }
    }
    
    public void GetArea() {
        ExeSql sql = new ExeSql();
        ResultSet rs = null;
        try {
            rs = sql.Select("select nombre from pccostos");
            area_combo.addItem("TODOS");
            for(int i = 0;rs.next();i++){
                area_combo.addItem(rs.getString("nombre"));
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(pfTickets.class.getName()).log(Level.SEVERE, null, ex);
        }
        finally {
            sql.Close();
        }
        
    }
    
    public void GetCantidad() {
        ExeSql sql = new ExeSql();
        ResultSet rs = null;
        String Query = "select resultado.area ,count(*) cantidad\n" +
                        "from\n" +
                        "(select \n" +
                        "pcc.nombre area, \n" +
                        "case when tl.estado = 0 then 'Abierto'\n" +
                        "	 when tl.estado = 1 then 'Pendiente'\n" +
                        "     when tl.estado = 2 then 'Cerrado'\n" +
                        "end estado\n" +
                        "from tickets_luvaly tl\n" +
                        "left join usuario usu on usu.usuario = UPPER(tl.destinatario)\n" +
                        "                        left join personal p on p.usuario = usu.usuario\n" +
                        "                        left join personal_ccostos pc on pc.rut = p.rut\n" +
                        "                        left join pccostos pcc on pcc.id = pc.ccosto\n" +
                        "where tl.estado <> 2) resultado\n" +
                        "group by resultado.area";
        try {
            rs = sql.Select(Query);
            DefaultTableModel model = (DefaultTableModel) tabla_cantidad.getModel();
            while(model.getRowCount()>0){
                model.removeRow(0);
            }
            for(int i = 0;rs.next();i++){
                model.addRow(new Object[]{
                    rs.getString("area"),
                    rs.getInt("cantidad")
                });
            }
        } catch (SQLException ex) {
            Logger.getLogger(pfTickets.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void GetUser(){
        ExeSql sql = new ExeSql();
        String Query = "select pg.usename, usu.nombre nombre, pcc.nombre area\n" +
                        "from pg_user pg \n" +
                        "left join usuario usu on usu.usuario = UPPER(pg.usename)\n" +
                        "left join personal p on p.usuario = usu.usuario\n" +
                        "left join personal_ccostos pc on pc.rut = p.rut\n" +
                        "left join pccostos pcc on pcc.id = pc.ccosto\n" +
                        "where pg.usename='"+fmMain.GetUsuario().toLowerCase()+"'";
        ResultSet rs = null;
        try {
            rs = sql.Select(Query);
            for(int i = 0;rs.next();i++){
                label_usuario.setText(rs.getString("nombre"));
                label_area.setText(rs.getString("area"));
            }
            rs = sql.Select("select tl.id, \n" +
                            "(select nombre from usuario where usuario = tl.remitente) remitente, \n" +
                            "(select nombre from usuario where usuario = tl.destinatario) destinatario, \n" +
                            "pcc.nombre area, \n" +
                            "tl.fecha_creacion, \n" +
                            "case when tl.estado = 0 then 'Abierto'\n" +
                            "	 when tl.estado = 1 then 'Pendiente'\n" +
                            "     when tl.estado = 2 then 'Finalizado'\n" +
                            "     when tl.estado = 3 then 'Cerrado'\n" +
                            "end estado,\n" +
                            "(select count(*) from tickets_mensaje where ticket = tl.id) mensajes,\n"+
                            "case when adjunto = '0' then false else true end as adjunto,\n" +
                            "tl.asunto, \n" +
                            "case when tl.prioridad = 1 then 'BAJA'\n" +
                            "when tl.prioridad = 2 then 'MEDIA'\n" +
                            "when tl.prioridad = 3 then 'ALTA'\n" +
                            "when tl.prioridad = 4 then 'URGENTE' end as prioridad\n" +
                            "from tickets_luvaly tl\n" +
                            "left join usuario usu on usu.usuario = UPPER(tl.destinatario)\n" +
                            "                        left join personal p on p.usuario = usu.usuario\n" +
                            "                        left join personal_ccostos pc on pc.rut = p.rut\n" +
                            "                        left join pccostos pcc on pcc.id = pc.ccosto\n" +
                            "order by tl.fecha_creacion desc");
            
            DefaultTableModel model = (DefaultTableModel) tabla_principal.getModel();
            while(model.getRowCount()>0){
                model.removeRow(0);
            }
            
            for(int i = 0; rs.next();i++){
                model.addRow(new Object[]{
                    rs.getString("area"),
                    rs.getString("id"),
                    rs.getString("remitente"),
                    rs.getString("destinatario"),
                    rs.getString("fecha_creacion"),
                    rs.getString("estado").toUpperCase(),
                    rs.getString("mensajes"),
                    rs.getBoolean("adjunto"),
                    rs.getString("asunto"),
                    rs.getString("prioridad")
                });
            }
        } catch (SQLException ex) {
            Logger.getLogger(pfTicketsLuvaly.class.getName()).log(Level.SEVERE, null, ex);
        }
    
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> area_combo;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel label_area;
    private javax.swing.JLabel label_usuario;
    private javax.swing.JTable tabla_cantidad;
    private javax.swing.JTable tabla_principal;
    private javax.swing.JTextField txSku1;
    // End of variables declaration//GEN-END:variables
}
