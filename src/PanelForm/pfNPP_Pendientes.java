/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package PanelForm;

import Conexion.ExeSql;
import Conexion.ExeSqlLuvaly;
import Dialogos.jdAjustarCant;
import Dialogos.jdBuscaUbicacion;
import Dialogos.jdBuscarProductos;
import Dialogos.jdNoUbicados;
import Dialogos.jdProductosVenc;
import Dialogos.jdSeparablesIngreso;
import Dialogos.jdSeparacionesUbicacion;
import Dialogos.jd_UbicacionProductos;
import static Dialogos.jd_UbicacionProductos.Fecha;
import static Dialogos.jd_UbicacionProductos.Id;
import static Dialogos.jd_UbicacionProductos.convenio;
import static Dialogos.jd_UbicacionProductos.esFecha;
import Formularios.fmMain;
import static Formularios.fmMain.pnPestanas;
import Utilidades.Combo_CodStr;
import Utilidades.ComboCodigos;
import Utilidades.PanelTab;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;

/**
 *
 * @author luvaly
 */
public class pfNPP_Pendientes extends javax.swing.JPanel {
    
    public boolean booAgregando = false;
    DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();   
    DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
    public static Color DARK_GREEN = new Color(0,153,0);
    int contselec = 0;
    int cant = 0;
    double dcant = 0;
    int Nota = 0;
    
    /**
     * Creates new form AsignaUbicacion
     */
 
    public pfNPP_Pendientes() {
        initComponents();
        
        txtUbicacion.setVisible(false);
        txtUbicacionDestino.setVisible(false);
        btUbica.setVisible(false);
        btUbica1.setVisible(false);
        
        txNombreUbica.setVisible(false);
        txNombreUbicaDestino.setVisible(false);
        jLabel1.setVisible(false);
        jLabel4.setVisible(false);
        
        btUbicar.setVisible(false);
        
        btCerrarNota.setVisible(false);
        
        
        cargaPendientes();
        
        
//      rightRenderer.setHorizontalAlignment(SwingConstants.RIGHT);
        Grilla_Notas.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);

    
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        MnuProd = new javax.swing.JMenuItem();
        panel = new javax.swing.JPanel();
        txtUbicacion = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txNombreUbica = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        Grilla_prod = new javax.swing.JTable();
        btUbica = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        lbReg = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Grilla_Notas = new javax.swing.JTable();
        btCerrarNota = new javax.swing.JButton();
        btUbicar = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txNombreUbicaDestino = new javax.swing.JTextField();
        txtUbicacionDestino = new javax.swing.JTextField();
        btUbica1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtSku = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txNombre = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        lstNPP = new javax.swing.JList();
        jLabel5 = new javax.swing.JLabel();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        jTextField1.setText("jTextField1");

        jTextField2.setText("jTextField2");

        MnuProd.setText("Ver Producto");
        MnuProd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MnuProdActionPerformed(evt);
            }
        });
        jPopupMenu1.add(MnuProd);

        txtUbicacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUbicacionActionPerformed(evt);
            }
        });
        txtUbicacion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtUbicacionKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtUbicacionKeyReleased(evt);
            }
        });

        jLabel1.setText("Ubicacion Origen");

        txNombreUbica.setEditable(false);

        Grilla_prod.setAutoCreateRowSorter(true);
        Grilla_prod.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cod", "Nombre", "Cant", "Graba"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Grilla_prod.setComponentPopupMenu(jPopupMenu1);
        Grilla_prod.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Grilla_prodMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(Grilla_prod);
        if (Grilla_prod.getColumnModel().getColumnCount() > 0) {
            Grilla_prod.getColumnModel().getColumn(0).setMinWidth(100);
            Grilla_prod.getColumnModel().getColumn(0).setPreferredWidth(100);
            Grilla_prod.getColumnModel().getColumn(0).setMaxWidth(100);
            Grilla_prod.getColumnModel().getColumn(2).setMinWidth(80);
            Grilla_prod.getColumnModel().getColumn(2).setPreferredWidth(80);
            Grilla_prod.getColumnModel().getColumn(2).setMaxWidth(100);
            Grilla_prod.getColumnModel().getColumn(3).setMinWidth(0);
            Grilla_prod.getColumnModel().getColumn(3).setPreferredWidth(0);
            Grilla_prod.getColumnModel().getColumn(3).setMaxWidth(0);
        }

        btUbica.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos22/search.png"))); // NOI18N
        btUbica.setText("Ubica");
        btUbica.setEnabled(false);
        btUbica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btUbicaActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setText("Registros:   ");

        lbReg.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbReg.setText("0");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Notas Pendientes"));

        Grilla_Notas.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        Grilla_Notas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nota de Pedido"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Grilla_Notas.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                Grilla_NotasFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                Grilla_NotasFocusLost(evt);
            }
        });
        Grilla_Notas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Grilla_NotasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Grilla_Notas);

        btCerrarNota.setText("Cerrar Nota");
        btCerrarNota.setEnabled(false);
        btCerrarNota.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCerrarNotaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btCerrarNota, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(btCerrarNota, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btUbicar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/Ok.png"))); // NOI18N
        btUbicar.setText("UBICAR");
        btUbicar.setToolTipText("");
        btUbicar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btUbicarActionPerformed(evt);
            }
        });

        jLabel4.setText("Ubicacion Destino");

        txNombreUbicaDestino.setEditable(false);

        txtUbicacionDestino.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtUbicacionDestinoKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtUbicacionDestinoKeyReleased(evt);
            }
        });

        btUbica1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos22/search.png"))); // NOI18N
        btUbica1.setText("Ubica");
        btUbica1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btUbica1ActionPerformed(evt);
            }
        });

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos16/Actualiza.png"))); // NOI18N
        jButton3.setText("ACTUALIZAR");
        jButton3.setToolTipText("");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel2.setText("Sku");

        txtSku.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSkuActionPerformed(evt);
            }
        });
        txtSku.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSkuKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSkuKeyReleased(evt);
            }
        });

        jLabel3.setText("Nombre");

        txNombre.setEditable(false);
        txNombre.setEnabled(false);
        txNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txNombreActionPerformed(evt);
            }
        });
        txNombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txNombreKeyPressed(evt);
            }
        });

        lstNPP.setEnabled(false);
        jScrollPane4.setViewportView(lstNPP);

        jLabel5.setText("Notas de Pedido Asociadas");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))
                        .addGap(26, 26, 26)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtSku, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel5)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtSku, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(32, 32, 32)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelLayout.createSequentialGroup()
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(panelLayout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jLabel8)
                            .addGap(31, 31, 31)
                            .addComponent(lbReg))
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 852, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelLayout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(65, 65, 65)
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txNombreUbica, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE)
                                .addComponent(txNombreUbicaDestino)
                                .addGroup(panelLayout.createSequentialGroup()
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(txtUbicacion, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btUbica, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(panelLayout.createSequentialGroup()
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(txtUbicacionDestino, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btUbica1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(panelLayout.createSequentialGroup()
                                .addComponent(btUbicar, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(48, 48, 48)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1019, 1019, 1019))
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtUbicacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btUbica, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(12, 12, 12)
                        .addComponent(txNombreUbica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtUbicacionDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btUbica1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txNombreUbicaDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btUbicar, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 418, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(lbReg))
                .addGap(15, 15, 15))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, 1022, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cargaPendientes(){
    
        DefaultTableModel dfTm = (DefaultTableModel) Grilla_Notas.getModel();
        ExeSql Sql = new ExeSql();
        ResultSet Rs;
        String Query ="";
       
        
        while(dfTm.getRowCount()>0)
          dfTm.removeRow(0);
        
        try{
         
             
            Query = "select nrodocto from ctacteprv \n" +
                    "where tipdocto IN ('NPP') and estado = 1 ";
            
            Rs = Sql.Select(Query);
            
            if (Sql.GetRowCount() > 0){
            
                while (Rs.next()){
                
                  dfTm.addRow(new Object[]{Rs.getString("nrodocto")});
                
                }
            }   
         
        }catch (Exception e) {
         
            System.out.println(e.getMessage());
        
        }finally{
        
            Sql.Close();
        }          
       
    
    }
    
    
    
    public void set_ubicacion(String Ubicacion ){
        txtUbicacion.setText(Ubicacion);
    }
    
    
    public  void enter_ubicacion(){
        // TODO add your handling code here:
        ExeSql Sql = new ExeSql();
        ResultSet Rs, Rs1;
        String Query2 ;
        String strUbicacion = "";
        
        
        try{ 
               
                strUbicacion = txtUbicacion.getText().trim();
                String nombrePalabra =strUbicacion; //+ Character.toString(evt.getKeyChar());    
                 
                String ubicaArray[] = strUbicacion.split("\\.");
                
                if (ubicaArray.length<3 ){
                
                    fmMain.Mensaje("Favor revise el codigo, no es de Ubicacion");
                    txtUbicacion.setText("");
                    txNombreUbica.setText("");
                    txtUbicacion.requestFocus();
                    return;   
                } 
                 
                 
                if (nombrePalabra.substring(0,3).trim().equals("LVL") || nombrePalabra.substring(0,4).trim().equals("TRAN") || 
                    nombrePalabra.substring(0,3).trim().equals("INV") || nombrePalabra.substring(0,4).trim().equals("SAL.")){
                
                    System.out.println("Codigo Correcto de Ubicacion");
                
                
                }else{
                        fmMain.Mensaje("Favor revise el codigo, no es de Ubicacion");
                        txtUbicacion.setText("");
                        txNombreUbica.setText("");
                        txtUbicacion.requestFocus();
                        return;   
                }

                    
                Query2 = "SELECT nombre AS ubc FROM mt_codmetro WHERE codmetro = '"+strUbicacion+"'";
                    
                Rs1 = Sql.Select(Query2);
                
                if (Rs1.next()){
                
                    strUbicacion =Rs1.getString("ubc").trim();
                    txNombreUbica.setText(strUbicacion);
                    Carga_Prod_Ubicacion(txtUbicacion.getText().trim());
                       
                }else{
                    
                    fmMain.Mensaje("Ubicacion no encontrada, favor revise la ubicación");
                    limpia_all();
                     
                }
               
        }catch (Exception e) {
         
            System.out.println(e.getMessage());
        
        }finally{
        
            Sql.Close();
        }    
    }
    private void txtUbicacionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUbicacionKeyPressed
        
         if(evt.getKeyCode() == KeyEvent.VK_ENTER){
             enter_ubicacion();
        }
    }//GEN-LAST:event_txtUbicacionKeyPressed
    
    private void txtSkuKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSkuKeyPressed
       
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
           
            String nombrePalabra =txtSku.getText().trim() + Character.toString(evt.getKeyChar());
           
            if (nombrePalabra.substring(0,3).trim().equals("LVL") || nombrePalabra.substring(0,4).trim().equals("TRAN") || 
                nombrePalabra.substring(0,3).trim().equals("INV") || nombrePalabra.substring(0,4).trim().equals("SAL.")){
              
               trae_ubicacion(nombrePalabra);
               txtSku.setText("");
               txtUbicacion.setText(nombrePalabra.trim());
               
               enter_ubicacion();
               Carga_Prod_Ubicacion(nombrePalabra.trim());
               
               txtSku.requestFocus();
               
               
               return;   
           
            }else{
               
                carga_producto();
               
               
                try {
                   
                   DefaultListModel dfLista = new DefaultListModel();
                   
                   ExeSql Sql = new ExeSql();
                   ResultSet Rs;
                   
                   
                   Rs = Sql.Select("select cpt.sku, cpt.nrodocto FROM ctacteprvdet cpt\n" +
                                   "LEFT JOIN ctacteprv cp ON cpt.rut = cp.rut AND cpt.tipdocto = cp.tipdocto AND cpt.nrodocto = cp.nrodocto\n" +
                                   "WHERE cpt.sku = '"+txtSku.getText().trim()+"' AND cpt.tipdocto IN ('NPP') AND cp.estado = 1");
                   
                   
                    if (Sql.GetRowCount() > 0){
                       
                       while(Rs.next()){
                           
                           dfLista.addElement(Rs.getString("nrodocto"));
                           
                       }
                       
                       lstNPP.setModel(dfLista);
                       
                       
                    }


                    for (int i = 0; i < Grilla_prod.getRowCount(); i++) {
                       
                            
                        if (Grilla_prod.getValueAt(i, 0).toString().trim().equals(txtSku.getText().trim())) {
                                
                                Grilla_prod.changeSelection(i, 0, false, false);
                                break;
                        }
                    }
                        
               } catch (SQLException ex) {
                   Logger.getLogger(pfNPP_Pendientes.class.getName()).log(Level.SEVERE, null, ex);
               }
                
                
            }
           
        }


    }//GEN-LAST:event_txtSkuKeyPressed

   
    public  void limpia_all(){
   // TODO add your handling code here:
        limpiar_prod();
        txtUbicacion.setText("");
        txNombreUbica.setText("");
        txtUbicacion.requestFocus();
        DefaultListModel dfLista = new DefaultListModel();
        lstNPP.setModel(dfLista);
    }
    
    private void limpiar_prod(){
        DefaultTableModel dfTm = (DefaultTableModel) Grilla_prod.getModel();
        txNombre.setText("");
        txtSku.setText("");
        fmMain.LimpiaGrilla(dfTm);
        txtUbicacion.requestFocus();
        
    }
       
    
    private void txtUbicacionKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUbicacionKeyReleased
        // TODO add your handling code here:
      txtUbicacion.setText( txtUbicacion.getText().toUpperCase());
    }//GEN-LAST:event_txtUbicacionKeyReleased

    private void txtSkuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSkuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSkuActionPerformed

    private void txtSkuKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSkuKeyReleased
        // TODO add your handling code here:
      //   txtSku.setText( txtSku.getText().toUpperCase());
    }//GEN-LAST:event_txtSkuKeyReleased

    private void Grilla_prodMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Grilla_prodMouseClicked


        
    }//GEN-LAST:event_Grilla_prodMouseClicked

    
    private void ubica_metro(){
          
        String cant="",codigo="";
        int pos =-1;
        
        if (Nota == 0){
        
            Carga_Prod_Ubicacion(txtUbicacion.getText().trim());
            
            
            for (int i=0; i<=Grilla_prod.getRowCount()-1; i++ ){
            
                codigo= Grilla_prod.getValueAt(i, 0).toString().trim();
            
                if (codigo.equals(txtSku.getText().trim())){
                    pos = i;
                    break;
                }
            }
        
            if (pos ==-1){
          
                fmMain.Mensaje("No se encuentra el producto en Ubicacion" + txNombreUbica.getText().trim());
                return ;
      
            }else{
          
                cant =   Grilla_prod.getValueAt(pos, 2).toString().trim();
            }
            
            
        
        }else if (Nota == 1) {
        
            //Carga_Prod_Ubicacion_NPP(txtUbicacion.getText().trim());
            
            for (int i=0; i<=Grilla_prod.getRowCount()-1; i++ ){
            
                codigo= Grilla_prod.getValueAt(i, 0).toString().trim();
            
                if (codigo.equals(txtSku.getText().trim())){
                    pos = i;
                
                    break;
                }
            }
        
            if (pos ==-1){
          
                fmMain.Mensaje("No se encuentra el producto en Ubicacion" + txNombreUbica.getText().trim());
                return ;
      
            }else{
          
                cant =   Grilla_prod.getValueAt(pos, 2).toString().trim();
            }
      
        
        }
        
        
    }
    
    private void txNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txNombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txNombreActionPerformed

    private void btUbicaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btUbicaActionPerformed
           // TODO add your handling code here:
           // TODO add your handling code here:
           jdBuscaUbicacion Ubicacion= new jdBuscaUbicacion(null, true);
           Ubicacion.CargaBodegaOR(1);
           Ubicacion.setVisible(true);
           txtUbicacion.setText(Ubicacion.GetUbicacion());
           txNombreUbica.setText(Ubicacion.GetNombreUbicacion());
           Carga_Prod_Ubicacion(txtUbicacion.getText().trim());
           txtSku.requestFocus();
    }//GEN-LAST:event_btUbicaActionPerformed

    private void MnuProdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MnuProdActionPerformed
        // TODO add your handling code here:
         System.out.println( Grilla_prod.getValueAt(Grilla_prod.getSelectedRow(), 2).toString().trim());
        pfProductos Pro = new pfProductos();
        Pro.setOpaque(false);
        pnPestanas.addTab("Producto", Pro);
        PanelTab btc = new PanelTab(pnPestanas, 0);
        pnPestanas.setTabComponentAt(pnPestanas.indexOfComponent(Pro), btc);
        pnPestanas.setSelectedIndex(pnPestanas.getTabCount() - 1);
        Pro.txSku.requestFocus();
        Pro.CargaProducto(Grilla_prod.getValueAt(Grilla_prod.getSelectedRow(), 0).toString().trim());   
    }//GEN-LAST:event_MnuProdActionPerformed

    private void txNombreKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txNombreKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txNombreKeyPressed

    private void txtUbicacionDestinoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUbicacionDestinoKeyPressed
//        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
//             enter_ubicacion();
//        }
    }//GEN-LAST:event_txtUbicacionDestinoKeyPressed

    private void txtUbicacionDestinoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUbicacionDestinoKeyReleased
        txtUbicacionDestino.setText( txtUbicacionDestino.getText().toUpperCase());
    }//GEN-LAST:event_txtUbicacionDestinoKeyReleased

    private void btUbica1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btUbica1ActionPerformed
        
        jdBuscaUbicacion Ubicacion= new jdBuscaUbicacion(null, true);
           Ubicacion.CargaBodegaOR(1);
           Ubicacion.setVisible(true);
           txtUbicacionDestino.setText(Ubicacion.GetUbicacion());
           txNombreUbicaDestino.setText(Ubicacion.GetNombreUbicacion());
          // Carga_Prod_Ubicacion(txtUbicacionDestino.getText().trim());
          // txtSku.requestFocus();
    }//GEN-LAST:event_btUbica1ActionPerformed

    private void txtUbicacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUbicacionActionPerformed
        
        
        
        
    }//GEN-LAST:event_txtUbicacionActionPerformed

    private void btUbicarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btUbicarActionPerformed
        
        if (Nota == 0){
        
            fmMain.Mensaje("Debe Elegir una Nota de Pedido!");
            return;
        
        }
        
        
        Ubicar();
        
    }//GEN-LAST:event_btUbicarActionPerformed

    private void Grilla_NotasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Grilla_NotasMouseClicked
        
        if(evt.getClickCount()==1){
        
            Carga_Prod_Ubicacion_NPP(txtUbicacion.getText().trim());
            btCerrarNota.setEnabled(true);
            Nota = 1;
            
            
        }
    }//GEN-LAST:event_Grilla_NotasMouseClicked

    private void btCerrarNotaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCerrarNotaActionPerformed
       
        
        ExeSql Sql = new ExeSql();
        ExeSql Sql2 = new ExeSql();
        ExeSql Sql3 = new ExeSql();
        ExeSql Sql4 = new ExeSql();
        ExeSql Sql5 = new ExeSql();
        ExeSql Sql6 = new ExeSql();
        ExeSql Sql7 = new ExeSql();
        
        ResultSet Rs2;
        ResultSet Rs5;
        
        String NroOc = "";
        
        try {
            
            NroOc = Grilla_Notas.getValueAt(Grilla_Notas.getSelectedRow(), 0).toString().trim();
            
            
        
            Sql.ExeSql("update ctacteprv \n" +
                       "set estado=4 \n" +
                       "where tipdocto='NPP'\n" +
                       "and nrodocto=" + NroOc + " and estado=2");
            
            Sql.Commit();   
            
            
            Rs2 = Sql2.Select("select sku, cantidad, recibido from ctacteprvdet \n" +
                              "where tipdocto='NPP'\n" +
                              "and nrodocto=" + NroOc);
                                
            if (Sql2.GetRowCount() > 0){
            
                
                while (Rs2.next()){
                
                    String SkuDet = Rs2.getString("sku");
                    double cantidad = Rs2.getDouble("cantidad");
                    double recibido = Rs2.getDouble("recibido");
                    
                    if (cantidad > recibido){
                    
                       
                       if (recibido == 0){
                       
                       
                            Sql3.ExeSql("delete from ctacteprvdet \n" +
                                        "where tipdocto='NPP'\n" +
                                        "and nrodocto=" + NroOc + "\n"+
                                        "and sku='"+SkuDet.trim()+ "'");     
                        
                            Sql3.Commit();  
                       
                       
                       
                       }else if (recibido > 0) { 
                        
                        
                            Sql3.ExeSql("update ctacteprvdet \n" +
                                        "set cantidad = recibido \n" +
                                        "where tipdocto='NPP'\n" +
                                        "and nrodocto=" + NroOc + "\n"+
                                        "and sku='"+SkuDet.trim()+ "'");     
                        
                            Sql3.Commit();  
                       
                       }
                        
                        double dif = (cantidad - recibido);
                        
                        Sql4.ExeSql("UPDATE inventario_sala SET \n"+
                                    "ocp = ocp - " + dif + " \n" +
                                    "WHERE sku = '"+SkuDet.trim()+ "'");
                        
                        Sql4.Commit();
                        
                    
                    }
                
                }
            
            }
            
            
            
            actualiza_pventa();
            
            
            //*********** ACTUALIZA Y CIERRA NOTA PEDIDO CLIENTE **********************************
            
            int Rut = 0;
            int ocp = 0;
            
            
            
            Rs5 = Sql5.Select("select ocd.rut, ocd.sku, ocd.cantidad,ocd.separado, oc.ocp_econa FROM occhdet ocd\n" +
                              "left join occh oc ON ocd.rut = oc.rut and ocd.codigo_oc = oc.codigo_oc and ocd.orden = oc.orden\n" +
                              "where ocd.rut = 99999999 and oc.ocp_econa = "+NroOc);
            
            if (Sql5.GetRowCount() > 0){
            
                Rs5.next();
                ocp = Rs5.getInt("ocp_econa");
                
                Sql7.ExeSql("UPDATE occh SET \n"+
                            "estado = 0, \n"+
                            "estadodespacho = 3,  \n"+
                            "usuario_separacion = 'LIBRES' \n"+
                            "WHERE rut= 99999999 \n"+
                            "AND ocp_econa =" +ocp );

                Sql7.Commit();
            
            
            }
            
            
            fmMain.Mensaje("Nota de Pedido N° "+NroOc+" cerrada");
             
        
        } catch (SQLException ex) {
            
            Logger.getLogger(pfNPProveedor.class.getName()).log(Level.SEVERE, null, ex);
            Sql.Rollback();
            Sql3.Rollback();
            Sql4.Rollback();
            Sql6.Rollback();
            Sql7.Rollback();
        
        }finally {
        
            Sql.Close();
            Sql3.Close();
            Sql4.Close();
            Sql6.Close();
            Sql7.Close();
            
            btCerrarNota.setEnabled(false);
            
        }
        
        
        
    }//GEN-LAST:event_btCerrarNotaActionPerformed
    
    private void actualiza_pventa (){
    
    
        ExeSql  Sql = new ExeSql();
        ExeSql  Sql2 = new ExeSql();
        ExeSql  Sql3 = new ExeSql();
        
        ResultSet Rs, Rs3;
        
        double valor_web = 0;
        double cost_ref = 0;
        
        double cost_vent_neto2 = 0;
            
        
        try{
            
            
            String NroOc = Grilla_Notas.getValueAt(Grilla_Notas.getSelectedRow(), 0).toString().trim();
            
            Rs3 = Sql3.Select("select sku, cantidad, recibido from ctacteprvdet \n" +
                               "where tipdocto='NPP'\n" +
                               "and nrodocto=" + NroOc);
            
            
            if (Sql3.GetRowCount() > 0){
            
                while (Rs3.next()) {
                    
                    String SkuDet = Rs3.getString("sku");
                                       
                
                    Rs = Sql.Select("SELECT sku, pventa_web FROM producto \n" +
                                    "WHERE sku = '"+SkuDet.trim()+"'" );
            
                    if (Sql.GetRowCount() > 0){
            
                        Rs.next();
                
                        valor_web = Rs.getDouble("pventa_web");
                
            
                    }else {
                
                        valor_web = 0;
                
                    }
            
                    cost_ref = valor_web;
            
                    cost_vent_neto2 = Math.round((cost_ref/0.65*1.19));
                
                    Sql2.ExeSql("UPDATE producto_valores SET\n" +
                                 "pventa = " +cost_vent_neto2  + ",\n" +
                                 "compra = 1 \n" +
                                 "WHERE sku = '" + SkuDet.trim() + "'\n");
                    Sql2.Commit();
            
                }
            
            
            } 
            
            
        } catch (Exception e) {
            Sql2.Rollback();
            JOptionPane.showMessageDialog(null, e);
        }
    
    }
    
       
    
    
    private void Grilla_NotasFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Grilla_NotasFocusLost
       
    }//GEN-LAST:event_Grilla_NotasFocusLost

    private void Grilla_NotasFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_Grilla_NotasFocusGained
        
    }//GEN-LAST:event_Grilla_NotasFocusGained

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        limpia_all();
        set_ubicacion(fmMain.BodegaTransito());
        enter_ubicacion();
        cargaPendientes();
        Nota = 0;
    }//GEN-LAST:event_jButton3ActionPerformed

    
    public void Ubicar(){
           
       
        ExeSql Sql2 = new ExeSql();
        ResultSet Rs1, Rs2;
        
       //********************************* 
        ExeSql Sql = new ExeSql();
       
       
        
        String Sku = "";
        String Ubicacion = "";
        String UbicacionDestino = "";
        String StUsuario,QryIns, qryUpd, QryDel,Query2;
        
        double cantidad_insertada;
        int Stock = 0;
       
        try{
                
                Ubicacion = txtUbicacion.getText().trim();
                UbicacionDestino = txtUbicacionDestino.getText().trim();
                StUsuario = fmMain.GetUsuario();
                
                if (txtUbicacionDestino.getText().trim().equals("")){
                    fmMain.Mensaje("Debe ingresar Ubicacion de Destino");
                    txtUbicacionDestino.requestFocus();
                    return;
                }
                
                
                if (contselec == 0){
         
                    fmMain.Mensaje("No hay Productos Seleccionados!!");
                    return;
         
                }
               
               
            //************************************************************************************************************            
                       
                // UBICA PRODUCTOS EN METRO DESTINO 
                boolean agrega = false;
                
                for (int i=0; i<=Grilla_prod.getRowCount()-1; i++ ){
                
                    
                    agrega = (boolean) Grilla_prod.getValueAt(i, 6);
                
                    if (agrega){
                    
                    
                        Sku = Grilla_prod.getValueAt(i, 0).toString().trim();
                        cantidad_insertada = Double.parseDouble(Grilla_prod.getValueAt(i, 2).toString().trim());
                    
                        Query2 = "select *  from mt_productos where ubicacion = '" + UbicacionDestino + "' and sku = '" + Sku + "';";
                        Rs1 = Sql.Select(Query2);
                    
                        if (Sql.GetRowCount() > 0){  //Si ya existe la ubicacion, realiza un Update
                    
                    
                            String QryUpd = "UPDATE  mt_productos SET cant = cant + " +  cantidad_insertada + ",\n" +
                                            "usuario_mod ='" +fmMain.GetUsuario() + "', fecha_mod = now() " +
                                            "WHERE ubicacion = '" + UbicacionDestino + "' AND sku = '" + Sku + "' ";
                    
                            Sql2.ExeSql(QryUpd);
                            Sql2.Commit();
                
                        }else if (Sql.GetRowCount() == 0){  //Si no existe la ubicacion, realiza un Insert
                         
                            QryIns = "INSERT into mt_productos (ubicacion,sku,usuario,cant, rut, tipdocto, nrodocto)\n" +
                                     " values ('" + UbicacionDestino + "','" + Sku + "','" + fmMain.GetUsuario()  + "', " + cantidad_insertada + 
                                     "," + "null" + ",'" + "" + "'," + "null" + ");";
                            Sql2.ExeSql(QryIns);
                            Sql2.Commit();
                    
                        }
                        
                        
                        
                        rebaja_stock("SAL.1001.1",Sku.trim(),cantidad_insertada);
                        
                        actualiza_ubicados(Sku.trim(),cantidad_insertada,Grilla_Notas.getValueAt(Grilla_Notas.getSelectedRow(), 0).toString().trim());
                        
                    
                    } 
                    
                    
                }
                
                limpia_all();
                set_ubicacion(fmMain.BodegaTransito());
                enter_ubicacion();
                
         
        }catch (SQLException e) {
        
            System.out.println(e.getMessage());
            Logger.getLogger(pfNPP_Pendientes.class.getName()).log(Level.SEVERE, null, e);
            Sql2.Rollback();
         
        
        } finally{
            
            Sql2.Close();
            
            
        }          
        
        
        
    }
    
    private void rebaja_stock (String Ubica, String Sku,double cantidad){
        
        ExeSql Sql3 = new ExeSql();
                         
        try {
            
            String QryDel = "UPDATE mt_productos SET cant = cant - " +  cantidad + "\n" +
                            "WHERE ubicacion IN ('SAL.1001.1') AND sku = '" + Sku + "' ";
            
            Sql3.ExeSql(QryDel);
            
            Sql3.Commit();
        
        } catch (SQLException ex) {
            Sql3.Rollback();
            Logger.getLogger(pfNPP_Pendientes.class.getName()).log(Level.SEVERE, null, ex);
        }finally{
    
            Sql3.Close();
        }
    
    }
    
    
    private void actualiza_ubicados (String Sku,double cantidad, String Nota){
        
        ExeSql Sql3 = new ExeSql();
                         
        try {
            
            String QryDel = "UPDATE ctacteprvdet SET ubicado = ubicado + " +  cantidad + "\n" +
                            "WHERE tipdocto IN ('NPP') AND nrodocto = "+Nota+" AND sku = '" + Sku + "' ";
            
            Sql3.ExeSql(QryDel);
            
            Sql3.Commit();
        
        } catch (SQLException ex) {
            Sql3.Rollback();
            Logger.getLogger(pfNPP_Pendientes.class.getName()).log(Level.SEVERE, null, ex);
        }finally{
    
            Sql3.Close();
        }
    
    }
    
    
    
    private void trae_ubicacion (String Ubica){
       
        ExeSql Sql = new ExeSql();
        ResultSet Rs, Rs1;
        String Query2 ;
        String strUbicacion = "";
        
      
                
         try{         
              strUbicacion = Ubica;
              String ubicaArray[] = strUbicacion.split("\\.");

              Query2 = "SELECT nombre AS ubc FROM mt_codmetro WHERE codmetro = '"+strUbicacion+"'";
              
              
              Rs1 = Sql.Select(Query2);
              if (Rs1.next()){
                  strUbicacion =Rs1.getString("ubc").trim();
                  txNombreUbica.setText(strUbicacion);
                  Carga_Prod_Ubicacion(Ubica);
              }   
              else
              {
                  fmMain.Mensaje("Ubicacion no encontrada, favor revise la ubicación");
                  limpia_all();
              }
        }
     catch (Exception e) {
            System.out.println(e.getMessage());
        } finally{
            Sql.Close();
        }               
    }
    
    
    private void Carga_Prod_Ubicacion(String ubicacion){
        ExeSql Sql = new ExeSql();
        ExeSql Sql2 = new ExeSql();
        ResultSet Rs,Rs2;
        ExeSqlLuvaly luv = new ExeSqlLuvaly();
        ResultSet producto = null;
        DefaultTableModel dfTm = (DefaultTableModel) Grilla_prod.getModel();
        double peso=0;
        String Query ="";
        String SkuAnt = "";
        int registros =0;
        fmMain.LimpiaGrilla(dfTm);
        
        
        try {
            
            Query = "SELECT ctp.sku, p.nombre, ctp.cantidad FROM ctacteprvdet ctp \n" +
                    "LEFT JOIN producto p ON ctp.sku = p.sku \n" +
                    "LEFT JOIN ctacteprv ct ON ctp.rut = ct.rut AND ctp.tipdocto = ct.tipdocto AND ctp.nrodocto = ct.nrodocto \n" +
                    "WHERE ctp.tipdocto IN ('NPP') AND ct.estado = 1";
            
            Rs = Sql.Select(Query);

            
            while(Rs.next()){
                producto =  luv.Select("SELECT p.sku,p.nombre Nombre,trim(u.unidad) as unidad, u.um, cc.sku cchile, tr.sku as skut,tr.skurel \n"+
                                        "FROM producto p \n" +
                                        "LEFT JOIN par_unidad u ON u.codigo=p.unidad\n "+
                                        "LEFT JOIN codchile cc on p.sku = cc.sku \n"+
                                        "LEFT JOIN transformacion tr on p.sku = tr.skurel \n" +
                                        "where p.sku = '"+Rs.getString("Sku").trim()+"'");
                producto.next();
                
                if(producto.getString("cchile") != null){                     //Si está en codchile
                
                     System.out.println("Sku ANTERIOR ES :"+SkuAnt);
                     System.out.println("Sku ES :"+producto.getString("Sku"));
                   
                     if (!producto.getString("Sku").equals(SkuAnt)){        //Que no se repita el SKU
                          
                         SkuAnt = producto.getString("sku").trim();
                        
                         dfTm.addRow(new Object[]{Rs.getString("Sku"),producto.getString("nombre"),Rs.getDouble("cantidad")});
                         registros++;
                      
                      }
                
                }else if(producto.getString("cchile") == null){                       //Si no está en codchile
                    
                        if(producto.getString("skurel") != null){                        //Si el sku hijo no es nulo
                     
                            if (!producto.getString("skurel").equals(SkuAnt)){        //Que no se repita el SKU
                                  
                                 SkuAnt = producto.getString("skurel").trim();
                                
                                String skut = producto.getString("skut");
                                                               
                                String Query2 = "SELECT sku FROM codchile WHERE sku ='"+skut+"'";
                                Rs2 = luv.Select(Query2);
                                
                                if (luv.GetRowCount() > 0){            //Si está en codchile
                                
                                    dfTm.addRow(new Object[]{Rs.getString("Sku"),producto.getString("nombre"),Rs.getDouble("cantidad")});
                                    registros++;
                                
                                }else if (luv.GetRowCount() == 0){         //Si no está en codchile
                                                                    
                                    dfTm.addRow(new Object[]{Rs.getString("Sku"),producto.getString("nombre"),Rs.getDouble("cantidad")});
                                    registros++;
                                
                                }
                            }   
                                  
                        }else{                 //Si el sku hijo es nulo
                     
                            dfTm.addRow(new Object[]{Rs.getString("Sku"),producto.getString("nombre"),Rs.getDouble("cantidad")});
                            registros++;
                     
                        }   
                
                
                }
                
            }
            
           // Grilla_prod.setDefaultRenderer(Object.class, new Elrender()); 
            
            lbReg.setText( String.valueOf(registros));
            txtSku.requestFocus();
             }
     catch (SQLException e) {
            System.out.println(e.getMessage());
            Logger.getLogger(pfNPP_Pendientes.class.getName()).log(Level.SEVERE, null, e);
        } finally{
            Sql.Close();
            luv.Close();
        }    
        
    }
     
    
    
    private void Carga_Prod_Ubicacion_NPP(String ubicacion){
        ExeSql Sql = new ExeSql();
        ExeSql Sql2 = new ExeSql();
        ResultSet Rs,Rs2;
        ExeSqlLuvaly luv = new ExeSqlLuvaly();
        ResultSet producto = null;
        DefaultTableModel dfTm = (DefaultTableModel) Grilla_prod.getModel();
        double peso=0;
        String Query ="";
        String SkuAnt = "";
        int registros =0;
        fmMain.LimpiaGrilla(dfTm);
        
        
        try {
            
//            Query=" select mp.sku Sku, ct.recibido as cant, ct.ubicado, \n" +
//                    "case when mp.fecha_mod is null then mp.fecha else mp.fecha_mod END as fechita, \n" +
//                    "case when mp.fecha_mod is null then EXTRACT(day from current_date-mp.fecha) else EXTRACT(day from current_date-mp.fecha_mod) END as Dias \n" +
//                    "FROM mt_productos mp \n" +
//                    "LEFT JOIN ctacteprvdet ct ON mp.sku=ct.sku\n "+
//                    "WHERE mp.cant <>0 and mp.sku is not null and ct.nrodocto = "+Grilla_Notas.getValueAt(Grilla_Notas.getSelectedRow(), 0).toString().trim()+" and ct.tipdocto IN ('NPP') " +
//                    "order by case when mp.fecha_mod is null then EXTRACT(day from current_date-mp.fecha) else EXTRACT(day from current_date-mp.fecha_mod) END DESC"; 
//            
            
             Query = "SELECT ctp.sku, p.nombre, ctp.cantidad FROM ctacteprvdet ctp \n" +
                    "LEFT JOIN producto p ON ctp.sku = p.sku \n" +
                    "LEFT JOIN ctacteprv ct ON ctp.rut = ct.rut AND ctp.tipdocto = ct.tipdocto AND ctp.nrodocto = ct.nrodocto \n" +
                    "WHERE ctp.tipdocto IN ('NPP') AND ct.estado = 1 and ct.nrodocto = "+Grilla_Notas.getValueAt(Grilla_Notas.getSelectedRow(), 0).toString().trim();
            
            
            Rs = Sql.Select(Query);

            
            while(Rs.next()){
                producto =  luv.Select("SELECT p.sku,p.nombre Nombre,trim(u.unidad) as unidad, u.um, cc.sku cchile, tr.sku as skut,tr.skurel \n"+
                                        "FROM producto p \n" +
                                        "LEFT JOIN par_unidad u ON u.codigo=p.unidad\n "+
                                        "LEFT JOIN codchile cc on p.sku = cc.sku \n"+
                                        "LEFT JOIN transformacion tr on p.sku = tr.skurel \n" +
                                        "where p.sku = '"+Rs.getString("Sku").trim()+"'");
                producto.next();
                
                if(producto.getString("cchile") != null){                     //Si está en codchile
                
                     System.out.println("Sku ANTERIOR ES :"+SkuAnt);
                     System.out.println("Sku ES :"+producto.getString("Sku"));
                   
                     if (!producto.getString("Sku").equals(SkuAnt)){        //Que no se repita el SKU
                          
                         SkuAnt = producto.getString("sku").trim();
                        // double saldo =  Rs.getDouble("cant")-Rs.getDouble("ubicado");
                         
                         
                       //  if (saldo > 0){
                                                  
                         dfTm.addRow(new Object[]{Rs.getString("sku"),producto.getString("nombre"),Rs.getDouble("cantidad")});
                         registros++;
                        // }
                      
                      }
                
                }else if(producto.getString("cchile") == null){                       //Si no está en codchile
                    
                        if(producto.getString("skurel") != null){                        //Si el sku hijo no es nulo
                     
                            if (!producto.getString("skurel").equals(SkuAnt)){        //Que no se repita el SKU
                                  
                                 SkuAnt = producto.getString("skurel").trim();
                                
                                String skut = producto.getString("skut");
                                                               
                                String Query2 = "SELECT sku FROM codchile WHERE sku ='"+skut+"'";
                                Rs2 = luv.Select(Query2);
                                
                                if (luv.GetRowCount() > 0){            //Si está en codchile
                                
                                    dfTm.addRow(new Object[]{Rs.getString("Sku"),producto.getString("nombre"),Rs.getDouble("cantidad")});
                                    registros++;
                                
                                }else if (luv.GetRowCount() == 0){         //Si no está en codchile
                                                                    
                                    dfTm.addRow(new Object[]{Rs.getString("sku"),producto.getString("nombre"),Rs.getDouble("cantidad")});
                                    registros++;
                                
                                }
                            }   
                                  
                        }else{                 //Si el sku hijo es nulo
                     
                            dfTm.addRow(new Object[]{Rs.getString("sku"),producto.getString("nombre"),Rs.getDouble("cantidad")});
                            registros++;
                     
                        }     
                
                
                }
                
            }
            
           // Grilla_prod.setDefaultRenderer(Object.class, new Elrender()); 
            
            lbReg.setText( String.valueOf(registros));
            txtSku.requestFocus();
             
        }catch (SQLException e) {
            System.out.println(e.getMessage());
            Logger.getLogger(pfNPP_Pendientes.class.getName()).log(Level.SEVERE, null, e);
        } finally{
            Sql.Close();
            luv.Close();
        }    
        
    }
    
    
    
    
    private void carga_producto(){
        
        String codbarfinal = txtSku.getText().replace("'", "-");
        
        txtSku.setText(codbarfinal.trim());
        
        if(!txtSku.getText().isEmpty())
        
            CargaProducto(txtSku.getText());
        
        else{
            
            jdBuscarProductos BP = new jdBuscarProductos(null, true);
            BP.setLocationRelativeTo(null);
            BP.setTitle("Buscar Producto");
            BP.setVisible(true);
            
            if(!"".equals(BP.GetCodigo()))
                CargaProducto(BP.GetCodigo());
        }
            
    }
    
    
    
    
    public void CargaProducto(String Codigo) {
        ExeSql Sql = new ExeSql();
        
        ResultSet Rs = null;
        double Margen;
        int revisa_codbar =0;
        int revisa_codchile =0;
        ExeSqlLuvaly luv = new ExeSqlLuvaly();
        ResultSet producto = null;
   
        try {
            String Query;
            //Limpia la Lista
            
            Rs = luv.Select("select codbar, sku from codbar where sku='" + Codigo + "' or codbar='"+ Codigo + "'" );        
                    if (Rs.next())
                        {
                        Codigo = Rs.getString("sku").trim();
                        revisa_codbar++;
                        }
            Rs = luv.Select("select idch, sku from codchile where sku='" + Codigo +"' or idch='"+ Codigo + "'" );
                    if (Rs.next())
                        {
                        Codigo = Rs.getString("sku").trim();
                        revisa_codchile++;
                        }
            Rs = luv.Select("select codbar, sku from codbar where sku='" + Codigo + "' or codbar='"+ Codigo + "'" );        
                    if (Rs.next())
                        {
                        Codigo = Rs.getString("sku").trim();
                        revisa_codbar++;
                        }
             
                    
                    
            Query ="select p.sku,p.nombre " 
                    + " from producto p \n"
                    + " where p.sku='" + Codigo + "' or p.sku in (select sku from codbar where codbar='" + Codigo + "')";
              Rs = luv.Select(Query);

      if(luv.GetRowCount()==0){   
                 fmMain.Mensaje("SKU: " + txtSku.getText().trim() + " no esta en Nuestra Bases de Datos. Comuniquese con Informática");
                 txtSku.setText("");
                 txtSku.requestFocus();
                 return;
      }      
            Rs.next();
            Codigo = Rs.getString("sku").trim();
            String Nombre = Rs.getString("nombre");
       
            
            if (Nombre.length() > 20) {
                Nombre.substring(0, 20);
            }
            txtSku.setText(Codigo);
            txNombre.setText(Rs.getString("nombre"));
           
        } catch (SQLException ex) {
            System.out.println(ex);
        } finally {
            Sql.Close();
            luv.Close();
        }
    }
    
    
    class Elrender extends DefaultTableCellRenderer {
         
        @Override
        public Component getTableCellRendererComponent(JTable tabla, Object valor, boolean isSelected, boolean hasFocus, int fila, int columna) {
        super.getTableCellRendererComponent(tabla,valor,isSelected, hasFocus, fila, columna);
         
            if( (Boolean)tabla.getValueAt(fila,6) == true)
            {
                  if(isSelected==true){
                    this.setBackground(DARK_GREEN);
                    this.setForeground(Color.white);    
                }else{
                
                    this.setForeground(DARK_GREEN);
                    this.setBackground(Color.white);
                
                }
            }
            else if((Boolean)tabla.getValueAt(fila,6) == false){
            
                
                if(isSelected==true){
                
                    this.setBackground(Color.red);
                    this.setForeground(Color.white);    
                
                }else{
                
                    this.setForeground(Color.red);
                    this.setBackground(Color.white);
                
                }
           
            
            }     
            else {
                 this.setForeground(Color.black);  
            } 
            return this;
        }
    } 
    
    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Grilla_Notas;
    private javax.swing.JTable Grilla_prod;
    private javax.swing.JMenuItem MnuProd;
    private javax.swing.JButton btCerrarNota;
    private javax.swing.JButton btUbica;
    private javax.swing.JButton btUbica1;
    private javax.swing.JButton btUbicar;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JLabel lbReg;
    private javax.swing.JList lstNPP;
    private javax.swing.JPanel panel;
    private javax.swing.JTextField txNombre;
    private javax.swing.JTextField txNombreUbica;
    private javax.swing.JTextField txNombreUbicaDestino;
    private javax.swing.JTextField txtSku;
    private javax.swing.JTextField txtUbicacion;
    private javax.swing.JTextField txtUbicacionDestino;
    // End of variables declaration//GEN-END:variables
}
