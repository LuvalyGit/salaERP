/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package PanelForm;

import Conexion.ExeSql;
import Conexion.ExeSqlLuvaly;
import Dialogos.jdOC_PendientesFac;
import Formularios.fmMain;
import static Formularios.fmMain.Mensaje;
import static Formularios.fmMain.pnPestanas;
//import Utilidades.CargaGrilla;
import Utilidades.ComboCodigos;
import Utilidades.Exporter;
import Utilidades.LogError;
import Utilidades.PanelTab;
import Utilidades.Utl_Excel;
import java.awt.Color;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.Font;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author David Alcaman
 */
public class pfControlInventario extends javax.swing.JPanel {
    int BigCont=0;
    int contselec = 0;
    ArrayList<ArrayList<String>> Lista  = new ArrayList<ArrayList<String>>();
            
 //*************************************************************//   
    
    
    
    public pfControlInventario() {
        initComponents();
        CargaConvenios();
        CargaProveedor();
        cbIdConvenio.setVisible(false);
        cbIdProveedor.setVisible(false);
        Grilla.getTableHeader().setFont(new Font("Arial", Font.BOLD, 9));
        GrillaPrv.getTableHeader().setFont(new Font("Arial", Font.BOLD, 9));

        Grilla.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            //Se ejecuta automáticamente cada vez que se hace una nueva selección. 
            @Override
            public void valueChanged(ListSelectionEvent e) {
                
                if(Grilla.getSelectedRowCount()>0){
                 
                    CargaProveedores();
                } 
                
            }
            
        });
        GrillaPrvNegativos.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            //Se ejecuta automáticamente cada vez que se hace una nueva selección. 
            @Override
            public void valueChanged(ListSelectionEvent e) {
                BigCont++;
                if(GrillaPrvNegativos.getSelectedRowCount()>0 && BigCont%2!=0)
                {
                   CargaSkuAsociados();
                   btNuevaOC.setEnabled(true);
                }  
                    
            }

        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnMenu = new javax.swing.JPanel();
        jXLabel1 = new org.jdesktop.swingx.JXLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cbSaldos = new javax.swing.JComboBox();
        btCargar = new javax.swing.JButton();
        lbContProductos = new javax.swing.JLabel();
        cbConvenio = new javax.swing.JComboBox<>();
        cbProveedor = new javax.swing.JComboBox<>();
        cbIdConvenio = new javax.swing.JComboBox<>();
        cbIdProveedor = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        txBuscarCodigo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txBuscarNombre = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txBuscarProveedor = new javax.swing.JTextField();
        btLimpiar = new javax.swing.JButton();
        chk_ult_proveedor = new javax.swing.JCheckBox();
        btCrearOCP = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        GrillaPrv = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        GrillaPrvNegativos = new javax.swing.JTable();
        btNuevaOC = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Grilla = new javax.swing.JTable();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pnMenu.setBackground(new java.awt.Color(220, 215, 226));

        jXLabel1.setForeground(new java.awt.Color(0, 51, 0));
        jXLabel1.setText("CONTROL DE INVENTARIO");
        jXLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        javax.swing.GroupLayout pnMenuLayout = new javax.swing.GroupLayout(pnMenu);
        pnMenu.setLayout(pnMenuLayout);
        pnMenuLayout.setHorizontalGroup(
            pnMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnMenuLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jXLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(750, Short.MAX_VALUE))
        );
        pnMenuLayout.setVerticalGroup(
            pnMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnMenuLayout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jXLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13))
        );

        add(pnMenu, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 30));

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setText("Saldos");

        cbSaldos.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Negativos", "Positivos", "Todos" }));

        btCargar.setText("Cargar");
        btCargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCargarActionPerformed(evt);
            }
        });

        lbContProductos.setText("0 Productos");

        cbConvenio.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Convenio" }));
        cbConvenio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbConvenioActionPerformed(evt);
            }
        });

        cbProveedor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Proveedor" }));
        cbProveedor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbProveedorActionPerformed(evt);
            }
        });

        cbIdConvenio.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "id convenio" }));

        cbIdProveedor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "rut proveedor" }));

        jButton1.setText("Excel");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        txBuscarCodigo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txBuscarCodigoKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txBuscarCodigoKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txBuscarCodigoKeyTyped(evt);
            }
        });

        jLabel3.setText("Código Producto");

        jLabel4.setText("Nombre Producto");

        txBuscarNombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txBuscarNombreKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txBuscarNombreKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txBuscarNombreKeyTyped(evt);
            }
        });

        jLabel5.setText(" Proveedor");

        txBuscarProveedor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txBuscarProveedorKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txBuscarProveedorKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txBuscarProveedorKeyTyped(evt);
            }
        });

        btLimpiar.setText("LIMPIAR");
        btLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLimpiarActionPerformed(evt);
            }
        });

        chk_ult_proveedor.setText("Rut Ult Proveedor");
        chk_ult_proveedor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chk_ult_proveedorActionPerformed(evt);
            }
        });

        btCrearOCP.setText("Crear OCP");
        btCrearOCP.setToolTipText("");
        btCrearOCP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCrearOCPActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbSaldos, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(txBuscarCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4))
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txBuscarNombre, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
                            .addComponent(txBuscarProveedor))))
                .addGap(149, 149, 149)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(cbProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbIdProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(cbConvenio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbIdConvenio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbContProductos)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btCargar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton1)
                                .addGap(18, 18, 18)
                                .addComponent(btCrearOCP, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(chk_ult_proveedor))
                .addContainerGap(352, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbSaldos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(txBuscarCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbConvenio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbIdConvenio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbContProductos))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txBuscarNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbIdProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btCargar)
                            .addComponent(jButton1)
                            .addComponent(btCrearOCP, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(4, 4, 4)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel5)
                                .addComponent(txBuscarProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(chk_ult_proveedor)))
                    .addComponent(btLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 34, 1353, 110));

        GrillaPrv.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        GrillaPrv.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "FECHA", "PROVEEDOR", "PROVEEDOR ASOCIADO", "VALOR"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(GrillaPrv);
        if (GrillaPrv.getColumnModel().getColumnCount() > 0) {
            GrillaPrv.getColumnModel().getColumn(0).setMinWidth(80);
            GrillaPrv.getColumnModel().getColumn(0).setPreferredWidth(80);
            GrillaPrv.getColumnModel().getColumn(0).setMaxWidth(80);
            GrillaPrv.getColumnModel().getColumn(1).setResizable(false);
            GrillaPrv.getColumnModel().getColumn(1).setPreferredWidth(250);
            GrillaPrv.getColumnModel().getColumn(2).setPreferredWidth(250);
            GrillaPrv.getColumnModel().getColumn(3).setResizable(false);
            GrillaPrv.getColumnModel().getColumn(3).setPreferredWidth(85);
        }

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(891, 436, 462, 245));

        GrillaPrvNegativos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Rut", "Proveedor", "Productos"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(GrillaPrvNegativos);
        if (GrillaPrvNegativos.getColumnModel().getColumnCount() > 0) {
            GrillaPrvNegativos.getColumnModel().getColumn(0).setMinWidth(80);
            GrillaPrvNegativos.getColumnModel().getColumn(0).setPreferredWidth(80);
            GrillaPrvNegativos.getColumnModel().getColumn(0).setMaxWidth(80);
            GrillaPrvNegativos.getColumnModel().getColumn(1).setPreferredWidth(250);
            GrillaPrvNegativos.getColumnModel().getColumn(2).setMinWidth(60);
            GrillaPrvNegativos.getColumnModel().getColumn(2).setPreferredWidth(80);
            GrillaPrvNegativos.getColumnModel().getColumn(2).setMaxWidth(80);
        }

        add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 170, 462, 190));

        btNuevaOC.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos16/New.png"))); // NOI18N
        btNuevaOC.setText("Nueva OC");
        btNuevaOC.setEnabled(false);
        btNuevaOC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btNuevaOCActionPerformed(evt);
            }
        });
        add(btNuevaOC, new org.netbeans.lib.awtextra.AbsoluteConstraints(891, 373, -1, -1));
        btNuevaOC.getAccessibleContext().setAccessibleDescription("");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Proveedores Asociados");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 150, -1, -1));

        Grilla.setAutoCreateRowSorter(true);
        Grilla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CODIGO", "NOMBRE", "PROVEEDOR", "UM", "INV.", "OC PROV.", "OC CLI.", "GUIAS", "TOTAL", "Fecha", "DIAS", "ULTIMO PRO", "DIAS CLIENTES", "OCP"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true, false, false, false, false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Grilla.getTableHeader().setReorderingAllowed(false);
        Grilla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                GrillaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Grilla);
        if (Grilla.getColumnModel().getColumnCount() > 0) {
            Grilla.getColumnModel().getColumn(0).setMinWidth(70);
            Grilla.getColumnModel().getColumn(0).setPreferredWidth(70);
            Grilla.getColumnModel().getColumn(0).setMaxWidth(70);
            Grilla.getColumnModel().getColumn(3).setMinWidth(50);
            Grilla.getColumnModel().getColumn(3).setPreferredWidth(50);
            Grilla.getColumnModel().getColumn(3).setMaxWidth(50);
            Grilla.getColumnModel().getColumn(4).setMinWidth(50);
            Grilla.getColumnModel().getColumn(4).setPreferredWidth(50);
            Grilla.getColumnModel().getColumn(4).setMaxWidth(50);
            Grilla.getColumnModel().getColumn(5).setMinWidth(60);
            Grilla.getColumnModel().getColumn(5).setPreferredWidth(60);
            Grilla.getColumnModel().getColumn(5).setMaxWidth(60);
            Grilla.getColumnModel().getColumn(6).setMinWidth(50);
            Grilla.getColumnModel().getColumn(6).setPreferredWidth(50);
            Grilla.getColumnModel().getColumn(6).setMaxWidth(50);
            Grilla.getColumnModel().getColumn(7).setMinWidth(50);
            Grilla.getColumnModel().getColumn(7).setPreferredWidth(50);
            Grilla.getColumnModel().getColumn(7).setMaxWidth(50);
            Grilla.getColumnModel().getColumn(8).setMinWidth(50);
            Grilla.getColumnModel().getColumn(8).setPreferredWidth(50);
            Grilla.getColumnModel().getColumn(8).setMaxWidth(50);
            Grilla.getColumnModel().getColumn(9).setMinWidth(0);
            Grilla.getColumnModel().getColumn(9).setPreferredWidth(0);
            Grilla.getColumnModel().getColumn(9).setMaxWidth(0);
            Grilla.getColumnModel().getColumn(10).setMinWidth(0);
            Grilla.getColumnModel().getColumn(10).setPreferredWidth(0);
            Grilla.getColumnModel().getColumn(10).setMaxWidth(0);
            Grilla.getColumnModel().getColumn(11).setMinWidth(0);
            Grilla.getColumnModel().getColumn(11).setPreferredWidth(0);
            Grilla.getColumnModel().getColumn(11).setMaxWidth(0);
            Grilla.getColumnModel().getColumn(12).setMinWidth(0);
            Grilla.getColumnModel().getColumn(12).setPreferredWidth(0);
            Grilla.getColumnModel().getColumn(12).setMaxWidth(0);
            Grilla.getColumnModel().getColumn(13).setMinWidth(40);
            Grilla.getColumnModel().getColumn(13).setPreferredWidth(40);
            Grilla.getColumnModel().getColumn(13).setMaxWidth(40);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 150, 880, 530));
    }// </editor-fold>//GEN-END:initComponents

    private void btCargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCargarActionPerformed
        buscarDatos();
        txBuscarNombre.setText("");
        txBuscarProveedor.setText("");
    }//GEN-LAST:event_btCargarActionPerformed
   
    public void buscarDatos(){
    ExeSql SqlEcona = new ExeSql();
    ExeSqlLuvaly SqlLuv = new ExeSqlLuvaly();
    ResultSet RsEcona = null;
    ResultSet RsLuv = null;
    String QueryEcona = "";
    String QueryLuv = "";
    
    DefaultTableModel tbModel = (DefaultTableModel) Grilla.getModel();
    String conv = "";
    String prov = "";
    
    if (cbProveedor.getSelectedIndex()>0)
        {
          prov = " and n.rut='"+cbIdProveedor.getSelectedItem()+"' ";  
        }
    else{
        prov="";
    }
    if (cbConvenio.getSelectedIndex()>0)
        {
        conv = " and p.convenio='"+cbIdConvenio.getSelectedItem()+"' ";
        }
    else{
        conv="";
    }
    
    
    if (conv.equals("") && prov.equals("")) {
//       chk_ult_proveedor.setSelected(true);
    }
    
    while(tbModel.getRowCount()>0)
          tbModel.removeRow(0);
    
        try {
            if (cbSaldos.getSelectedItem().toString().equals("Negativos")) {

                System.out.print("NEGATIVO!!!!");
                
                 QueryEcona = "select i.sku,p.nombre, n.nombre as nproveedor, u.um,i.stock as stock,i.ocp,i.occ,i.gdc," +
                         "i.stock+i.ocp+i.occ+i.gdc-case when p.minimo is null then 0 else p.minimo end as total,"+
                         "i.fnegativo,current_date-i.fnegativo as dias, (select trim(nombre) from proveedor where rut=p.rutultprv) as proveedor,\n" +
                         "max(current_date - cast(oc.femision as date)) as dias2, case when p.minimo is null then 0 else p.minimo end \n" +
                         "from inventario i\n" +
                         "left join producto p on i.sku=p.sku\n" +
                         "left join par_unidad u on p.unidad=u.codigo\n" +
                         "left join occhdet d on i.sku=d.sku and d.cantidad > d.separado + despachado\n" +
                         "left join occh oc on d.rut=oc.rut and d.codigo_oc=oc.codigo_oc and d.orden=oc.orden\n" +
                         " left join (select p.rut, p.nombre , d.sku\n" +
                         "                from ctacteprvdet d\n" +
                         "                left join ctacteprv e on e.tipdocto=d.tipdocto and d.nrodocto=e.nrodocto and d.rut=e.rut \n" +
                         "                left join proveedor p on e.rut=p.rut\n" +
                         "                where d.tipdocto='FAP' \n" +
                         "                group by  p.rut, p.nombre , d.sku LIMIT 1)  n\n" +
                         "      on n.sku=i.sku          " +
                         "  WHERE i.stock+i.ocp+i.occ+i.gdc < case when p.minimo is null then 0 else p.minimo end \n" + conv + prov ;                        

                 
                 
                 
                 
                 
                        if (!txBuscarCodigo.getText().equals("")){
                            QueryEcona = QueryEcona + " AND i.sku LIKE '"+ txBuscarCodigo.getText() + "%' " ;
                        }
                        
                        if (! txBuscarNombre.getText().equals("")){
                            QueryEcona = QueryEcona + " AND p.nombre LIKE '%"+ txBuscarNombre.getText() + "%' " ;
                        }
                        
                        if (! txBuscarProveedor.getText().equals("")){
                            QueryEcona = QueryEcona + " AND n.nombre LIKE '%"+ txBuscarProveedor.getText() + "%' " ;
                        }
                        
                 
                         //+ " AND p.rutultprv = n.rut" + 

                // if ((!conv.equals("") && prov.equals("")) || (conv.equals("") && prov.equals("")) ){
                        if (chk_ult_proveedor.isSelected() ){        
                            QueryEcona = QueryEcona + " AND p.rutultprv = n.rut";
                        }            
 
                        QueryEcona = QueryEcona + "  group by i.sku,p.nombre,n.nombre,u.um,i.stock,i.ocp,i.occ,i.gdc, i.stock+i.ocp+i.occ+i.gdc,i.fnegativo,i.fnegativo,p.rutultprv, case when p.minimo is null then 0 else p.minimo end,p.rutultprv \n" +
                        "  order by i.fnegativo";
                
                
                
            } else if (cbSaldos.getSelectedItem().toString().equals("Positivos")) {
                
                
                
                QueryEcona = "select i.sku,p.nombre, n.nombre as nproveedor,u.um,(select sp_get_inventarrio_sin_metros from sp_get_inventarrio_sin_metros(i.sku)) as stock,"+
                        "i.ocp,i.occ,i.gdc, "+
                        "(select sp_get_inventarrio_sin_metros from sp_get_inventarrio_sin_metros(i.sku))+i.ocp+i.occ+i.gdc-case when p.minimo is null then 0 else p.minimo end as total,"+
                        "i.fnegativo,current_date-i.fnegativo as dias, (select trim(nombre) from proveedor where rut=p.rutultprv) as proveedor,\n" +
                        "max(current_date - cast(oc.femision as date)) as dias2, case when p.minimo is null then 0 else p.minimo end \n" +
                        "from inventario i\n" +
                        "left join producto p on i.sku=p.sku\n" +
                        "left join par_unidad u on p.unidad=u.codigo\n" +
                        "left join occhdet d on i.sku=d.sku and d.cantidad > d.separado + despachado\n" +
                        "left join occh oc on d.rut=oc.rut and d.codigo_oc=oc.codigo_oc and d.orden=oc.orden\n" +
                        " left join (select p.rut, p.nombre , d.sku\n" +
                        "                from ctacteprvdet d\n" +
                        "                left join ctacteprv e on e.tipdocto=d.tipdocto and d.nrodocto=e.nrodocto and d.rut=e.rut \n" +
                        "                left join proveedor p on e.rut=p.rut\n" +
                        "                where d.tipdocto='FAP'\n" +
                        "                group by  p.rut, p.nombre , d.sku LIMIT 1) n\n" +
                        "      on n.sku=i.sku          ";
                        //"WHERE i.stock+i.ocp+i.occ+i.gdc>0 \n" + conv + prov +
                        QueryEcona = QueryEcona + " WHERE (select sp_get_inventarrio_sin_metros from sp_get_inventarrio_sin_metros(i.sku))+i.ocp+i.occ+i.gdc > case when p.minimo is null then 0 else p.minimo end \n" + conv + prov;
                        
                      if (!txBuscarCodigo.getText().equals("")){
                            QueryEcona = QueryEcona + " AND i.sku LIKE '"+ txBuscarCodigo.getText() + "%' " ;
                        }
                        
                        if (! txBuscarNombre.getText().equals("")){
                            QueryEcona = QueryEcona + " AND p.nombre LIKE '%"+ txBuscarNombre.getText() + "%' " ;
                        }
                        
                        if (! txBuscarProveedor.getText().equals("")){
                            QueryEcona = QueryEcona + " AND n.nombre LIKE '%"+ txBuscarProveedor.getText() + "%' " ;
                        }
                        
                                
                         //if ((!conv.equals("") && prov.equals("")) || (conv.equals("") && prov.equals("")) ){
                        //if ((conv.equals("") && prov.equals("")) ){        
                        if (chk_ult_proveedor.isSelected() ){        
                            QueryEcona = QueryEcona + " AND p.rutultprv = n.rut";
                        }     
                        //" AND p.rutultprv = n.rut" +
                        QueryEcona = QueryEcona + " group by i.sku,p.nombre,n.nombre,u.um,i.stock,i.ocp,i.occ,i.gdc, i.stock+i.ocp+i.occ+i.gdc,i.fnegativo,i.fnegativo,p.rutultprv,"+
                                        " case when p.minimo is null then 0 else p.minimo end ,p.rutultprv \n" +
                                        "order by i.fnegativo ";
                
            } else {
                    if (cbConvenio.getSelectedIndex()>0 && cbProveedor.getSelectedIndex()==0)
                        {
                        conv = "where p.convenio='"+cbIdConvenio.getSelectedItem()+"'";
                        }
                    else if (cbConvenio.getSelectedIndex()>0 && cbProveedor.getSelectedIndex()>0)
                        {
                        //conv = "where p.convenio='"+cbIdConvenio.getSelectedItem()+"' and p.rutultprv='"+cbIdProveedor.getSelectedItem()+"' ";
                        conv = "where p.convenio='"+cbIdConvenio.getSelectedItem()+"' and n.rut='"+cbIdProveedor.getSelectedItem()+"' ";
                        }
                    else if (cbConvenio.getSelectedIndex()==0 && cbProveedor.getSelectedIndex()>0)
                        {
                        //conv = "where p.rutultprv='"+cbIdProveedor.getSelectedItem()+"' ";
                         conv = "where n.rut ='"+cbIdProveedor.getSelectedItem()+"' ";
                        }
                    else{
                        conv="";
                    }
                
                    QueryEcona = "select i.sku,p.nombre, n.nombre as nproveedor,u.um,i.stock as stock,i.ocp,i.occ,i.gdc," +
                                 "i.stock+i.ocp+i.occ+i.gdc-case when p.minimo is null then 0 else p.minimo end as total," +
                                 "i.fnegativo,current_date-i.fnegativo as dias, (select trim(nombre) from proveedor where rut=p.rutultprv) as proveedor,\n" +
                                 "max(current_date - cast(oc.femision as date)) as dias2, case when p.minimo is null then 0 else p.minimo end \n" +
                                 "from inventario i\n" +
                                 "left join producto p on i.sku=p.sku\n" +
                                 "left join par_unidad u on p.unidad=u.codigo\n" +
                                 "left join occhdet d on i.sku=d.sku and d.cantidad > d.separado + despachado\n" +
                                 "left join occh oc on d.rut=oc.rut and d.codigo_oc=oc.codigo_oc and d.orden=oc.orden \n" +
                                 "left join (select p.rut, p.nombre , d.sku\n" +
                                 "                from ctacteprvdet d\n" +
                                 "                left join ctacteprv e on e.tipdocto=d.tipdocto and d.nrodocto=e.nrodocto and d.rut=e.rut \n" +
                                 "                left join proveedor p on e.rut=p.rut\n" +
                                 "                where d.tipdocto='FAP'\n" +
                                 "                group by  p.rut, p.nombre , d.sku LIMIT 1) n\n" +
                                 "      on n.sku=i.sku          "; 
                
                    if (!conv.equals("")){
                        QueryEcona = QueryEcona +  conv + " " + " ";
                       if (!txBuscarCodigo.getText().equals("")){
                            QueryEcona = QueryEcona + " AND i.sku LIKE '"+ txBuscarCodigo.getText() + "%' " ;
                        }
                        
                        if (! txBuscarNombre.getText().equals("")){
                            QueryEcona = QueryEcona + " AND p.nombre LIKE '%"+ txBuscarNombre.getText() + "%' " ;
                        }
                        
                        if (! txBuscarProveedor.getText().equals("")){
                            QueryEcona = QueryEcona + " AND n.nombre LIKE '%"+ txBuscarProveedor.getText() + "%' " ;
                        }
                        QueryEcona = QueryEcona + "group by i.sku,p.nombre,n.nombre,u.um,i.stock,i.ocp,i.occ,i.gdc, i.stock+i.ocp+i.occ+i.gdc,i.fnegativo,i.fnegativo,p.rutultprv, "+
                                        "case when p.minimo is null then 0 else p.minimo end, p.rutultprv \n";
                        QueryEcona = QueryEcona + " order by i.fnegativo  ";
                    }else{ 
                    
                        QueryEcona = QueryEcona + " Where i.sku is not null ";
                    
                     
                        
                         //if ((!conv.equals("") && prov.equals("")) || (conv.equals("") && prov.equals("")) ){
                         if (chk_ult_proveedor.isSelected() ){        
                            QueryEcona = QueryEcona + " AND p.rutultprv = n.rut";
                        }   
                    
                     if (!txBuscarCodigo.getText().equals("")){
                            QueryEcona = QueryEcona + " AND i.sku LIKE '"+ txBuscarCodigo.getText() + "%' " ;
                        }
                        
                        if (! txBuscarNombre.getText().equals("")){
                            QueryEcona = QueryEcona + " AND p.nombre LIKE '%"+ txBuscarNombre.getText() + "%' " ;
                        }
                        
                        if (! txBuscarProveedor.getText().equals("")){
                            QueryEcona = QueryEcona + " AND n.nombre LIKE '%"+ txBuscarProveedor.getText() + "%' " ;
                        }   
                            
                            
                    QueryEcona = QueryEcona + " group by i.sku,p.nombre,n.nombre,u.um,i.stock,i.ocp,i.occ,i.gdc, i.stock+i.ocp+i.occ+i.gdc,i.fnegativo,i.fnegativo,p.rutultprv, "+
                                              "case when p.minimo is null then 0 else p.minimo end, p.rutultprv \n";
                    QueryEcona = QueryEcona + "order by i.fnegativo  ";
                }
                
             }
            
            String nombre = "";
            
                RsEcona = SqlEcona.Select(QueryEcona);
            
           
                if (SqlEcona.GetRowCount() > 0){
             
                    while(RsEcona.next()){

                
                        QueryLuv = "SELECT nombre FROM producto WHERE sku = '"+RsEcona.getString("sku")+"'";
                        
                        RsLuv = SqlLuv.Select(QueryLuv);
                        
                        RsLuv.next();
                        
                        if (SqlLuv.GetRowCount() == 0){
                        
                            System.out.println("Producto "+RsEcona.getString("sku")+" No Existe en Luvaly!!" );
                            nombre = "No Existe";
                            
                        }else if (SqlLuv.GetRowCount() > 0) {
                            
                            nombre = RsLuv.getString("nombre");
                        
                        }
                        
                        
                        tbModel.addRow(new Object[]{ RsEcona.getString("sku"), 
//                                                   nombre,   
                                                     RsEcona.getString("proveedor"), 
                                                     RsEcona.getString("um"),
                                                     RsEcona.getDouble("stock"),
                                                     RsEcona.getDouble("ocp"),
                                                     RsEcona.getDouble("occ"),
                                                     RsEcona.getDouble("gdc"),
                                                     RsEcona.getDouble("total"),
                                                     RsEcona.getString("fnegativo"),
                                                     0,
                                                     0,
                                                     0,
                                                     false
                                                     
                        });
                        
                        
                    }
                }
             
            
            lbContProductos.setText(String.valueOf(Grilla.getRowCount()) + " Productos");
            CargaProveedoresegativos();
        
        } catch (SQLException ex) {
            
            LogError.Guardar(this.getClass().getSimpleName(),ex.getMessage());
            fmMain.Mensaje("Opppss existe un error");
            Logger.getLogger(pfControlInventario.class.getName()).log(Level.SEVERE, null, ex);
            
        }
        finally{
            SqlEcona.Close();
        }
    }
    
    private void CargaConvenios(){
        ExeSql Sql = new ExeSql();
        ResultSet Rs;
        try{
            Rs = Sql.Select("Select codigo, convenio from par_convenio");
            while (Rs.next())
                {
                cbConvenio.addItem(Rs.getString("convenio"));
                cbIdConvenio.addItem(Rs.getString("codigo"));
                }
        }
        catch (Exception e)
        {
            fmMain.Mensaje("Error al cargar convenios: "+e);
        }
       finally
        {
            Sql.Close();
        }
   }
   
    private void CargaProveedor(){
        ExeSql Sql = new ExeSql();
        ResultSet Rs;
        try{
            Rs = Sql.Select("Select rut, nombre from proveedor WHERE rut IN ('76231391','76440015','77479170','76363060')order by nombre");
            
            // 76363060    ANASAC
            // 77479170    TRAMONTINA
            // 76231391    LUVALY
            // 76440015    ECONA
            
            while (Rs.next()){
            
                cbProveedor.addItem(Rs.getString("nombre"));
                cbIdProveedor.addItem(Rs.getString("rut"));
            
            }
        }
        catch (Exception e)
        {
            fmMain.Mensaje("Error al cargar lista de proveedores: "+e);
        }
       finally
        {
            Sql.Close();
        }
       
       
    }
    
    
    
    private void CargaProveedores(){
        ExeSql Sql = new ExeSql();
        ResultSet Rs;
        DefaultTableModel Model = (DefaultTableModel)GrillaPrv.getModel();
        
        fmMain.LimpiaGrilla(Model);
            

        
        try {
            Rs = Sql.Select("select cast(e.femision as date) as femision,p.nombre,(select * from fn_get_proveedor_asociado(e.rut,e.nrodocto)) as proveedor_as,d.valorunitario\n" +
                            "from ctacteprvdet d\n" +
                            "left join ctacteprv e on e.tipdocto=d.tipdocto and d.nrodocto=e.nrodocto and d.rut=e.rut \n" +
                            "left join proveedor p on e.rut=p.rut\n" +
                            "where d.sku='"+ Grilla.getValueAt(Grilla.getSelectedRow(), 0).toString().trim() +"'\n" +
                            "and d.tipdocto='FAP' order by femision desc");
            while(Rs.next()){
                Model.addRow(new Object[]{
                            Rs.getString("femision").trim(),
                            Rs.getString("nombre").trim(),
                            Rs.getString("proveedor_as"),
                            fmMain.FormatoNumero(Rs.getDouble("valorunitario"))
                            
                        });
            }
        } catch (Exception e) {
        }finally{
            Sql.Close();
        }
    }
    private void btNuevaOCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btNuevaOCActionPerformed
        if (!GrillaPrvNegativos.getValueAt(GrillaPrvNegativos.getSelectedRow(), 0).toString().trim().equals(""))
            {
            //Mensaje(GrillaPrvNegativos.getValueAt(GrillaPrvNegativos.getSelectedRow(), 0).toString());
            pfNPProveedor PrvOC = new pfNPProveedor();
            pnPestanas.addTab("OC Proveedor         ", PrvOC);
            PanelTab btc=new PanelTab(pnPestanas,0);
            pnPestanas.setTabComponentAt(pnPestanas.indexOfComponent(PrvOC), btc);
            pnPestanas.setSelectedIndex(pnPestanas.getTabCount()-1);
            PrvOC.CargaNuevaOC(GrillaPrvNegativos.getValueAt(GrillaPrvNegativos.getSelectedRow(), 0).toString().trim());
            }
        else
            {
            Mensaje("Debe seleccionar un proveedor primero");
            btNuevaOC.setEnabled(false);
            }
    }//GEN-LAST:event_btNuevaOCActionPerformed

    private void cbConvenioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbConvenioActionPerformed
        cbIdConvenio.setSelectedIndex(cbConvenio.getSelectedIndex());
//        chk_ult_proveedor.setSelected(true);
        btCargar.doClick();
       
    }//GEN-LAST:event_cbConvenioActionPerformed

    private void cbProveedorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbProveedorActionPerformed
       
        cbIdProveedor.setSelectedIndex(cbProveedor.getSelectedIndex());

        if (contselec == 0){
             
          //  System.out.println("NO HAY EXISTEN ELEMENTOS SELECCIONADOS!!"+contselec);
            
            btCargar.doClick();
        
        }else if (contselec > 0) {
        
//             System.out.println("EL RUT ES :"+cbIdProveedor.getSelectedItem());
//             System.out.println("HAY ELEMENTOS SELECCIONADOS!!"+contselec);
        
        }
         
    }//GEN-LAST:event_cbProveedorActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    String nombre = "Control de Stock";    
    
    String ruta_local="";
    String carpeta = "temp";
    String sistema = System.getProperty("os.name").toLowerCase();

    
        if(Grilla.getRowCount()==0){
            fmMain.Mensaje("Nada que exportar");
            return;
        }

            List<JTable> tb=new ArrayList<>();
            List<String> nom=new ArrayList<>();
            tb.add(Grilla);
            String str_convenio="conv";
            String str_proveedor="prov";
          
            nom.add(nombre);
            
            //------------------  Rescata Ruta  -------------------------------
            // Objetivo: rescatar ruta de Windows y de Linux segun sea el caso para poder
            // Generar el archivo Esxcel en forma automatica
            File f = new File("");
                    if (sistema.contains("win"))
                    {
                         ruta_local = "c:/" + carpeta + "/";
                         f = new File(ruta_local.substring(0,ruta_local.length()-1));
                    }
                    else{
                          ruta_local = "/" + carpeta + "/";
                          //folder = new File(ruta_local);
                          f = new File(ruta_local);
                    }
//                    if (!folder.exists())
//                    {
//                        folder.mkdir();
//                    }
                    if(!f.isDirectory()) {
                    String newFolder = ruta_local; //cualquierCarpeta es el nombre de la Carpeta que vamos a crear
                    
                    File myNewFolder = new File(newFolder);
                    myNewFolder.mkdirs(); //creamos la carpeta
                   }
                    else
                   {
                          System.out.println("La carpeta ya estaba creada");
                   }
                    
            //------------------  Rescata Ruta  -------------------------------
            
//            File folder = new File("c:/temp");
//            if (!folder.exists())
//            {
//                folder.mkdir();
//            }
            
            
            
             String file = ruta_local + nombre + ".xls";       
            
            
            try {
                Exporter e = new Exporter(new File(file), tb, nom);
                
                if(e.export())

                //abrir(file);
                //Abrir_Doc(file);
                Utl_Excel.Abrir_Doc(file);
                
            } catch (Exception e) {
                fmMain.Mensaje(e.getMessage());
            }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void txBuscarCodigoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txBuscarCodigoKeyTyped

    }//GEN-LAST:event_txBuscarCodigoKeyTyped

    private void txBuscarNombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txBuscarNombreKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txBuscarNombreKeyTyped

    private void txBuscarProveedorKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txBuscarProveedorKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txBuscarProveedorKeyTyped

    private void btLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLimpiarActionPerformed
        Limpiar();
    }//GEN-LAST:event_btLimpiarActionPerformed

    private void txBuscarCodigoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txBuscarCodigoKeyPressed
        // TODO add your handling code here:
          if(evt.getKeyCode()== KeyEvent.VK_ENTER)
            btCargar.doClick();
    }//GEN-LAST:event_txBuscarCodigoKeyPressed

    private void txBuscarNombreKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txBuscarNombreKeyPressed
        // TODO add your handling code here:
               if(evt.getKeyCode()== KeyEvent.VK_ENTER)
                btCargar.doClick();
    }//GEN-LAST:event_txBuscarNombreKeyPressed

    private void txBuscarProveedorKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txBuscarProveedorKeyPressed
        // TODO add your handling code here:
               if(evt.getKeyCode()== KeyEvent.VK_ENTER)
                        btCargar.doClick();
    }//GEN-LAST:event_txBuscarProveedorKeyPressed

    private void txBuscarCodigoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txBuscarCodigoKeyReleased
        // TODO add your handling code here:
        txBuscarCodigo.setText(txBuscarCodigo.getText().toUpperCase());
    }//GEN-LAST:event_txBuscarCodigoKeyReleased

    private void txBuscarNombreKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txBuscarNombreKeyReleased
        // TODO add your handling code here:
        txBuscarNombre.setText(txBuscarNombre.getText().toUpperCase());
    }//GEN-LAST:event_txBuscarNombreKeyReleased

    private void txBuscarProveedorKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txBuscarProveedorKeyReleased
        // TODO add your handling code here:
        txBuscarProveedor.setText(txBuscarProveedor.getText().toUpperCase());
    }//GEN-LAST:event_txBuscarProveedorKeyReleased

    private void chk_ult_proveedorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chk_ult_proveedorActionPerformed
        // TODO add your handling code here:
        btCargar.doClick();
         
    }//GEN-LAST:event_chk_ult_proveedorActionPerformed

    private void btCrearOCPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCrearOCPActionPerformed
        
        
        if (contselec == 0){
         
            fmMain.Mensaje("No hay Productos Seleccionados!!");
            return;
         
        }
        
        if (cbProveedor.getSelectedIndex() == 0){
        
            fmMain.Mensaje("Debe elegir un Proveedor!!");
            return;
        
        }
        
        
        ExeSqlLuvaly  SqlLuv = new ExeSqlLuvaly();
        ExeSqlLuvaly  SqlLuv3 = new ExeSqlLuvaly();
        ResultSet Rs, Rs2, Rs3;
        String sku = "";
        double valor_uc = 0;
        double vunitario = 0;
        double cost_ref = 0;
        double cost_vent_neto1 = 0;
        
        //DefaultTableModel tbModel = (DefaultTableModel) Grilla.getModel();
        
        
        //********************************************************************************************************************************************              
            boolean agrega = false;
            int fila = 0;
            String Rut = "";
            Lista.clear();
            
            for(int i=0; i< Grilla.getRowCount(); i++){
             
                agrega = (boolean) Grilla.getValueAt(i,13);
                
                if (agrega){
                    
                    Lista.add(new ArrayList<String>());
                   
                    String sku2 = Grilla.getValueAt(i,0).toString();
                    String Nombre = Grilla.getValueAt(i,1).toString();
                    String Cantidad = Grilla.getValueAt(i,8).toString();
                    String UM = Grilla.getValueAt(i,3).toString();
                    
                    Lista.get(fila).add(0,sku2);
                    Lista.get(fila).add(1,Nombre);
                    Lista.get(fila).add(2,UM);
                    Lista.get(fila).add(3,Cantidad);
//                    
//                    System.out.println("EL SKU ES :"+Lista.get(fila).get(0));
//                    System.out.println("EL NOMBRE ES :"+Lista.get(fila).get(1));
//                    System.out.println("LA UNIDAD DE MEDIDAD ES :"+Lista.get(fila).get(2));
//                    System.out.println("LA CANTIDAD ES :"+Lista.get(fila).get(3));
//                    
                  //  Rut = Grilla.getValueAt(i, 14).toString().trim();
                    Rut = cbIdProveedor.getSelectedItem().toString().trim();
                    fila++;
                
                }  
            
            }
   //*************************************************************************************************************************************//      
        
        
        
        try {
            
            
        //    System.out.println("EL TAMAÑO DE LA LISTA ES :"+Lista.size());
            
            for(int i=0 ; i < Lista.size();i++){
            
                Rs = SqlLuv.Select("select p.sku,p.valultcompra \n" +
                                    "from producto p\n" +
                                    "where p.sku='" + Lista.get(i).get(0).toString().trim() + "'");
            
                if (SqlLuv.GetRowCount() > 0){
                    
                    Rs.next();
                
                    valor_uc = Rs.getDouble("valultcompra");
                    sku = Rs.getString("sku");
            
                    Rs3 = SqlLuv3.Select("SELECT ccd.sku, ccd.valorunitario, ccd.tipdocto, ccd.nrodocto FROM ctacteprvdet ccd\n" +
                                      "WHERE ccd.sku = '"+sku+"'\n" +
                                      "AND ccd.tipdocto IN ('OCP')\n" +
                                      "ORDER BY ccd.nrodocto DESC\n" +
                                      "LIMIT 1");
                    Rs3.next();
                
                    if (SqlLuv3.GetRowCount() > 0){
            
                        vunitario = Rs3.getDouble("valorunitario");
            
                    }else{
            
                        vunitario = 0;
            
                    }
            
            
                    if (valor_uc >= vunitario ){
            
                        cost_ref = valor_uc;
                
            
                    }else if (vunitario >= valor_uc) {
            
                        cost_ref = vunitario;      
            
                    }
            
           
                    cost_vent_neto1 = Math.round(cost_ref/0.94);
                    Lista.get(i).add(4,String.valueOf(cost_vent_neto1));        //Valor Unitario
            //        System.out.println("EL VALOR UNITARIO ES :"+Lista.get(i).get(4));
           
                }
            
            
            }    
              
              
            pfNPProveedor OCP = new pfNPProveedor();
            
            OCP.NuevaOcp(Rut, Lista);
            pnPestanas.addTab("OC Proveedor         ", OCP);
            PanelTab btc=new PanelTab(pnPestanas,0);
            pnPestanas.setTabComponentAt(pnPestanas.indexOfComponent(OCP), btc);
            pnPestanas.setSelectedIndex(pnPestanas.getTabCount()-1);
        
              
              
    //*******************************************************************************************************************************          
            
        
        } catch (SQLException ex) {
            Logger.getLogger(pfControlInventario.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_btCrearOCPActionPerformed

    private void GrillaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GrillaMouseClicked
        
         if(evt.getClickCount()==1){
         
             boolean selecciona = (boolean) Grilla.getValueAt(Grilla.getSelectedRow(),13);
             
             if (selecciona){
             
                 
                 contselec++;
             
             }else if (!selecciona) {
             
                 contselec--;
             
             }
             
             
             if (contselec > 0){
             
               System.out.println("HAY ELEMENTOS SELECCIONADOS!!"+contselec);
             
             }else if (contselec == 0){
             
                 System.out.println("NO EXISTEN ELEMENTOS SELECCIONADOS!!"+contselec);
                 
             }
             
         }
        
        
    }//GEN-LAST:event_GrillaMouseClicked
    
    
    public void abrir(String file ){
        
       try {
           String url = file;
           ProcessBuilder p = new ProcessBuilder();
           p.command("cmd.exe", "/c",url);
           p.start();
       } catch (IOException ex) {
           Logger.getLogger(jdOC_PendientesFac.class.getName()).log(Level.SEVERE, null, ex);
       }
        
    }
    
      public void Abrir_Doc(String file) throws IOException{
          File pathCompleto = new File(file);
          Desktop.getDesktop().open(pathCompleto); 
      }
      
      
    
    private void CargaProveedoresegativos(){
        ExeSql SqlEcona = new ExeSql();
        ResultSet RsEcona;
        DefaultTableModel Model = (DefaultTableModel)GrillaPrvNegativos.getModel();
        fmMain.LimpiaGrilla(Model);
        try {
            RsEcona = SqlEcona.Select("select max(p.rut)as rut,p.nombre,count(DISTINCT(i.Sku)) as conta\n" +
                            "from inventario i\n" +
                            "left join ctacteprvdet d on i.sku=d.sku\n" +
                            "left join proveedor p on d.rut=p.rut\n" +
                            "WHERE i.stock+i.ocp+i.occ+i.gdc<0 \n" +
                            "and p.nombre is not null\n" +
                            "group by p.nombre\n" +
                            "order by conta desc");
            while(RsEcona.next()){
                Model.addRow(new Object[]{RsEcona.getString("rut").trim(),RsEcona.getString("nombre").trim(),RsEcona.getInt("conta")});
            }
        } catch (SQLException e) {
            System.out.println(e.getMessage());
            Logger.getLogger(pfControlInventario.class.getName()).log(Level.SEVERE, null, e);
            
            
        }finally{
            SqlEcona.Close();
        }
    }
   private void CargaSkuAsociados(){
        ExeSql Sql = new ExeSql();
        ResultSet Rs;
        Grilla.clearSelection();
        try {
            System.out.println("select DISTINCT(i.sku) as sku\n" +
                            "from inventario i\n" +
                            "left join ctacteprvdet d on i.sku=d.sku\n" +
                            "left join proveedor p on d.rut=p.rut\n" +
                            "WHERE (select sp_get_inventarrio_sin_metros from sp_get_inventarrio_sin_metros(i.sku))+i.ocp+i.occ+i.gdc<0 \n" +
                            "and p.nombre is not null\n" +
                            "and p.rut=" + GrillaPrvNegativos.getValueAt(GrillaPrvNegativos.getSelectedRow(), 0).toString().trim());
            Rs = Sql.Select("select DISTINCT(i.sku) as sku\n" +
                            "from inventario i\n" +
                            "left join ctacteprvdet d on i.sku=d.sku\n" +
                            "left join proveedor p on d.rut=p.rut\n" +
                            "WHERE i.stock+i.ocp+i.occ+i.gdc<0 \n" +
                            "and p.nombre is not null\n" +
                            "and p.rut=" + GrillaPrvNegativos.getValueAt(GrillaPrvNegativos.getSelectedRow(), 0).toString().trim());
            while(Rs.next()){
                    for(int i=0; i<Grilla.getRowCount();i++){
                    if(Rs.getString("sku").trim().equals(Grilla.getValueAt(i, 0).toString().trim())){
                       // Grilla.getSelectionModel().setSelectionInterval(i, i);
                       Grilla.changeSelection(i, i, true,false);
                       System.out.println(Rs.getString("Sku"));
                       break;
                    }
                }
//System.out.println(Rs.getString("Sku"));
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }
    
//    public void buscaPorCodigo(){
//            ExeSql Sql = new ExeSql();
//    String Query;
//    DefaultTableModel tbModel = (DefaultTableModel) Grilla.getModel();
//    String conv = "";
//    String prov = "";
//    if (cbProveedor.getSelectedIndex()>0)
//        {
//        prov = " and p.rutultprv='"+cbIdProveedor.getSelectedItem()+"' ";
//        }
//    else{
//        prov="";
//    }
//    if (cbConvenio.getSelectedIndex()>0)
//        {
//        conv = " and p.convenio='"+cbIdConvenio.getSelectedItem()+"' ";
//        }
//    else{
//        conv="";
//    }
//    while(tbModel.getRowCount()>0)
//          tbModel.removeRow(0);
//    
//        try {
//            if (cbSaldos.getSelectedItem().toString().equals("Negativos")) {
//                Query = "select trim(i.sku),p.nombre, n.nombre, u.um,(select sp_get_inventarrio_sin_metros from sp_get_inventarrio_sin_metros(i.sku)) as stock,i.ocp,i.occ,i.gdc, (select sp_get_inventarrio_sin_metros from sp_get_inventarrio_sin_metros(i.sku))+i.ocp+i.occ+i.gdc-case when p.minimo is null then 0 else p.minimo end as total,i.fnegativo,current_date-i.fnegativo, (select trim(nombre) from proveedor where rut=p.rutultprv) as proveedor,\n" +
//                        "max(current_date - cast(oc.femision as date)) as dias2, case when p.minimo is null then 0 else p.minimo end \n" +
//                        "from inventario i\n" +
//                        "left join producto p on i.sku=p.sku\n" +
//                        "left join par_unidad u on p.unidad=u.codigo\n" +
//                        "left join occhdet d on i.sku=d.sku and d.cantidad > d.separado + despachado\n" +
//                        "left join occh oc on d.rut=oc.rut and d.codigo_oc=oc.codigo_oc and d.orden=oc.orden\n" +
//                         ", proveedor n\n" +
//                        //"WHERE i.stock+i.ocp+i.occ+i.gdc<0 \n" + conv + prov +
//                        "WHERE (select sp_get_inventarrio_sin_metros from sp_get_inventarrio_sin_metros(i.sku))+i.ocp+i.occ+i.gdc < case when p.minimo is null then 0 else p.minimo end \n" + conv + prov +    " AND p.rutultprv = n.rut AND i.sku = '"+ txBuscarCodigo.getText() + 
//                        "' group by i.sku,p.nombre,n.nombre,u.um,i.stock,i.ocp,i.occ,i.gdc, i.stock+i.ocp+i.occ+i.gdc,i.fnegativo,i.fnegativo,p.rutultprv, case when p.minimo is null then 0 else p.minimo end,p.rutultprv  \n" +
//                        "order by i.fnegativo";
//            } else if (cbSaldos.getSelectedItem().toString().equals("Positivos")) {
//                Query = "select trim(i.sku),p.nombre, n.nombre,u.um,(select sp_get_inventarrio_sin_metros from sp_get_inventarrio_sin_metros(i.sku)) as stock,i.ocp,i.occ,i.gdc, (select sp_get_inventarrio_sin_metros from sp_get_inventarrio_sin_metros(i.sku))+i.ocp+i.occ+i.gdc-case when p.minimo is null then 0 else p.minimo end as total,i.fnegativo,current_date-i.fnegativo, (select trim(nombre) from proveedor where rut=p.rutultprv) as proveedor,\n" +
//                        "max(current_date - cast(oc.femision as date)) as dias2, case when p.minimo is null then 0 else p.minimo end\n" +
//                        "from inventario i\n" +
//                        "left join producto p on i.sku=p.sku\n" +
//                        "left join par_unidad u on p.unidad=u.codigo\n" +
//                        "left join occhdet d on i.sku=d.sku and d.cantidad > d.separado + despachado\n" +
//                        "left join occh oc on d.rut=oc.rut and d.codigo_oc=oc.codigo_oc and d.orden=oc.orden\n" +
//                        ", proveedor n\n" +
//                        //"WHERE i.stock+i.ocp+i.occ+i.gdc>0 \n" + conv + prov +
//                        "WHERE (select sp_get_inventarrio_sin_metros from sp_get_inventarrio_sin_metros(i.sku))+i.ocp+i.occ+i.gdc > case when p.minimo is null then 0 else p.minimo end \n" + conv + prov + " AND p.rutultprv = n.rut AND i.sku = '"+ txBuscarCodigo.getText() +  
//                        "' group by i.sku,p.nombre,n.nombre,u.um,i.stock,i.ocp,i.occ,i.gdc, i.stock+i.ocp+i.occ+i.gdc,i.fnegativo,i.fnegativo,p.rutultprv, case when p.minimo is null then 0 else p.minimo end ,p.rutultprv \n" +
//                        "order by i.fnegativo ";
//            } else {
//                    if (cbConvenio.getSelectedIndex()>0 && cbProveedor.getSelectedIndex()==0)
//                        {
//                        conv = "where p.convenio='"+cbIdConvenio.getSelectedItem()+"'";
//                        }
//                    else if (cbConvenio.getSelectedIndex()>0 && cbProveedor.getSelectedIndex()>0)
//                        {
//                        conv = "where p.convenio='"+cbIdConvenio.getSelectedItem()+"' and p.rutultprv='"+cbIdProveedor.getSelectedItem()+"' ";
//                        }
//                    else if (cbConvenio.getSelectedIndex()==0 && cbProveedor.getSelectedIndex()>0)
//                        {
//                        conv = "where p.rutultprv='"+cbIdProveedor.getSelectedItem()+"' ";
//                        }
//                    else{
//                        conv="";
//                    }
//
//                
//                Query = "select trim(i.sku),p.nombre, n.nombre,u.um,(select sp_get_inventarrio_sin_metros from sp_get_inventarrio_sin_metros(i.sku)) as stock,i.ocp,i.occ,i.gdc, (select sp_get_inventarrio_sin_metros from sp_get_inventarrio_sin_metros(i.sku))+i.ocp+i.occ+i.gdc-case when p.minimo is null then 0 else p.minimo end as total,i.fnegativo,current_date-i.fnegativo, (select trim(nombre) from proveedor where rut=p.rutultprv) as proveedor,\n" +
//                        "max(current_date - cast(oc.femision as date)) as dias2, case when p.minimo is null then 0 else p.minimo end \n" +
//                        "from inventario i\n" +
//                        "left join producto p on i.sku=p.sku\n" +
//                        "left join par_unidad u on p.unidad=u.codigo\n" +
//                        "left join occhdet d on i.sku=d.sku and d.cantidad > d.separado + despachado\n" +
//                        "left join occh oc on d.rut=oc.rut and d.codigo_oc=oc.codigo_oc and d.orden=oc.orden\n" +
//                          ", proveedor n\n";
//                if (!conv.equals("")){
//                        Query = Query +  conv + " AND p.rutultprv = n.rut AND i.sku = '"+ txBuscarCodigo.getText() +  "' group by i.sku,p.nombre,n.nombre,u.um,i.stock,i.ocp,i.occ,i.gdc, i.stock+i.ocp+i.occ+i.gdc,i.fnegativo,i.fnegativo,p.rutultprv, case when p.minimo is null then 0 else p.minimo end, p.rutultprv \n";
//                         Query = Query + "order by i.fnegativo  ";
//                        }
//                else
//                { 
//                    Query = Query + " Where p.rutultprv = n.rut AND i.sku = '"+ txBuscarCodigo.getText() + "' group by i.sku,p.nombre,n.nombre,u.um,i.stock,i.ocp,i.occ,i.gdc, i.stock+i.ocp+i.occ+i.gdc,i.fnegativo,i.fnegativo,p.rutultprv, case when p.minimo is null then 0 else p.minimo end, p.rutultprv \n";
//                    Query = Query + "order by i.fnegativo  ";
//                }
//                
//                }
//                       
//            
//            
//            CargaGrilla.Carga(Query, tbModel);
//            lbContProductos.setText(String.valueOf(Grilla.getRowCount()) + " Productos");
//            CargaProveedoresegativos();
//        } catch (SQLException ex) {
//            LogError.Guardar(this.getClass().getSimpleName(),ex.getMessage());
//            fmMain.Mensaje("Opppss existe un error");
//        }
//        finally{
//            Sql.Close();
//        }
//    }
    
//    public void buscarNombreProducto(){
//    ExeSql Sql = new ExeSql();
//    String Query;
//    DefaultTableModel tbModel = (DefaultTableModel) Grilla.getModel();
//    String conv = "";
//    String prov = "";
//    String nombreProducto = txBuscarNombre.getText().toUpperCase().trim();
//    txBuscarNombre.setText(nombreProducto);
//    if (cbProveedor.getSelectedIndex()>0)
//        {
//        prov = " and p.rutultprv='"+cbIdProveedor.getSelectedItem()+"' ";
//        }
//    else{
//        prov="";
//    }
//    if (cbConvenio.getSelectedIndex()>0)
//        {
//        conv = " and p.convenio='"+cbIdConvenio.getSelectedItem()+"' ";
//        }
//    else{
//        conv="";
//    }
//    while(tbModel.getRowCount()>0)
//          tbModel.removeRow(0);
//    
//        try {
//            if (cbSaldos.getSelectedItem().toString().equals("Negativos")) {
//                Query = "select trim(i.sku),p.nombre, n.nombre, u.um,(select sp_get_inventarrio_sin_metros from sp_get_inventarrio_sin_metros(i.sku)) as stock,i.ocp,i.occ,i.gdc, (select sp_get_inventarrio_sin_metros from sp_get_inventarrio_sin_metros(i.sku))+i.ocp+i.occ+i.gdc-case when p.minimo is null then 0 else p.minimo end as total,i.fnegativo,current_date-i.fnegativo, (select trim(nombre) from proveedor where rut=p.rutultprv) as proveedor,\n" +
//                        "max(current_date - cast(oc.femision as date)) as dias2, case when p.minimo is null then 0 else p.minimo end \n" +
//                        "from inventario i\n" +
//                        "left join producto p on i.sku=p.sku\n" +
//                        "left join par_unidad u on p.unidad=u.codigo\n" +
//                        "left join occhdet d on i.sku=d.sku and d.cantidad > d.separado + despachado\n" +
//                        "left join occh oc on d.rut=oc.rut and d.codigo_oc=oc.codigo_oc and d.orden=oc.orden\n" +
//                         ", proveedor n\n" +
//                        //"WHERE i.stock+i.ocp+i.occ+i.gdc<0 \n" + conv + prov +
//                        "WHERE (select sp_get_inventarrio_sin_metros from sp_get_inventarrio_sin_metros(i.sku))+i.ocp+i.occ+i.gdc < case when p.minimo is null then 0 else p.minimo end \n" + conv + prov +    " AND p.rutultprv = n.rut AND p.nombre like '%"+ nombreProducto + "%'\n" +
//                        " group by i.sku,p.nombre,n.nombre,u.um,i.stock,i.ocp,i.occ,i.gdc, i.stock+i.ocp+i.occ+i.gdc,i.fnegativo,i.fnegativo,p.rutultprv, case when p.minimo is null then 0 else p.minimo end,p.rutultprv  \n" +
//                        "order by i.fnegativo";
//            } else if (cbSaldos.getSelectedItem().toString().equals("Positivos")) {
//                Query = "select trim(i.sku),p.nombre, n.nombre,u.um,(select sp_get_inventarrio_sin_metros from sp_get_inventarrio_sin_metros(i.sku)) as stock,i.ocp,i.occ,i.gdc, (select sp_get_inventarrio_sin_metros from sp_get_inventarrio_sin_metros(i.sku))+i.ocp+i.occ+i.gdc-case when p.minimo is null then 0 else p.minimo end as total,i.fnegativo,current_date-i.fnegativo, (select trim(nombre) from proveedor where rut=p.rutultprv) as proveedor,\n" +
//                        "max(current_date - cast(oc.femision as date)) as dias2, case when p.minimo is null then 0 else p.minimo end\n" +
//                        "from inventario i\n" +
//                        "left join producto p on i.sku=p.sku\n" +
//                        "left join par_unidad u on p.unidad=u.codigo\n" +
//                        "left join occhdet d on i.sku=d.sku and d.cantidad > d.separado + despachado\n" +
//                        "left join occh oc on d.rut=oc.rut and d.codigo_oc=oc.codigo_oc and d.orden=oc.orden\n" +
//                        ", proveedor n\n" +
//                        //"WHERE i.stock+i.ocp+i.occ+i.gdc>0 \n" + conv + prov +
//                        "WHERE (select sp_get_inventarrio_sin_metros from sp_get_inventarrio_sin_metros(i.sku))+i.ocp+i.occ+i.gdc > case when p.minimo is null then 0 else p.minimo end \n" + conv + prov + " AND p.rutultprv = n.rut AND p.nombre like '%"+ nombreProducto + "%'\n" + 
//                        "' group by i.sku,p.nombre,n.nombre,u.um,i.stock,i.ocp,i.occ,i.gdc, i.stock+i.ocp+i.occ+i.gdc,i.fnegativo,i.fnegativo,p.rutultprv, case when p.minimo is null then 0 else p.minimo end ,p.rutultprv \n" +
//                        "order by i.fnegativo ";
//            } else {
//                    if (cbConvenio.getSelectedIndex()>0 && cbProveedor.getSelectedIndex()==0)
//                        {
//                        conv = "where p.convenio='"+cbIdConvenio.getSelectedItem()+"'";
//                        }
//                    else if (cbConvenio.getSelectedIndex()>0 && cbProveedor.getSelectedIndex()>0)
//                        {
//                        conv = "where p.convenio='"+cbIdConvenio.getSelectedItem()+"' and p.rutultprv='"+cbIdProveedor.getSelectedItem()+"' ";
//                        }
//                    else if (cbConvenio.getSelectedIndex()==0 && cbProveedor.getSelectedIndex()>0)
//                        {
//                        conv = "where p.rutultprv='"+cbIdProveedor.getSelectedItem()+"' ";
//                        }
//                    else{
//                        conv="";
//                    }
//
//                
//                Query = "select trim(i.sku),p.nombre, n.nombre,u.um,(select sp_get_inventarrio_sin_metros from sp_get_inventarrio_sin_metros(i.sku)) as stock,i.ocp,i.occ,i.gdc, (select sp_get_inventarrio_sin_metros from sp_get_inventarrio_sin_metros(i.sku))+i.ocp+i.occ+i.gdc-case when p.minimo is null then 0 else p.minimo end as total,i.fnegativo,current_date-i.fnegativo, (select trim(nombre) from proveedor where rut=p.rutultprv) as proveedor,\n" +
//                        "max(current_date - cast(oc.femision as date)) as dias2, case when p.minimo is null then 0 else p.minimo end \n" +
//                        "from inventario i\n" +
//                        "left join producto p on i.sku=p.sku\n" +
//                        "left join par_unidad u on p.unidad=u.codigo\n" +
//                        "left join occhdet d on i.sku=d.sku and d.cantidad > d.separado + despachado\n" +
//                        "left join occh oc on d.rut=oc.rut and d.codigo_oc=oc.codigo_oc and d.orden=oc.orden\n" +
//                          ", proveedor n\n";
//                if (!conv.equals("")){
//                        Query = Query +  conv + " AND p.rutultprv = n.rut AND p.nombre like '%"+ nombreProducto + "%'\n" +  "' group by i.sku,p.nombre,n.nombre,u.um,i.stock,i.ocp,i.occ,i.gdc, i.stock+i.ocp+i.occ+i.gdc,i.fnegativo,i.fnegativo,p.rutultprv, case when p.minimo is null then 0 else p.minimo end, p.rutultprv \n";
//                         Query = Query + "order by i.fnegativo  ";
//                        }
//                else
//                { 
//                    Query = Query + " Where p.rutultprv = n.rut AND p.nombre like '%"+ nombreProducto + "%'\n" + "' group by i.sku,p.nombre,n.nombre,u.um,i.stock,i.ocp,i.occ,i.gdc, i.stock+i.ocp+i.occ+i.gdc,i.fnegativo,i.fnegativo,p.rutultprv, case when p.minimo is null then 0 else p.minimo end, p.rutultprv \n";
//                    Query = Query + "order by i.fnegativo  ";
//                }
//                
//                }
//                       
//            
//            
//            CargaGrilla.Carga(Query, tbModel);
//            lbContProductos.setText(String.valueOf(Grilla.getRowCount()) + " Productos");
//            CargaProveedoresegativos();
//        } catch (SQLException ex) {
//            LogError.Guardar(this.getClass().getSimpleName(),ex.getMessage());
//            fmMain.Mensaje("Opppss existe un error");
//        }
//        finally{
//            Sql.Close();
//        }
//    }
    
//    public void buscarProveedor(){
//    ExeSql Sql = new ExeSql();
//    String Query;
//    DefaultTableModel tbModel = (DefaultTableModel) Grilla.getModel();
//    String conv = "";
//    String prov = "";
//    String nombreProveedor = txBuscarProveedor.getText().toUpperCase().trim();
//    txBuscarProveedor.setText(nombreProveedor);
//    if (cbProveedor.getSelectedIndex()>0)
//        {
//        prov = " and p.rutultprv='"+cbIdProveedor.getSelectedItem()+"' ";
//        }
//    else{
//        prov="";
//    }
//    if (cbConvenio.getSelectedIndex()>0)
//        {
//        conv = " and p.convenio='"+cbIdConvenio.getSelectedItem()+"' ";
//        }
//    else{
//        conv="";
//    }
//    while(tbModel.getRowCount()>0)
//          tbModel.removeRow(0);
//    
//        try {
//            if (cbSaldos.getSelectedItem().toString().equals("Negativos")) {
//                Query = "select trim(i.sku),p.nombre, n.nombre, u.um,(select sp_get_inventarrio_sin_metros from sp_get_inventarrio_sin_metros(i.sku)) as stock,i.ocp,i.occ,i.gdc, (select sp_get_inventarrio_sin_metros from sp_get_inventarrio_sin_metros(i.sku))+i.ocp+i.occ+i.gdc-case when p.minimo is null then 0 else p.minimo end as total,i.fnegativo,current_date-i.fnegativo, (select trim(nombre) from proveedor where rut=p.rutultprv) as proveedor,\n" +
//                        "max(current_date - cast(oc.femision as date)) as dias2, case when p.minimo is null then 0 else p.minimo end \n" +
//                        "from inventario i\n" +
//                        "left join producto p on i.sku=p.sku\n" +
//                        "left join par_unidad u on p.unidad=u.codigo\n" +
//                        "left join occhdet d on i.sku=d.sku and d.cantidad > d.separado + despachado\n" +
//                        "left join occh oc on d.rut=oc.rut and d.codigo_oc=oc.codigo_oc and d.orden=oc.orden\n" +
//                         ", proveedor n\n" +
//                        //"WHERE i.stock+i.ocp+i.occ+i.gdc<0 \n" + conv + prov +
//                        "WHERE (select sp_get_inventarrio_sin_metros from sp_get_inventarrio_sin_metros(i.sku))+i.ocp+i.occ+i.gdc < case when p.minimo is null then 0 else p.minimo end \n" + conv + prov +    " AND p.rutultprv = n.rut AND n.nombre like '%"+ nombreProveedor + "%'\n" +
//                        " group by i.sku,p.nombre,n.nombre,u.um,i.stock,i.ocp,i.occ,i.gdc, i.stock+i.ocp+i.occ+i.gdc,i.fnegativo,i.fnegativo,p.rutultprv, case when p.minimo is null then 0 else p.minimo end,p.rutultprv  \n" +
//                        "order by i.fnegativo";
//            } else if (cbSaldos.getSelectedItem().toString().equals("Positivos")) {
//                Query = "select trim(i.sku),p.nombre, n.nombre,u.um,(select sp_get_inventarrio_sin_metros from sp_get_inventarrio_sin_metros(i.sku)) as stock,i.ocp,i.occ,i.gdc, (select sp_get_inventarrio_sin_metros from sp_get_inventarrio_sin_metros(i.sku))+i.ocp+i.occ+i.gdc-case when p.minimo is null then 0 else p.minimo end as total,i.fnegativo,current_date-i.fnegativo, (select trim(nombre) from proveedor where rut=p.rutultprv) as proveedor,\n" +
//                        "max(current_date - cast(oc.femision as date)) as dias2, case when p.minimo is null then 0 else p.minimo end\n" +
//                        "from inventario i\n" +
//                        "left join producto p on i.sku=p.sku\n" +
//                        "left join par_unidad u on p.unidad=u.codigo\n" +
//                        "left join occhdet d on i.sku=d.sku and d.cantidad > d.separado + despachado\n" +
//                        "left join occh oc on d.rut=oc.rut and d.codigo_oc=oc.codigo_oc and d.orden=oc.orden\n" +
//                        ", proveedor n\n" +
//                        //"WHERE i.stock+i.ocp+i.occ+i.gdc>0 \n" + conv + prov +
//                        "WHERE (select sp_get_inventarrio_sin_metros from sp_get_inventarrio_sin_metros(i.sku))+i.ocp+i.occ+i.gdc > case when p.minimo is null then 0 else p.minimo end \n" + conv + prov + " AND p.rutultprv = n.rut AND n.nombre like '%"+ nombreProveedor + "%'\n" +
//                        "' group by i.sku,p.nombre,n.nombre,u.um,i.stock,i.ocp,i.occ,i.gdc, i.stock+i.ocp+i.occ+i.gdc,i.fnegativo,i.fnegativo,p.rutultprv, case when p.minimo is null then 0 else p.minimo end ,p.rutultprv \n" +
//                        "order by i.fnegativo ";
//            } else {
//                    if (cbConvenio.getSelectedIndex()>0 && cbProveedor.getSelectedIndex()==0)
//                        {
//                        conv = "where p.convenio='"+cbIdConvenio.getSelectedItem()+"'";
//                        }
//                    else if (cbConvenio.getSelectedIndex()>0 && cbProveedor.getSelectedIndex()>0)
//                        {
//                        conv = "where p.convenio='"+cbIdConvenio.getSelectedItem()+"' and p.rutultprv='"+cbIdProveedor.getSelectedItem()+"' ";
//                        }
//                    else if (cbConvenio.getSelectedIndex()==0 && cbProveedor.getSelectedIndex()>0)
//                        {
//                        conv = "where p.rutultprv='"+cbIdProveedor.getSelectedItem()+"' ";
//                        }
//                    else{
//                        conv="";
//                    }
//
//                
//                Query = "select trim(i.sku),p.nombre, n.nombre,u.um,(select sp_get_inventarrio_sin_metros from sp_get_inventarrio_sin_metros(i.sku)) as stock,i.ocp,i.occ,i.gdc, (select sp_get_inventarrio_sin_metros from sp_get_inventarrio_sin_metros(i.sku))+i.ocp+i.occ+i.gdc-case when p.minimo is null then 0 else p.minimo end as total,i.fnegativo,current_date-i.fnegativo, (select trim(nombre) from proveedor where rut=p.rutultprv) as proveedor,\n" +
//                        "max(current_date - cast(oc.femision as date)) as dias2, case when p.minimo is null then 0 else p.minimo end \n" +
//                        "from inventario i\n" +
//                        "left join producto p on i.sku=p.sku\n" +
//                        "left join par_unidad u on p.unidad=u.codigo\n" +
//                        "left join occhdet d on i.sku=d.sku and d.cantidad > d.separado + despachado\n" +
//                        "left join occh oc on d.rut=oc.rut and d.codigo_oc=oc.codigo_oc and d.orden=oc.orden\n" +
//                          ", proveedor n\n";
//                if (!conv.equals("")){
//                        Query = Query +  conv + " AND p.rutultprv = n.rut AND n.nombre like '%"+ nombreProveedor + "%'\n" + "' group by i.sku,p.nombre,n.nombre,u.um,i.stock,i.ocp,i.occ,i.gdc, i.stock+i.ocp+i.occ+i.gdc,i.fnegativo,i.fnegativo,p.rutultprv, case when p.minimo is null then 0 else p.minimo end, p.rutultprv \n";
//                         Query = Query + "order by i.fnegativo  ";
//                        }
//                else
//                { 
//                    Query = Query + " Where p.rutultprv = n.rut AND n.nombre like '%"+ nombreProveedor + "%'\n" + "%'\n" + "' group by i.sku,p.nombre,n.nombre,u.um,i.stock,i.ocp,i.occ,i.gdc, i.stock+i.ocp+i.occ+i.gdc,i.fnegativo,i.fnegativo,p.rutultprv, case when p.minimo is null then 0 else p.minimo end, p.rutultprv \n";
//                    Query = Query + "order by i.fnegativo  ";
//                }
//                
//                }
//                       
//            
//            
//            CargaGrilla.Carga(Query, tbModel);
//            lbContProductos.setText(String.valueOf(Grilla.getRowCount()) + " Productos");
//            CargaProveedoresegativos();
//        } catch (SQLException ex) {
//            LogError.Guardar(this.getClass().getSimpleName(),ex.getMessage());
//            fmMain.Mensaje("Opppss existe un error");
//        }
//        finally{
//            Sql.Close();
//        }
//    }
    
    public void Limpiar(){
        txBuscarCodigo.setText("");
        txBuscarNombre.setText("");
        txBuscarProveedor.setText("");
        cbConvenio.setSelectedIndex(0);
        cbIdConvenio.setSelectedIndex(0);
        cbIdProveedor.setSelectedIndex(0);
        cbProveedor.setSelectedIndex(0);
        cbSaldos.setSelectedIndex(0);
        btCargar.doClick();
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Grilla;
    private javax.swing.JTable GrillaPrv;
    private javax.swing.JTable GrillaPrvNegativos;
    private javax.swing.JButton btCargar;
    private javax.swing.JButton btCrearOCP;
    private javax.swing.JButton btLimpiar;
    private javax.swing.JButton btNuevaOC;
    private javax.swing.JComboBox<String> cbConvenio;
    private javax.swing.JComboBox<String> cbIdConvenio;
    private javax.swing.JComboBox<String> cbIdProveedor;
    private javax.swing.JComboBox<String> cbProveedor;
    private javax.swing.JComboBox cbSaldos;
    private javax.swing.JCheckBox chk_ult_proveedor;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private org.jdesktop.swingx.JXLabel jXLabel1;
    private javax.swing.JLabel lbContProductos;
    private javax.swing.JPanel pnMenu;
    private javax.swing.JTextField txBuscarCodigo;
    private javax.swing.JTextField txBuscarNombre;
    private javax.swing.JTextField txBuscarProveedor;
    // End of variables declaration//GEN-END:variables
}
