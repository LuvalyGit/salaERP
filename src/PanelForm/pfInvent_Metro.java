/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package PanelForm;

import Conexion.ExeSql;
import Conexion.ExeSqlLuvaly;
import Dialogos.jdBuscaUbicacion;
import Dialogos.jdBuscarProductos;
import Dialogos.jdEntrada;
import Formularios.fmMain;
import Utilidades.ComboCodigos;
import Utilidades.Combo_CodStr;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.table.DefaultTableModel;
import Utilidades.FullSelectorListener;
import java.awt.Toolkit;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;

        
/**
 *
 * @author luvaly
 */
public class pfInvent_Metro extends javax.swing.JPanel {
public boolean booAgregando = false;    
public double en_ingreso=0.0;
public String nombrePalabra ="", StrUnidad ="";

DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
    /**
     * Creates new form AsignaUbicacion
     */
    public pfInvent_Metro() {
        initComponents();
        txEstado.setEditable(false);
        btLimpiaTodo.doClick();
        rightRenderer.setHorizontalAlignment(SwingConstants.RIGHT);
        Grilla_prod.getColumnModel().getColumn(2).setCellRenderer(rightRenderer);
        jPanelHasta.setBorder(javax.swing.BorderFactory.createTitledBorder("UBICACION HASTA"));
        CargaBodega();
        rbAutoma.setSelected(true);
        jPanel5.setVisible(false);
        txFolio.setEnabled(false);
        //nuevo_folio();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanelHasta = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txNombreUbica = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        btAdd = new javax.swing.JButton();
        txtSku = new javax.swing.JTextField();
        btMenos = new javax.swing.JButton();
        txtUbicacion = new javax.swing.JTextField();
        btTeclado = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtCant = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        btLimpiaTodo = new javax.swing.JButton();
        txNombre = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        cbBodega = new javax.swing.JComboBox<String>();
        cbRack = new javax.swing.JComboBox<String>();
        cbMetro = new javax.swing.JComboBox<String>();
        bt_hasta = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        Grilla_prod = new javax.swing.JTable();
        btEliminar_linea = new javax.swing.JButton();
        btEliminarTodo = new javax.swing.JButton();
        rbAutoma = new javax.swing.JRadioButton();
        rbManual = new javax.swing.JRadioButton();
        lblReg = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        btUbicacion = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txFolio = new javax.swing.JTextField();
        btAbreFolio = new javax.swing.JButton();
        btNuevo = new javax.swing.JButton();
        bt_Finalizar = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        txEstado = new javax.swing.JTextField();

        jPanelHasta.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel3.setText("Nombre");

        txNombreUbica.setEditable(false);
        txNombreUbica.setBackground(new java.awt.Color(255, 255, 255));
        txNombreUbica.setForeground(new java.awt.Color(0, 0, 255));
        txNombreUbica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txNombreUbicaActionPerformed(evt);
            }
        });

        jLabel13.setText("Cantidad");

        btAdd.setText("+");
        btAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAddActionPerformed(evt);
            }
        });

        txtSku.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
                txtSkuAncestorRemoved(evt);
            }
        });
        txtSku.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSkuActionPerformed(evt);
            }
        });
        txtSku.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSkuKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSkuKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSkuKeyTyped(evt);
            }
        });

        btMenos.setText("-");
        btMenos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btMenosActionPerformed(evt);
            }
        });

        txtUbicacion.setEnabled(false);
        txtUbicacion.setFocusable(false);
        txtUbicacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUbicacionActionPerformed(evt);
            }
        });
        txtUbicacion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtUbicacionKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtUbicacionKeyReleased(evt);
            }
        });

        btTeclado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/keyboard.png"))); // NOI18N
        btTeclado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btTecladoActionPerformed(evt);
            }
        });

        jLabel1.setText("Ubicacion");

        txtCant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCantActionPerformed(evt);
            }
        });
        txtCant.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCantKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCantKeyReleased(evt);
            }
        });

        jLabel2.setText("Sku");

        btLimpiaTodo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos16/erase16.png"))); // NOI18N
        btLimpiaTodo.setText("Limpiar");
        btLimpiaTodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLimpiaTodoActionPerformed(evt);
            }
        });

        txNombre.setEditable(false);
        txNombre.setBackground(new java.awt.Color(255, 255, 255));
        txNombre.setForeground(new java.awt.Color(255, 0, 0));

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("UBICACION"));

        cbBodega.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbBodegaActionPerformed(evt);
            }
        });

        cbRack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbRackActionPerformed(evt);
            }
        });

        cbMetro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbMetroActionPerformed(evt);
            }
        });

        bt_hasta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/Ok.png"))); // NOI18N
        bt_hasta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_hastaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cbBodega, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbRack, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbMetro, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bt_hasta, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bt_hasta, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cbBodega, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cbRack, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cbMetro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        Grilla_prod.setAutoCreateRowSorter(true);
        Grilla_prod.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cod", "Nombre", "Cant", "Graba", "Ingr", "Unidades", "Fecha", "Ubicacion", "cod_ubica", "Cant_Sist", "Diferencia"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Grilla_prod.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Grilla_prodMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(Grilla_prod);
        if (Grilla_prod.getColumnModel().getColumnCount() > 0) {
            Grilla_prod.getColumnModel().getColumn(0).setMinWidth(100);
            Grilla_prod.getColumnModel().getColumn(0).setPreferredWidth(100);
            Grilla_prod.getColumnModel().getColumn(0).setMaxWidth(150);
            Grilla_prod.getColumnModel().getColumn(1).setMinWidth(400);
            Grilla_prod.getColumnModel().getColumn(1).setPreferredWidth(400);
            Grilla_prod.getColumnModel().getColumn(1).setMaxWidth(500);
            Grilla_prod.getColumnModel().getColumn(2).setMinWidth(100);
            Grilla_prod.getColumnModel().getColumn(2).setPreferredWidth(100);
            Grilla_prod.getColumnModel().getColumn(2).setMaxWidth(150);
            Grilla_prod.getColumnModel().getColumn(3).setMinWidth(0);
            Grilla_prod.getColumnModel().getColumn(3).setPreferredWidth(0);
            Grilla_prod.getColumnModel().getColumn(3).setMaxWidth(0);
            Grilla_prod.getColumnModel().getColumn(4).setMinWidth(0);
            Grilla_prod.getColumnModel().getColumn(4).setPreferredWidth(0);
            Grilla_prod.getColumnModel().getColumn(4).setMaxWidth(0);
            Grilla_prod.getColumnModel().getColumn(5).setMinWidth(100);
            Grilla_prod.getColumnModel().getColumn(5).setPreferredWidth(100);
            Grilla_prod.getColumnModel().getColumn(5).setMaxWidth(150);
            Grilla_prod.getColumnModel().getColumn(6).setMinWidth(150);
            Grilla_prod.getColumnModel().getColumn(6).setPreferredWidth(150);
            Grilla_prod.getColumnModel().getColumn(6).setMaxWidth(180);
            Grilla_prod.getColumnModel().getColumn(7).setMinWidth(200);
            Grilla_prod.getColumnModel().getColumn(7).setPreferredWidth(200);
            Grilla_prod.getColumnModel().getColumn(7).setMaxWidth(300);
            Grilla_prod.getColumnModel().getColumn(8).setMinWidth(0);
            Grilla_prod.getColumnModel().getColumn(8).setPreferredWidth(0);
            Grilla_prod.getColumnModel().getColumn(8).setMaxWidth(0);
            Grilla_prod.getColumnModel().getColumn(9).setMinWidth(100);
            Grilla_prod.getColumnModel().getColumn(9).setPreferredWidth(100);
            Grilla_prod.getColumnModel().getColumn(9).setMaxWidth(150);
            Grilla_prod.getColumnModel().getColumn(10).setMinWidth(100);
            Grilla_prod.getColumnModel().getColumn(10).setPreferredWidth(100);
            Grilla_prod.getColumnModel().getColumn(10).setMaxWidth(150);
        }

        btEliminar_linea.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos16/Eliminar.png"))); // NOI18N
        btEliminar_linea.setText("Eliminar Linea");
        btEliminar_linea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEliminar_lineaActionPerformed(evt);
            }
        });

        btEliminarTodo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos16/trush16.png"))); // NOI18N
        btEliminarTodo.setText("Elimina Todo");
        btEliminarTodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEliminarTodoActionPerformed(evt);
            }
        });

        buttonGroup1.add(rbAutoma);
        rbAutoma.setText("Automatico");
        rbAutoma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbAutomaActionPerformed(evt);
            }
        });

        buttonGroup1.add(rbManual);
        rbManual.setText("Manual");
        rbManual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbManualActionPerformed(evt);
            }
        });

        lblReg.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblReg.setText("Reg");

        jButton1.setText("Busca Desc");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btUbicacion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos16/search16.png"))); // NOI18N
        btUbicacion.setToolTipText("Ubicación");
        btUbicacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btUbicacionActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Folio :");

        txFolio.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txFolio.setForeground(new java.awt.Color(0, 0, 255));
        txFolio.setText("S/N");

        btAbreFolio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos22/Open.png"))); // NOI18N
        btAbreFolio.setText("Abrir Folio");
        btAbreFolio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAbreFolioActionPerformed(evt);
            }
        });

        btNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos22/Order22.png"))); // NOI18N
        btNuevo.setText("Nuevo Folio");
        btNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btNuevoActionPerformed(evt);
            }
        });

        bt_Finalizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos22/Movimientos.png"))); // NOI18N
        bt_Finalizar.setText("Finalizar Folio");
        bt_Finalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_FinalizarActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Estado :");

        javax.swing.GroupLayout jPanelHastaLayout = new javax.swing.GroupLayout(jPanelHasta);
        jPanelHasta.setLayout(jPanelHastaLayout);
        jPanelHastaLayout.setHorizontalGroup(
            jPanelHastaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelHastaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelHastaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelHastaLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(jPanelHastaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelHastaLayout.createSequentialGroup()
                                .addGroup(jPanelHastaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelHastaLayout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txNombre))
                                    .addComponent(txNombreUbica)
                                    .addGroup(jPanelHastaLayout.createSequentialGroup()
                                        .addGroup(jPanelHastaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanelHastaLayout.createSequentialGroup()
                                                .addComponent(jLabel2)
                                                .addGap(20, 20, 20)
                                                .addComponent(txtSku, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(jButton1))
                                        .addGap(6, 6, 6)
                                        .addGroup(jPanelHastaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanelHastaLayout.createSequentialGroup()
                                                .addComponent(jLabel13)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtCant, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelHastaLayout.createSequentialGroup()
                                                .addGap(17, 17, 17)
                                                .addComponent(btMenos, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(btAdd)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btTeclado, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanelHastaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(rbManual)
                                            .addComponent(rbAutoma))
                                        .addGap(169, 169, 169)
                                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(jPanelHastaLayout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtUbicacion, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btUbicacion, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(585, 585, 585)))
                                .addGap(309, 309, 309))
                            .addGroup(jPanelHastaLayout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(txFolio, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(37, 37, 37)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btNuevo)
                                .addGap(29, 29, 29)
                                .addComponent(btAbreFolio)
                                .addGap(18, 18, 18)
                                .addComponent(bt_Finalizar)
                                .addGap(261, 261, 261))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelHastaLayout.createSequentialGroup()
                        .addComponent(lblReg, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanelHastaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btEliminar_linea, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btLimpiaTodo, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btEliminarTodo, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(112, 112, 112))
                    .addGroup(jPanelHastaLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1247, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanelHastaLayout.setVerticalGroup(
            jPanelHastaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelHastaLayout.createSequentialGroup()
                .addGroup(jPanelHastaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelHastaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(txEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelHastaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(txFolio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelHastaLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanelHastaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bt_Finalizar)
                            .addComponent(btNuevo)
                            .addComponent(btAbreFolio))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelHastaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btUbicacion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanelHastaLayout.createSequentialGroup()
                        .addGroup(jPanelHastaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtUbicacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(5, 5, 5)
                .addComponent(txNombreUbica, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelHastaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelHastaLayout.createSequentialGroup()
                        .addGroup(jPanelHastaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelHastaLayout.createSequentialGroup()
                                .addGroup(jPanelHastaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanelHastaLayout.createSequentialGroup()
                                        .addGroup(jPanelHastaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel13)
                                            .addComponent(txtCant, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtSku, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanelHastaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(btMenos)
                                            .addComponent(btAdd)
                                            .addComponent(jButton1)))
                                    .addComponent(jLabel2)
                                    .addComponent(btTeclado, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(11, 11, 11))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelHastaLayout.createSequentialGroup()
                                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                        .addGroup(jPanelHastaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)))
                    .addGroup(jPanelHastaLayout.createSequentialGroup()
                        .addComponent(rbAutoma)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbManual)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanelHastaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblReg, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btLimpiaTodo, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btEliminar_linea, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btEliminarTodo, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelHasta, javax.swing.GroupLayout.PREFERRED_SIZE, 1275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(349, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelHasta, javax.swing.GroupLayout.PREFERRED_SIZE, 543, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(428, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtSkuKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSkuKeyPressed
    
    if(evt.getKeyCode() == KeyEvent.VK_ENTER){
           nombrePalabra =txtSku.getText().trim() + Character.toString(evt.getKeyChar());
           if (nombrePalabra.substring(0,3).trim().equals("LVL") || nombrePalabra.substring(0,4).trim().equals("TRAN")|| nombrePalabra.substring(0,3).trim().equals("INV")   ) {
               //trae_ubicacion(nombrePalabra);
               txtSku.setText("");
           nombrePalabra = nombrePalabra.trim();
               txtUbicacion.setText(nombrePalabra);
               trae_ubicacion(nombrePalabra);
               Carga_Prod_Ubicacion_Folio(nombrePalabra,1,txFolio.getText().trim());
               txtSku.requestFocus();
               return;   }
            else{
                   carga_producto();
                }
    }
        
        
    }//GEN-LAST:event_txtSkuKeyPressed

  private void trae_ubicacion (String Ubica){
          ExeSql Sql = new ExeSql();
        ResultSet Rs, Rs1;
        String Query2 ;
        String strUbicacion = "";
        
         try{         
                strUbicacion = Ubica.trim();
                String ubicaArray[] = strUbicacion.split("\\.");
                    
//                Query2 = "SELECT (b.bodega ||' - '|| r.rack ||' - '|| m.metro) as ubc\n" +
//                    " from mt_bodega b, mt_rack r, mt_metro m\n" +
//                    " where b.codigo='" + ubicaArray[0] + "' and r.codigo= " + ubicaArray[1] +  " and m.codigo= " + ubicaArray[2] + "  and m.rack=" + ubicaArray[1];   
                
                Query2 = "SELECT nombre AS ubc FROM mt_codmetro WHERE codmetro = '"+strUbicacion+"'";   
                
                Rs1 = Sql.Select(Query2);
                if (Rs1.next()){
                    strUbicacion =Rs1.getString("ubc").trim();

                    txNombreUbica.setText(strUbicacion);
                        //Carga_Prod_Ubicacion(Ubica,1);
                }   
                else
                {  Toolkit.getDefaultToolkit().beep(); 
                   fmMain.Mensaje("Ubicacion no encontrada, favor revise la ubicación");
                   limpia_all();
                }
        }
     catch (Exception e) {
            System.out.println(e.getMessage());
        } finally{
            Sql.Close();
        }               
    }
    



//-------------------  Carga Combnobox ---------------------------------------
 public void CargaBodega(){
        DefaultComboBoxModel value;
        ExeSql Sql = new ExeSql();
        ResultSet Rs;
        String Query="";
        cbBodega.removeAllItems();
        int i=0;
        value =new DefaultComboBoxModel();
        try {
            Query=" select codigo, bodega from mt_bodega order by codigo;";
            Rs = Sql.Select(Query);
            if(Sql.GetRowCount()==0) return;
           value.addElement(new Combo_CodStr("Seleccione","",0));     
           while(Rs.next()){
            value.addElement(new Combo_CodStr(Rs.getString("bodega").trim(),Rs.getString("codigo").trim(),i));
            System.out.println(Rs.getString("bodega").trim());
            i++;
           } 
           cbBodega.setModel(value);
           cbBodega.setSelectedIndex(0);
         
           

        } catch (Exception e) {
            System.out.println(e);
        }
        finally{
            Sql.Close();
        }
     }
     
     
     public void CargaRack(){
        DefaultComboBoxModel value;
        ExeSql Sql = new ExeSql();
        ResultSet Rs;
        String Query="";
        cbRack.removeAllItems();
        int i=0;
        
//        CboProveedor.addItem("<Todos>");  
//        CboProveedor.setSelectedIndex(0);
        value =new DefaultComboBoxModel();
        try {
           
            Query=" Select r.rack, r.codigo from mt_rack r \n" +
                  " where r.bodega = (select b.codigo from mt_bodega b where b.bodega='"+cbBodega.getSelectedItem().toString().trim()+"')";
            
            Rs = Sql.Select(Query);
            if(Sql.GetRowCount()==0) return;
             value.addElement(new ComboCodigos("Seleccione",0)); 
           while(Rs.next()){
            value.addElement(new ComboCodigos(Rs.getString("rack").trim(),Rs.getInt("codigo")));
            System.out.println(Rs.getString("rack").trim());
            i++;
           } 
           cbRack.setModel(value);
           
           if (cbRack.getSelectedIndex()>0){
                    cbRack.setSelectedIndex(0);}
           
        } catch (Exception e) {
            System.out.println(e);
        }
        finally{
            Sql.Close();
        }
     }
     
     
     public void CargaMetro(){
        DefaultComboBoxModel value;
        ExeSql Sql = new ExeSql();
        ResultSet Rs;
        String Query="";
        cbMetro.removeAllItems();

        value =new DefaultComboBoxModel();
        try {
            String strbodega="";

               if ((cbRack.getSelectedIndex()>0) && (cbBodega.getSelectedIndex()>0)){
                   
                        Combo_CodStr bodega = (Combo_CodStr) cbBodega.getSelectedItem();
                        bodega.getId(); 
                        
                        ComboCodigos RackCodigo = (ComboCodigos) cbRack.getSelectedItem();
                        RackCodigo.getId();
            
                      
                         
                     Query =" Select m.metro,m.codigo from mt_bodega b\n" +
                    " left join mt_rack r\n" +
                    " on b.codigo = r.bodega\n" +
                    " left join mt_metro m\n" +
                    " on m.rack = r.codigo\n" +
                    " where m.rack =" + RackCodigo.getId() + " and r.bodega = '" + bodega.getId() +"' order by m.codigo;";    
                   } 
               else
               {
                   return;
               }
            
            Rs = Sql.Select(Query);
            if(Sql.GetRowCount()==0) return;
             value.addElement(new ComboCodigos("Seleccione",0)); 
           while(Rs.next()){
            value.addElement(new ComboCodigos(Rs.getString("metro").trim(),Rs.getInt("codigo")));
            System.out.println(Rs.getString("metro").trim());
            
           } 
           cbMetro.setModel(value);
           cbMetro.setSelectedIndex(0);
           
           
        } catch (Exception e) {
            System.out.println(e);
        }
        finally{
            Sql.Close();
        }
     }    
//  -------------------  Agrega la carga de combos en Ubicacion Original----------------------------
     
//-----------------------------------------------------------------------------------------------
     
    private String  existe_sku(String Codigo){
    ExeSql Sql = new ExeSql();
        ResultSet Rs1;
        String Query2 ="";
        String strUbicacion = "";
        
         try{
         
          Query2 = "select * from mt_producto_auditoria where sku = '" + Codigo + "'";
            Rs1 = Sql.Select(Query2);
                     if (Rs1.next()){
                        return(Rs1.getString("sku"));
                     }   
         }
     catch (Exception e) {
            System.out.println(e.getMessage());
        } finally{
            Sql.Close();
        }          
        return(""); 
    }
    
    
    private double[]  trae_cant(String ubica, String sku){
    ExeSql Sql = new ExeSql();
        ResultSet Rs1;
        String Query2,Query;
        String strUbicacion = "";
        double Cant = 0,stock = 0;
        
        double[] valores = new double[5];
         try{
         
          Query2 = "select ubicacion,sku,cant from mt_productos where sku = '" + sku + "' and ubicacion = '" + ubica + "';";
            Rs1 = Sql.Select(Query2);
                     if (Rs1.next()){
                        Cant=Rs1.getDouble("cant");
                     }   
                     
          Query = "select stock from inventario  where sku = '" + sku + "';";
            Rs1 = Sql.Select(Query);
                     if (Rs1.next()){
                        stock =Rs1.getDouble("stock");
                     }              
                 valores[0] = Cant;
                 valores[1] = stock;
           
         }
     catch (Exception e) {
            System.out.println(e.getMessage());
        } finally{
            Sql.Close();
           return(valores); 
        }          
      
    }
    
    private void agrega_linea(){
    
    ExeSql Sql = new ExeSql();
    ResultSet Rs;
    String Query, qryIns, qryUpd,Sku,Ubicacion,Ubicacion2, StUsuario ;
    Ubicacion ="";
    Ubicacion2 ="";
    double cantidad_grilla_ins=0.0;    

        
        String codigo="";
        int pos = -1;
        double  cant_picking=0.00;
        double  cant_picking2=0.00;
        double cant_ingresa=0.00;

        DefaultTableModel TableModel = (DefaultTableModel) Grilla_prod.getModel();
        
         //---- Inicio----------------------------
        // Queda seteado para grabar
        if  (booAgregando == false)
        {
        for (int i=0; i<=Grilla_prod.getRowCount()-1; i++ ){
                   Grilla_prod.setValueAt("NO", i, 3);
                   Grilla_prod.setValueAt("0", i, 4);
                }
        booAgregando = true;
        Grilla_prod.changeSelection(0, 0 , false, false);
        en_ingreso=0.0;
        fmMain.SetEstado(fmMain.pnPestanas.getSelectedIndex(), 0);
        }
        //----------------------------------------
        
        
                 
        // Busca si el codigo se ha ingresado anteriormente en la grilla
        for (int i=0; i<=Grilla_prod.getRowCount()-1; i++ ){
                codigo= Grilla_prod.getValueAt(i, 0).toString().trim();
                Ubicacion2 = Grilla_prod.getValueAt(i, 8).toString().trim();
                if (codigo.equals(txtSku.getText().trim()) && Ubicacion2.equals(txtUbicacion.getText().trim())  ){
                    pos = i;
                    break;
                }
            }
         // Si existe el codigo en la grilla modificara la cantidad ingresada
        if (pos>=0){
         
                Grilla_prod.changeSelection(pos, 0 , false, false);
                cant_ingresa = Double.parseDouble(fmMain.SetGuardar(txtCant.getText().trim()));
                cant_picking = Double.valueOf(fmMain.SetGuardar(Grilla_prod.getValueAt(Grilla_prod.getSelectedRow(), 2).toString().trim()));
                cant_picking2 = Double.valueOf(fmMain.SetGuardar(Grilla_prod.getValueAt(Grilla_prod.getSelectedRow(), 4).toString().trim()));
                    
                    cant_picking = cant_picking + cant_ingresa;
                    en_ingreso = cant_picking2 + cant_ingresa;
                    Grilla_prod.setValueAt(en_ingreso, pos, 4);
                    Grilla_prod.setValueAt(cant_picking, pos, 2);
                    Grilla_prod.setValueAt("SI", pos, 3);
                    fmMain.SetEstado(fmMain.pnPestanas.getSelectedIndex(), 1);
                    // Falta por pickear Grilla_prod.setValueAt(cant_solicitada-cant_picking, pos, 5); 
                    // Marca lo pickeado Grilla_prod.setValueAt(1, pos, 6);
                    txtSku.setText(""); // Asigno SKU vacio para leer el otro codigo
                    return;
                    
                }
        else
        {
            TableModel.addRow(new Object[]{txtSku.getText().trim()  ,txNombre.getText().trim() ,txtCant.getText().trim() ,"INS","0", StrUnidad.trim()});
                           
//--------------------------------------------------------------------
                        Sku= txtSku.getText().trim() ;
                        Ubicacion = txtUbicacion.getText().trim();
                        StUsuario = fmMain.GetUsuario();

                  try
                    {      
                        
                        double[] valores = trae_cant(Ubicacion, Sku);
                        
                        qryIns = "insert into mt_producto_auditoria (ubicacion,sku,usuario,cant,folio,usuario_mod,fecha_mod,cant_metro,stock)\n" +
                        " values ('" + Ubicacion + "','" + Sku + "','" + StUsuario +  "'," + txtCant.getText().trim() + "," + txFolio.getText().trim() + 
                               ",'" + fmMain.GetUsuario() + "',now()," + valores[0]  + "," + valores[1] + ");";
                        Sql.ExeSql(qryIns);
                        
                    }
                catch (Exception e) {
                       System.out.println(e.getMessage());
                   } finally
                    {
                       Sql.Close();
                    }                
//__________------------------------------------------------------------------
            
        }
        //TableModel.addRow(new Object[]{txtSku.getText().trim(), txNombre.getText().trim()});
         txtSku.setText("");
         txNombre.setText("");
         txtSku.requestFocus();
    }
    
    private void txtUbicacionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUbicacionKeyPressed
        // TODO add your handling code here:
        ExeSql Sql = new ExeSql();
        ResultSet Rs, Rs1;
        String Query2 ;
        String strUbicacion = "";
        
         try{ 
                   if(evt.getKeyCode() == KeyEvent.VK_ENTER){
                    strUbicacion = txtUbicacion.getText();
                 String nombrePalabra =strUbicacion + Character.toString(evt.getKeyChar());    
                 
                 String ubicaArray[] = strUbicacion.split("\\.");
                 if (ubicaArray.length<3 ){
                        Toolkit.getDefaultToolkit().beep(); 
                        fmMain.Mensaje("Favor revise el codigo, no es de Ubicacion");
                         
                        txtUbicacion.setText("");
                        txNombreUbica.setText("");
                        txtUbicacion.requestFocus();
                        return;   
                 } 
                 
                 
                if (nombrePalabra.substring(0,3).trim().equals("LVL") || nombrePalabra.substring(0,4).trim().equals("TRAN")){
                    System.out.println("Codigo Correcto de Ubicacion");
                }
                else
                { 
                        Toolkit.getDefaultToolkit().beep(); 
                        fmMain.Mensaje("Favor revise el codigo, no es de Ubicacion");
                        
                        txtUbicacion.setText("");
                        txNombreUbica.setText("");
                        txtUbicacion.requestFocus();
                        return;   
                }
                    
//                 Query2 = "SELECT (b.bodega ||' - '|| r.rack ||' - '|| m.metro) as ubc\n" +
//                          " from mt_bodega b, mt_rack r, mt_metro m\n" +
//                          " where b.codigo='" + ubicaArray[0] + "' and r.codigo= " + ubicaArray[1] +  " and m.codigo= " + ubicaArray[2] + "  and m.rack=" + ubicaArray[1];   
                          
                 Query2 = "SELECT nombre AS ubc FROM mt_codmetro WHERE codmetro = '"+strUbicacion+"'";           
                          
                         Rs1 = Sql.Select(Query2);
                         if (Rs1.next()){
                            strUbicacion =Rs1.getString("ubc").trim();
                            txNombreUbica.setText(strUbicacion);
                            Carga_Prod_Ubicacion_Folio(txtUbicacion.getText().trim(),1,txFolio.getText().trim());
                         }   
                     else
                     {  
                         Toolkit.getDefaultToolkit().beep(); 
                         fmMain.Mensaje("Ubicacion no encontrada, favor revise la ubicación");
                        
                     }
                      
                 
                } 
            }
     catch (Exception e) {
            System.out.println(e.getMessage());
        } finally{
            Sql.Close();
        }    
    }//GEN-LAST:event_txtUbicacionKeyPressed

    
    private void ubicacion_enter(){
         // TODO add your handling code here:
        ExeSql Sql = new ExeSql();
        ResultSet Rs, Rs1;
        String Query2 ;
        String strUbicacion = "";
        
         try{ 

                 strUbicacion = txtUbicacion.getText();
                 nombrePalabra=strUbicacion;
                 String ubicaArray[] = strUbicacion.split("\\.");
                 if (ubicaArray.length<3 ){
                        Toolkit.getDefaultToolkit().beep(); 
                        fmMain.Mensaje("Favor revise el codigo, no es de Ubicacion");
                         
                        txtUbicacion.setText("");
                        txNombreUbica.setText("");
                        txtUbicacion.requestFocus();
                        return;   
                 } 
                 
                 
                if (nombrePalabra.substring(0,3).trim().equals("LVL") || nombrePalabra.substring(0,4).trim().equals("TRAN")){
                    System.out.println("Codigo Correcto de Ubicacion");
                }
                else
                { 
                        Toolkit.getDefaultToolkit().beep(); 
                        fmMain.Mensaje("Favor revise el codigo, no es de Ubicacion");
                        
                        txtUbicacion.setText("");
                        txNombreUbica.setText("");
                        txtUbicacion.requestFocus();
                        return;   
                }
                    
//                 Query2 = "SELECT (b.bodega ||' - '|| r.rack ||' - '|| m.metro) as ubc\n" +
//                    " from mt_bodega b, mt_rack r, mt_metro m\n" +
//                    " where b.codigo='" + ubicaArray[0] + "' and r.codigo= " + ubicaArray[1] +  " and m.codigo= " + ubicaArray[2] + "  and m.rack=" + ubicaArray[1];   
                 
                 Query2 = "SELECT nombre AS ubc FROM mt_codmetro WHERE codmetro = '"+strUbicacion+"'";   
                 
                 Rs1 = Sql.Select(Query2);
                     if (Rs1.next()){
                        strUbicacion =Rs1.getString("ubc").trim();
                        txNombreUbica.setText(strUbicacion);
                        //Carga_Prod_Ubicacion_Folio(txtUbicacion.getText().trim(),1,txFolio.getText().trim());
                     }   
                     else
                     {  
                         Toolkit.getDefaultToolkit().beep(); 
                         fmMain.Mensaje("Ubicacion no encontrada, favor revise la ubicación");
                        
                     }
            }
     catch (Exception e) {
            System.out.println(e.getMessage());
        } finally{
            Sql.Close();
        }    
    }
    
    
    private void grabar(){
    DefaultTableModel TableModel = (DefaultTableModel) Grilla_prod.getModel();
    ExeSql Sql = new ExeSql();
    ResultSet Rs;
    String Query, qryIns, qryUpd,Sku,Ubicacion,StUsuario ;
    Ubicacion ="";
    double cantidad_grilla_ins=0.0;
    boolean grabo = false;
    
    
    
    
    try{ 
        
        if (txFolio.getText().trim().equals("S/N")){
            fmMain.Mensaje("Debe ingresar un folio valido");
            return;
        }
        
        
        
        if (txtCant.getText().equals("")){
            Toolkit.getDefaultToolkit().beep(); 
            fmMain.Mensaje("Debe ingresar cantidad al producto");
            txtCant.requestFocus();
         
            return;
        }
        
        
        for (int i=0; i<=Grilla_prod.getRowCount()-1; i++ ){
            if (Grilla_prod.getValueAt(i, 3).toString().trim()=="SI")
            {
                grabo = true;
                break;
                
            }
            else 
            {
               grabo = false; 
            }
        }
        
        for (int i=0; i<=Grilla_prod.getRowCount()-1; i++ ){
                    if (Grilla_prod.getValueAt(i, 3).toString().trim()=="SI")
                    {   
                        Sku= Grilla_prod.getValueAt(i, 0).toString().trim();
                        Ubicacion = txtUbicacion.getText().trim();
                        StUsuario = fmMain.GetUsuario();

                          double[] valores = trae_cant(Ubicacion, Sku);
                        
                        qryIns = " update  mt_producto_auditoria set cant = " +  Double.valueOf(fmMain.SetGuardar(Grilla_prod.getValueAt(i, 2).toString().trim())) + ",\n" +
                                 "  usuario_mod ='" +fmMain.GetUsuario() + "', fecha_mod = now(), ubica_origen ='" + "Auditoria Up" + "', cant_metro = " + valores[0] +  ", stock = " + valores[1] +
                                 " where ubicacion = '" + txtUbicacion.getText().trim() + "' and sku = '" + Sku + "' " +
                                " and folio = " + txFolio.getText().trim() + ";";
                        
                        System.out.println("Fila grabada: " + i + " Ubic: " + txtUbicacion.getText().trim() + " SKU: " + Grilla_prod.getValueAt(i, 1).toString().trim());
                        Sql.ExeSql(qryIns);
                        cantidad_grilla_ins=Double.valueOf(fmMain.SetGuardar(Grilla_prod.getValueAt(i, 4).toString().trim()));
                        
                    }
                    else if (Grilla_prod.getValueAt(i, 3).toString().trim()=="INS"){
                        Sku= Grilla_prod.getValueAt(i, 0).toString().trim();
                        Ubicacion = txtUbicacion.getText().trim();
                        cantidad_grilla_ins= Double.valueOf(txtCant.getText().trim());
                        StUsuario = fmMain.GetUsuario();

                        
                        
                        
//                        qryIns = "insert into mt_producto_auditoria (ubicacion,sku,usuario,cant,folio,usuario_mod,fecha_mod)\n" +
//                        " values ('" + Ubicacion + "','" + Sku + "','" + StUsuario +  "'," + cantidad_grilla_ins + "," + txFolio.getText().trim() + 
//                               ",'" + fmMain.GetUsuario() + "',now());";
                        
                        
                        double[] valores = trae_cant(Ubicacion, Sku);
                        qryIns = "insert into mt_producto_auditoria (ubicacion,sku,usuario,cant,folio,usuario_mod,fecha_mod,cant_metro,stock,ubica_origen)\n" +
                        " values ('" + Ubicacion + "','" + Sku + "','" + StUsuario +  "'," + cantidad_grilla_ins + "," + txFolio.getText().trim() + 
                               ",'" + fmMain.GetUsuario() + "',now()," + valores[0] + "," + valores[1] + ",'Auditoria_Ins');";
                        Sql.ExeSql(qryIns);
                        Sql.Commit();
                        Carga_Prod_Ubicacion_Folio(Ubicacion,1,txFolio.getText().trim());
                        //Carga_Folio(txFolio.getText().trim());
                        System.out.println("Fila grabada: " + i + " Ubic: " + txtUbicacion.getText().trim() + " SKU: " + Grilla_prod.getValueAt(i, 1).toString().trim());
                    }
                    else
                    {
                        System.out.println("Fila no grabada: " + i + " Ubic: " + txtUbicacion.getText().trim() + " SKU: " + Grilla_prod.getValueAt(i, 1).toString().trim());
                    }    
                }

                Sql.Commit();
                Carga_Prod_Ubicacion_Folio(Ubicacion,1,txFolio.getText().trim());
                fmMain.SetEstado(fmMain.pnPestanas.getSelectedIndex(), 0);
                setea_pivot_grabar();
               
                if (rbManual.isSelected()){
                    txtSku.setText("");
                    txtCant.setText("");
                    txtCant.requestFocus();
                }
                else
                {
                    txtSku.requestFocus();
                }
                
                
          }
     catch (Exception e) {
            System.out.println(e.getMessage());
        } finally{
            Sql.Close();
        }    
    }
            
    
    
    private void setea_pivot_grabar(){
        //---- Setea Pivot para grabar----------------------------
        // Queda seteado para grabar
//        if  (booAgregando == false)
//        {
//        for (int i=0; i<=Grilla_prod.getRowCount()-1; i++ ){
//                   Grilla_prod.setValueAt("0", i, 3);
//                   Grilla_prod.setValueAt("0", i, 4);
//                }
//        booAgregando = false;
//        Grilla_prod.changeSelection(0, 0 , false, false);
//        en_ingreso=0.0;
//        }
        booAgregando = false;
        Grilla_prod.changeSelection(0, 0 , false, false);
        en_ingreso=0.0;
    }
    
    
    private void limpiar_prod(){
       DefaultTableModel TableModel = (DefaultTableModel) Grilla_prod.getModel();    
         //txFolio.setText("");
        txEstado.setText("");
        txNombre.setText("");
        txtUbicacion.setText("");
        txNombreUbica.setText("");
        
        booAgregando=false;
        
        lblReg.setText("Registros: 0");
        fmMain.LimpiaGrilla(TableModel);
        
          if (rbManual.isSelected()){
            txtCant.setText("");
            txtSku.requestFocus();
        }
        else if (rbAutoma.isSelected()){
            txtCant.setText("1");
            txtSku.requestFocus();
        }
        
        
    }
    
      private void limpiar_linea(){
       DefaultTableModel TableModel = (DefaultTableModel) Grilla_prod.getModel();    
        txNombre.setText("");
        txtSku.setText("");
        if (rbManual.isSelected()){
            txtCant.setText("");
            txtSku.requestFocus();
        }
        else if (rbAutoma.isSelected()){
            txtCant.setText("1");
            txtSku.requestFocus();
        }
        txtSku.requestFocus();
        booAgregando=false;
        fmMain.LimpiaGrilla(TableModel);
    }
    private void btAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAddActionPerformed
        // TODO add your handling code here:
        double num =0;
        num = Double.parseDouble(txtCant.getText().trim()) +1;
        txtCant.setText(String.valueOf(num));
    }//GEN-LAST:event_btAddActionPerformed

    private void btMenosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btMenosActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        double num =0;
        num = Double.parseDouble(txtCant.getText().trim()) -1;
        txtCant.setText(String.valueOf(num));
    }//GEN-LAST:event_btMenosActionPerformed

    private void btTecladoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btTecladoActionPerformed
        // TODO add your handling code here:

        jdEntrada Ent = new jdEntrada(null, true);
        Ent.setLocationRelativeTo(null);
        Ent.setTitle("Ingreso de Cantidad");
        Ent.setVisible(true);
        Ent.setAlwaysOnTop(true);
        txtCant.setText(Ent.GetNumero());
    }//GEN-LAST:event_btTecladoActionPerformed

    private void txtCantKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCantKeyPressed
        // TODO add your handling code here:
        ExeSql Sql = new ExeSql();
        ResultSet Rs, Rs1;
        String Query2,Query1 ;
        double cant_ub=0.0, cant_or=0.0;
                
        
         try{          
            if(evt.getKeyCode() == KeyEvent.VK_ENTER){
                    Toolkit.getDefaultToolkit().beep(); 
              if (Double.parseDouble(txtCant.getText().trim())>=1000){
                  if(fmMain.OkCancel("¿Esta seguro de cantidad?") == JOptionPane.CANCEL_OPTION){
                    return;  
                  }
             }  
                
             if (txtSku.getText().trim().equals("") && rbManual.isSelected()){
                 txtSku.requestFocus();
                 return;
             }    
             else if (txtCant.getText().trim().equals("")){
                  Toolkit.getDefaultToolkit().beep(); 
                 fmMain.Mensaje("Falta ingresar Cantidad ");   
                 txtCant.requestFocus();
                 return;}
             else if (txFolio.getText().trim().equals("S/N")){
                  Toolkit.getDefaultToolkit().beep(); 
                 fmMain.Mensaje("Se debe Abrir o Grabar un Folio");   
                 txFolio.requestFocus();
                 return;    
             }
             
             else
             {
                 agrega_linea();
                 grabar();
                 //Carga_Prod_Ubicacion_Folio(txtUbicacion.getText().trim(), 1, txFolio.getText().trim());  hoy
                  Carga_Folio(txFolio.getText().trim());
                 if (rbManual.isSelected()){
                     txtCant.setText("");
                     txtSku.requestFocus();
                 }
                 else if(rbAutoma.isSelected()){
                     txtSku.requestFocus();
                 }
                 
             }
                
                
//               if (!txtSku.getText().trim().equals("") && !txtCant.getText().trim().equals("")) 
//               {    
//                
//               } 
//               else
//               {
//                  
//               }    
              }
            }
     catch (Exception e) {
            System.out.println(e.getMessage());
        } finally{
            Sql.Close();
        }        
    }//GEN-LAST:event_txtCantKeyPressed

    public void limpia_all(){
        
        limpiar_prod();
        txEstado.setBackground(Color.white);
        txtSku.setEditable(true);
        txtCant.setEditable(true);
        txtUbicacion.setText("");
        txNombreUbica.setText("");
        txtSku.setText("");
        
      
    }
    
    private void btLimpiaTodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLimpiaTodoActionPerformed
        // TODO add your handling code here:
        limpia_all();
        
    }//GEN-LAST:event_btLimpiaTodoActionPerformed

    private void txNombreUbicaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txNombreUbicaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txNombreUbicaActionPerformed

    private void txtUbicacionKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUbicacionKeyReleased
        // TODO add your handling code here:
          txtUbicacion.setText( txtUbicacion.getText().toUpperCase());
    }//GEN-LAST:event_txtUbicacionKeyReleased

    private void txtCantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCantActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCantActionPerformed

    private void txtCantKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCantKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCantKeyReleased

    private void cbBodegaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbBodegaActionPerformed
        ExeSql Sql = new ExeSql();
        ResultSet Rs;

        if ((cbBodega.getSelectedIndex()>0) && (cbRack.getSelectedIndex()>0) && (cbBodega.getSelectedIndex()>0)){
            Combo_CodStr id = (Combo_CodStr) cbBodega.getSelectedItem();
            txtUbicacion.setText(id.getId());

            ComboCodigos id2 = (ComboCodigos) cbRack.getSelectedItem();
            txtUbicacion.setText(txtUbicacion.getText().trim()+ "." +  id2.getId());

            ComboCodigos id3 = (ComboCodigos) cbMetro.getSelectedItem();
            txtUbicacion.setText(txtUbicacion.getText().trim()+ "." +  id3.getId());
              bt_hasta.doClick();

        }
        else{

            txtUbicacion.setText("");
            txNombreUbica.setText("");
          
        }
        
        try{
            //            Rs= Sql.Select("Select r.rack from mt_rack r \n" +
                //                "where r.bodega = (select b.codigo from mt_bodega b where b.bodega='"+cbBodega.getSelectedItem().toString().trim()+"')");
            //            cbRack.removeAllItems();
            //            while (Rs.next()){
                //                cbRack.addItem(Rs.getString("rack"));
                //            }
            CargaRack();

        }
        catch(Exception e)
        {
            Toolkit.getDefaultToolkit().beep(); 
            fmMain.Mensaje("Error: "+e);
             
        }
        finally{
            Sql.Close();
        }
    }//GEN-LAST:event_cbBodegaActionPerformed

    private void cbRackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbRackActionPerformed

        if (cbRack.getItemCount()==0)
        {
            return;
        }

        
        if ((cbBodega.getSelectedIndex()>0) && (cbRack.getSelectedIndex()>0) && (cbMetro.getSelectedIndex()>0)){
            Combo_CodStr id = (Combo_CodStr) cbBodega.getSelectedItem();
            txtUbicacion.setText(id.getId());

            ComboCodigos id2 = (ComboCodigos) cbRack.getSelectedItem();
            txtUbicacion.setText(txtUbicacion.getText().trim()+ "." +  id2.getId());

            ComboCodigos id3 = (ComboCodigos) cbMetro.getSelectedItem();
            txtUbicacion.setText(txtUbicacion.getText().trim()+ "." +  id3.getId());
            
            bt_hasta.doClick();
        }
        else{

            txtUbicacion.setText("");
            txNombreUbica.setText("");
            

        }
           
            CargaMetro();

    }//GEN-LAST:event_cbRackActionPerformed

    private void cbMetroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbMetroActionPerformed
        // TODO add your handling code here:
        if ((cbBodega.getSelectedIndex()>0) && (cbRack.getSelectedIndex()>0) && (cbMetro.getSelectedIndex()>0))
        {
            Combo_CodStr id = (Combo_CodStr) cbBodega.getSelectedItem();
            txtUbicacion.setText(id.getId());

            ComboCodigos id2 = (ComboCodigos) cbRack.getSelectedItem();
            txtUbicacion.setText(txtUbicacion.getText().trim()+ "." +  id2.getId());

            ComboCodigos id3 = (ComboCodigos) cbMetro.getSelectedItem();
            txtUbicacion.setText(txtUbicacion.getText().trim()+ "." +  id3.getId());
            bt_hasta.doClick();
        }
        else{
            txtUbicacion.setText("");
            txNombreUbica.setText("");
            
        }

    }//GEN-LAST:event_cbMetroActionPerformed

    private void bt_hastaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_hastaActionPerformed
        // TODO add your handling code here:
        ExeSql Sql = new ExeSql();
        ResultSet Rs, Rs1;
        String Query2 ;
        String strUbicacion = "";

        try{
            strUbicacion = txtUbicacion.getText().trim();
            String ubicaArray[] = strUbicacion.split("\\.");
//
//            Query2 = "SELECT (b.bodega ||' - '|| r.rack ||' - '|| m.metro) as ubc\n" +
//            " from mt_bodega b, mt_rack r, mt_metro m\n" +
//            " where b.codigo='" + ubicaArray[0] + "' and r.codigo= " + ubicaArray[1] +  " and m.codigo= " + ubicaArray[2] + "  and m.rack=" + ubicaArray[1];
            
            
            Query2 = "SELECT nombre AS ubc FROM mt_codmetro WHERE codmetro = '"+strUbicacion+"'";   
            
            
            Rs1 = Sql.Select(Query2);
            if (Rs1.next()){
                strUbicacion =Rs1.getString("ubc").trim();
                txNombreUbica.setText(strUbicacion);
                Carga_Prod_Ubicacion_Folio(txtUbicacion.getText().trim(),1, txFolio.getText().trim());
            }
            else
            {
                Toolkit.getDefaultToolkit().beep(); 
                fmMain.Mensaje("Ubicacion no encontrada, favor revise la ubicación");
                limpia_all();
                
            }
        }
        catch (Exception e) {
            System.out.println(e.getMessage());
        } finally{
            Sql.Close();
        }
    }//GEN-LAST:event_bt_hastaActionPerformed

    private void txtUbicacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUbicacionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUbicacionActionPerformed

    private void txtSkuKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSkuKeyReleased
        txtSku.setText( txtSku.getText().toUpperCase());
    }//GEN-LAST:event_txtSkuKeyReleased

    private void Grilla_prodMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Grilla_prodMouseClicked
        //        if(evt.getClickCount()==1 ){
            //
            //
            //           /* jdPagadoPrvCli Pagado = new jdPagadoPrvCli(null, true);
            //            Pagado.setLocationRelativeTo(null);
            //            Pagado.setTitle("Pagos Realizados");
            //            Pagado.CargaPagosPrv(Grilla.getValueAt(Grilla.getSelectedRow(), 12).toString().trim());
            //            Pagado.setVisible(true);*/
            //        }
    }//GEN-LAST:event_Grilla_prodMouseClicked

    private void btEliminar_lineaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEliminar_lineaActionPerformed
        ExeSql Sql = new ExeSql();
        ResultSet Rs, Rs1;
        String Query2, SKU, qryDel, STNombreP ;
        String strUbicacion = txtUbicacion.getText().trim();
        
        try{
            if (strUbicacion.trim().equals(""))
                    {
                        Toolkit.getDefaultToolkit().beep(); 
                        fmMain.Mensaje("Debe ingresar ubicacion para poder eliminar un SKU.");
                        txtUbicacion.requestFocus();
                        return;
                    }
            
            
            if(Grilla_prod.getSelectedRow()==-1){
                fmMain.Mensaje("Debe seleccionar un SKU a eliminar en la Grilla");
                return;
            }
            
            STNombreP=Grilla_prod.getValueAt(Grilla_prod.getSelectedRow(), 1).toString().trim();
            Toolkit.getDefaultToolkit().beep(); 
            if(fmMain.OkCancel("¿Esta seguro de Eliminar el producto " + STNombreP  ) == JOptionPane.CANCEL_OPTION){
                txtSku.requestFocus();
                return;
            }
            SKU=Grilla_prod.getValueAt(Grilla_prod.getSelectedRow(), 0).toString().trim();
            Query2= "select * from mt_producto_auditoria where ubicacion ='" + strUbicacion + "' and sku = '" + SKU + "' and folio = " + txFolio.getText().trim();
            Rs1 = Sql.Select(Query2);
            if (Rs1.next()){
                    // Elimina el registro Seleccionado
                    qryDel = "delete from mt_producto_auditoria where ubicacion ='" + strUbicacion + "' and sku = '" + SKU + "' and folio =" + txFolio.getText().trim();
                    Sql.ExeSql(qryDel);
                    //limpiar_linea();
                    String v_folio = txFolio.getText().trim();
                    Carga_Prod_Ubicacion_Folio(strUbicacion,1, txFolio.getText().trim());
                    txtUbicacion.setText(strUbicacion);
                    txFolio.setText(v_folio);
                            
                    
            }
            else
            {
                Toolkit.getDefaultToolkit().beep(); 
                fmMain.Mensaje("Producto no Existe" );
            }
        }
        catch (Exception e) {
            System.out.println(e.getMessage());
        } finally{
            Sql.Close();
        }

    }//GEN-LAST:event_btEliminar_lineaActionPerformed

    private void btEliminarTodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEliminarTodoActionPerformed

        ExeSql Sql = new ExeSql();
        ResultSet Rs, Rs1;
        String Query2, SKU, qryDel,STNombreP ;
        String strUbicacion = txtUbicacion.getText().trim();

        try{
            if (strUbicacion.trim().equals(""))
                    {fmMain.Mensaje("Debe ingresar ubicacion para poder Eliminar!");
                    txtUbicacion.requestFocus();
                    return;
                    }
            
            Toolkit.getDefaultToolkit().beep(); 
            if(fmMain.OkCancel("¿Esta seguro de Eliminar todos los productos??"  ) == JOptionPane.CANCEL_OPTION){
                txtSku.requestFocus();
                return;
            }
            
            Query2= "select * from mt_producto_auditoria where ubicacion ='" + strUbicacion + "' and folio = " + txFolio.getText().trim()  + ";";
            Rs1 = Sql.Select(Query2);
            if (Rs1.next()){
                    // Elimina el registro Seleccionado
                    qryDel = "delete from mt_producto_auditoria where ubicacion ='" + strUbicacion + "' and folio = " + txFolio.getText().trim()  + ";";
                    Sql.ExeSql(qryDel);
                    //LVLB1.101.16
                    //limpiar_prod();
                    limpiar_linea();
                    String v_folio = txFolio.getText().trim();
                    Carga_Prod_Ubicacion_Folio(strUbicacion,1, txFolio.getText().trim());
                    txtUbicacion.setText(strUbicacion);
                    txFolio.setText(v_folio);
                }
            else
            {
                Toolkit.getDefaultToolkit().beep(); 
                fmMain.Mensaje("Producto no Existe" );
            }
        }
        catch (Exception e) {
            System.out.println(e.getMessage());
        } finally{
            Sql.Close();
        }

    }//GEN-LAST:event_btEliminarTodoActionPerformed

    private void rbAutomaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbAutomaActionPerformed
        // TODO add your handling code here:
        txtCant.setText("1");
        txtCant.setEditable(false);
        txtSku.requestFocus();
    }//GEN-LAST:event_rbAutomaActionPerformed

    private void rbManualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbManualActionPerformed
        // TODO add your handling code here:
        txtCant.setText("");
        txtCant.setEditable(true);
        txtSku.requestFocus();
    }//GEN-LAST:event_rbManualActionPerformed

    private void txtSkuKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSkuKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSkuKeyTyped

    
    private void busca_codigo_desc(String Codigo){
            jdBuscarProductos BP = new jdBuscarProductos(null, true);
            BP.setLocationRelativeTo(null);
            BP.setTitle("Buscar Producto");
            BP.SetTexto(Codigo);
            BP.buscar_prod(false);
            BP.setVisible(true);
            if(!"".equals(BP.GetCodigo()))
                CargaProducto(BP.GetCodigo());
            
    }
    
    
    private void txtSkuAncestorRemoved(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_txtSkuAncestorRemoved
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSkuAncestorRemoved

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        busca_codigo_desc(txtSku.getText().trim());
        
           


    }//GEN-LAST:event_jButton1ActionPerformed

    private void btUbicacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btUbicacionActionPerformed
        // TODO add your handling code here:
         // TODO add your handling code here:
        String StUbicacion ="" , StNomUbica="";
          jdBuscaUbicacion Ubicacion= new jdBuscaUbicacion(null, true);
            Ubicacion.CargaBodegaOR(0);
            Ubicacion.setVisible(true);
           
            StUbicacion=  Ubicacion.GetUbicacion();
            StNomUbica=Ubicacion.GetNombreUbicacion();
            
            
            
            if (Ubicacion.GetUbicacion().equals("")){
                fmMain.Mensaje("Ubicacion no ingresada, favor ingresar a la brevedad");
                btUbicacion.requestFocus();
                return;
            }
                
            
           txtUbicacion.setText(StUbicacion);
           txNombreUbica.setText(StNomUbica);
           Carga_Prod_Ubicacion_Folio(StUbicacion,1, txFolio.getText().trim());
            txtSku.requestFocus();
    }//GEN-LAST:event_btUbicacionActionPerformed

    
    private void Abrir_folio(){
        

        Carga_Folio(JOptionPane.showInputDialog("Folio:"));
            txtSku.requestFocus();
        
        
    }
    
    
    private void btAbreFolioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAbreFolioActionPerformed
        // TODO add your handling code here:
       limpia_all(); 
       Abrir_folio();
       bt_Finalizar.setEnabled(true);
        
    }//GEN-LAST:event_btAbreFolioActionPerformed

    
    private void nuevo_folio(){
        ExeSql Sql = new ExeSql();
    ExeSql Sql1 = new ExeSql();
    ResultSet Rs,Rs1;
    String Query="", QryVend="";
     String NewCorrelativo;
    
    try {

        Sql.ExeSql("update par_correlativo set  numero = numero + 1 where tipo='INV'");
        NewCorrelativo = Sql.SelectUnico("select numero from par_correlativo where tipo='INV'");
        btLimpiaTodo.doClick();
        txFolio.setText(NewCorrelativo);
        
       
        
       
    } 
    catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Folio no encontrado");
    }
    finally{
        Sql.Close();
    }        
    
    }

    
    private void btNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btNuevoActionPerformed
        // TODO add your handling code here:
     if(fmMain.OkCancel("¿Esta seguro de crear un nuevo folio?") == JOptionPane.OK_OPTION){
        limpia_all();
        nuevo_folio();
                // Estado Abierto
                  txEstado.setText("Abierto");
                  txEstado.setBackground(Color.GREEN);
                  txtSku.setEditable(true);
                  txtCant.setEditable(true);
     }//if
    }//GEN-LAST:event_btNuevoActionPerformed

    private void txtSkuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSkuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSkuActionPerformed

    private void bt_FinalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_FinalizarActionPerformed
        // TODO add your handling code here:
        if(fmMain.OkCancel("¿Esta seguro de Finalizar Folio?") == JOptionPane.OK_OPTION)
        {
                 finalizar_folio();
                 txEstado.setText("Cerrado"); 
                 bt_Finalizar.setEnabled(false);
                 txEstado.setBackground(Color.red);
                 txtSku.setEditable(false);
                 txtCant.setEditable(false);
                 txNombre.setEditable(false);
                 txNombreUbica.setEditable(false);
                 Carga_Folio(txFolio.getText().trim());
                 grabar_INVENTARIO();
                 
        }//if           
    }//GEN-LAST:event_bt_FinalizarActionPerformed
    
    
private void grabar_INVENTARIO(){
    DefaultTableModel TableModel = (DefaultTableModel) Grilla_prod.getModel();
    ExeSql Sql = new ExeSql();
    ExeSql Sql1 = new ExeSql();
    ResultSet Rs, Rs1;
    String Query, qryIns, qryUpd,Sku,Ubicacion,StUsuario,qry ;
    String mt_positivo = "INV.1011.1";
    String mt_negativo = "INV.1011.2";
    String StrMetro="" , StrUbicaPosi="", StrMetroContrario="";
    Ubicacion =""; qry = ""; 
    double cantidad_grilla_ins=0.0;
    double qcantidad, qcantidad_sistema =0.0,qcantidad_positivo =0, qcantidad_Ubicacion=0 ,qcantidad_negativo =0,qcantidad_final=0;
    double qResultado =0;
    boolean existe_positivo = false, existe_negativo = false, existe_en_metro=false;
    
    try{ 
        
        for (int i=0; i<=Grilla_prod.getRowCount()-1; i++ ){
            Sku = Grilla_prod.getValueAt(i, 0).toString().trim();
            qcantidad = Double.valueOf(fmMain.SetGuardar(Grilla_prod.getValueAt(i, 2).toString().trim())); // Cantidad_Contada
            qcantidad_sistema = Double.valueOf(fmMain.SetGuardar(Grilla_prod.getValueAt(i, 9).toString().trim())); // Cantidad_Sistema
            Ubicacion = Grilla_prod.getValueAt(i, 8).toString().trim(); // Ubicacion Metro
            StUsuario = fmMain.GetUsuario();
            cantidad_grilla_ins=Double.valueOf(fmMain.SetGuardar(Grilla_prod.getValueAt(i, 10).toString().trim())); // Diferencia
            
            //---------------- Obtener Metro Positivo y Negativo ----------------------------------------------------------------------
            //Positivo
            // Averiguo si el producto existe o no en metro positivo
                        qry = "select * from mt_productos where ubicacion = '" + mt_positivo + "' and sku = '" + Sku + "'";
                        Rs1 = Sql1.Select(qry);
                                if ( Rs1.next())
                                {
                                    existe_positivo = true;
                                    qcantidad_positivo=  Rs1.getDouble("cant");
                                }
                                else
                                {
                                    existe_positivo = false;
                                    qcantidad_positivo=  0;
                                    System.out.println("No existe positivo SKU : " +Sku  + " en Metro  ");
                                }
            
            // Negativo.
            // Averiguo si el producto existe o no en metro negativo.
                        qry = "select * from mt_productos where ubicacion = '" + mt_negativo + "' and sku = '" + Sku + "'";
                        Rs1 = Sql1.Select(qry);
                                if ( Rs1.next())
                                {
                                    existe_negativo = true;
                                    qcantidad_negativo=  Rs1.getDouble("cant");
                                }
                                else
                                {
                                    existe_negativo = false;
                                    qcantidad_negativo=0;
                                    System.out.println("No existe positivo SKU : " +Sku  + " en Metro  ");
                                }
                   
                                /*
                                    Calculo la cantidad_final descontando de la diferencia lo que contiene el metro positivo y megativo
                                */
                               qcantidad_final = qcantidad_positivo + qcantidad_negativo + cantidad_grilla_ins;
           
                               // Si qcantidad_final >0 queda solo el metro positivo con cantidad y el metro negativo no, por lo que se elimina del metro para 
                               // no dejar un producto con cantidad 0
                               
                               
                               // Si la cantidad es mayor que 0 
                               if (qcantidad_final >0  )
                               {
                                   //Si existe en Metro positivo se actualiza la cantidad en el metro positivo y se borrara lo que exista en negativo                                   
                                   if (existe_positivo)
                                   {
                                        //Si existe el Sku en metro positivo se actualiza la cantidad 
                                        qryIns = " update  mt_productos set cant =  " +   qcantidad_final + ",\n" +        
                                            "  usuario_mod ='" +fmMain.GetUsuario() + "', fecha_mod = now(), ubica_origen ='" + "Aditoria:" + txFolio.getText().trim() + "' " +
                                            " where ubicacion = '" + mt_positivo + "' and sku = '" + Sku + "' ";
                                       Sql.ExeSql(qryIns);  
                                      
                                       // Si existia en el metro negativo esta se borra ya que se desconto completa
                                       if (existe_negativo)
                                       {    
                                        qryIns = "delete from  mt_productos " +
                                               " where ubicacion = '" + mt_negativo + "' and sku = '" + Sku + "' ";
                                          Sql.ExeSql(qryIns);
                                       }  
                                   }
                                   else
                                   {
                                       //No existe en Metro positivo por lo que el registro se inserta en el metro positivo y se borrara lo que exista en negativo                                   
                                            qryIns = "insert into mt_productos (ubicacion,sku,usuario,cant,ubica_origen)\n" +
                                            " values ('" + mt_positivo + "','" + Sku + "','" + StUsuario +  "'," + qcantidad_final + ",'" + "Aditoria:" + txFolio.getText().trim() + "');";
                                             Sql.ExeSql(qryIns);
                                          
                                             if (existe_negativo)
                                             {    
                                                qryIns = "delete from  mt_productos " +
                                                         " where ubicacion = '" + mt_negativo + "' and sku = '" + Sku + "' ";
                                                      Sql.ExeSql(qryIns);
                                             }      
                                   }   
                               }
                               else if (qcantidad_final <0  )
                               {
                                   //Si existe en Metro negativo se actualiza la cantidad en el metro negativo y se borrara lo que exista en positivo                                   
                                   if (existe_negativo)
                                   {
                                        //Codigo cambiado por Update ya que metro Existe
                                        qryIns = " update  mt_productos set cant =   " +   qcantidad_final + ",\n" +        
                                            "  usuario_mod ='" +fmMain.GetUsuario() + "', fecha_mod = now(), ubica_origen ='" + "Aditoria:" + txFolio.getText().trim() + "' " +
                                            " where ubicacion = '" + mt_negativo + "' and sku = '" + Sku + "' ";
                                       Sql.ExeSql(qryIns);  
                                       
                                       // Si existe sku en metro positivo lo saca del metro ya que la diferencia esta rebajada 
                                       if (existe_positivo)
                                       {    
                                       qryIns = "delete from  mt_productos " +
                                              " where ubicacion = '" + mt_positivo + "' and sku = '" + Sku + "' ";
                                         Sql.ExeSql(qryIns);
                                       }  
                                   }
                                   else
                                   {
                                       //No existe en Metro negativo por lo que el registro se inserta en el metro negativo y se borrara lo que exista en positivo                                   
                                            qryIns = "insert into mt_productos (ubicacion,sku,usuario,cant,ubica_origen)\n" +
                                            " values ('" + mt_negativo + "','" + Sku + "','" + StUsuario +  "'," + qcantidad_final + ",'" + "Aditoria:" + txFolio.getText().trim() + "');";
                                             Sql.ExeSql(qryIns);
                                             if (existe_positivo)
                                             {    
                                                if (existe_positivo)
                                                {    
                                                qryIns = "delete from  mt_productos " +
                                                         " where ubicacion = '" + mt_positivo + "' and sku = '" + Sku + "' ";
                                                      Sql.ExeSql(qryIns);
                                                }      
                                             }      
                                   }   
                               }
                                   
                               // Si Existe Sku en metro
                                qry = "select * from mt_productos where ubicacion = '" + Ubicacion + "' and sku = '" + Sku + "'";
                                Rs1 = Sql1.Select(qry);
                                if ( Rs1.next())
                                {
                                    existe_en_metro = true;
                                    
                                }
                                else
                                {
                                    existe_en_metro = false;
                                    
                                }
            
                               
                               // Se deja la cantidad contada en el metro.
                               if (existe_en_metro)
                               {    
                               // Actualiza la cantidad del Metro a lo contado
                               qryIns = "update  mt_productos set cant = " +   qcantidad + ",\n" +        
                                               "  usuario_mod ='" +fmMain.GetUsuario() + "', fecha_mod = now(), ubica_origen ='" + "Aditoria:" + txFolio.getText().trim() + "' " +
                                               " where ubicacion = '" + Ubicacion + "' and sku = '" + Sku + "' ";
                                              Sql1.ExeSql(qryIns);
                                              System.out.println("Actualiza Cantidad Sku en metro " + Ubicacion + " SKU = " +  Sku + " Cantidad " + qcantidad);
                               }
                               else
                               {
                                   // Inserta cantidad del Metro a lo contado
                                   qryIns = "insert into mt_productos (ubicacion,sku,usuario,cant,ubica_origen)\n" +
                                            " values ('" + Ubicacion + "','" + Sku + "','" + StUsuario +  "'," + qcantidad + ",'" + "Aditoria:" + txFolio.getText().trim() + "');";
                                             Sql.ExeSql(qryIns);
                                             System.out.println("Inserta SKU en Metro, ya que no existe " + Ubicacion + " SKU = " +  Sku + " Cantidad " + qcantidad);
                               }    
           
            } // FIN FOR
        
        // ELIMINA LOS CODIGOS QUE NO ESTAN EN LA AUDITORIA DEL METRO
        
         // Busca si el codigo se ha ingresado anteriormente en la grilla
            String  Numero ="", strCant ="";
            double gcantidad=0.0;
            for (int i=0; i<=Grilla_prod.getRowCount()-1; i++ ){
                strCant= Grilla_prod.getValueAt(i, 2).toString();
                gcantidad = Double.valueOf(strCant);
                if (gcantidad >0 )
                  {      
                   Numero = Numero + "'" + Grilla_prod.getValueAt(i, 0).toString() + "',";
                  } 
            }
            
            //nombrePalabra.substring(0,j).trim()
            Numero =  Numero.substring(0, Numero.length()-1).trim();

            Query = "delete  from  mt_productos " + 
                    " where ubicacion = '" + Ubicacion + "' and sku not in (" + Numero + ")";
            Sql.ExeSql(Query);
            


        Sql.Commit();
                Carga_Folio(txFolio.getText().trim());
                fmMain.SetEstado(fmMain.pnPestanas.getSelectedIndex(), 0);
                setea_pivot_grabar();
          }
     catch (Exception e) {
            System.out.println(e.getMessage());
            fmMain.Mensaje(e.getMessage());
        } finally{
            Sql.Close();
            Sql1.Close();
        }    
    }        
    
    
    
    private void finalizar_folio(){
        ExeSql Sql = new ExeSql();
        ExeSql Sql1 = new ExeSql();
        ResultSet Rs,Rs1;
        double peso=0;
        String Ubica_folio ="";
        String Ubica="", Query="", Qry ="";
        int i =0;
        try {
           // -----------  Insertar en el Folio todos los productos que no estan en el metro ----------------------------

            Qry = "select ubicacion from mt_producto_auditoria where folio = " + txFolio.getText();
            Rs1 = Sql1.Select(Qry);
            if ( Rs1.next()){
                Ubica_folio = Rs1.getString("ubicacion");
            }
            
            Qry = "insert into mt_producto_auditoria \n " +
                    "select \n '" + Ubica_folio + "' ubicacion , " +
                  "       mp.sku sku, \n" +
                  "       now() fecha, \n" +
                  "       'Inserta Luvaly' usuario, \n" +
                  "       0 cant, " +
                  "'Luvaly' usuario_mod, now() fecha_mod, null ubica_origen,  \n" +
                        txFolio.getText().trim() + " folio , null finalizado, mp.cant cant_metro, null stock " +
                    " from mt_productos mp\n" +
                    " left join mt_codmetro cm\n" +
                    " on cm.codmetro = mp.ubicacion\n" +
                    " left join producto p\n" +
                    " on p.sku = mp.sku\n" +
                    " where \n" +
                    " mp.sku not in (select ma.sku from mt_producto_auditoria ma where ma.folio = " + txFolio.getText().trim() +  ")\n" +
                    " and mp.ubicacion = '" + Ubica_folio + "'\n" +
                    " AND mp.cant >0";
            
            Sql1.ExeSql(Qry);
            Sql1.Commit();
            //----------------------------------------------------------------------------------------------
            Query = "update mt_producto_auditoria set finalizado =1 where folio = " + txFolio.getText().trim();
            Sql.ExeSql(Query);
            Sql.Commit();
            Toolkit.getDefaultToolkit().beep();  
            txEstado.setText("Cerrado"); 
            txEstado.setBackground(Color.red);

            fmMain.Mensaje("Folio Número :  " + txFolio.getText().trim() + " Cerrado" );
            } //try
          catch (Exception e) {
            System.out.println(e.getMessage());
            fmMain.Mensaje(e.getMessage());
           } //catch 
            finally{
            Sql.Close();
            } //Finally      
    }
    
    
    private void Carga_Prod_Ubicacion(String ubicacion, int  llamado ){
        ExeSql Sql = new ExeSql();
        ResultSet Rs;
        DefaultTableModel dfTm = (DefaultTableModel) Grilla_prod.getModel();
        double peso=0;
        fmMain.LimpiaGrilla(dfTm);
        String Ubica="";
        int i =0;
        try {
           // Rs = Sql.Select("select * from pg_user where usename <> 'postgres'");
             Rs = Sql.Select(" select  p.nombre Nombre, p.sku Sku, mp.cant, u.unidad, case when mp.fecha_mod is null then mp.fecha else mp.fecha_mod END as fechita  \n" +
                                " from mt_producto_auditoria mp \n" +
                                " left join producto p on p.sku = mp.sku " +
                                "left join par_unidad u on  u.codigo = p.unidad\n " +
                                " where ubicacion = '" + ubicacion  + "' order by fechita DESC" );
           if (llamado ==0){
               //Ubica =txNombreUbicaOrig.getText().trim();
           }
           else    
           {
               Ubica =txNombreUbica.getText().trim();
           }                     
              if(Sql.GetRowCount()==0){  
                 Toolkit.getDefaultToolkit().beep();  
                 fmMain.Mensaje("No existen Productos asociados a esta ubicacion :" + Ubica);
                 bt_hasta.requestFocus();
                 txtSku.requestFocus();
                 return;
                }      

            while(Rs.next()){
                dfTm.addRow(new Object[]{Rs.getString("Sku"),Rs.getString("Nombre"),Rs.getDouble("cant"),"NO","0",Rs.getString("unidad"),Rs.getString("fechita")});
                i++;
            }
            Grilla_prod.changeSelection(0, 0 , false, false);
            txtSku.requestFocus();
            lblReg.setText("Registros: " + String.valueOf(i));
             }
     catch (Exception e) {
            System.out.println(e.getMessage());
        } finally{
            Sql.Close();
        }    
        
    }

    private void Carga_Prod_Ubicacion_Folio(String ubicacion, int  llamado, String  folio ){
           ExeSql Sql = new ExeSql();
            ExeSql Sql1 = new ExeSql();
        ResultSet Rs;
        ExeSqlLuvaly luv = new ExeSqlLuvaly();
        ResultSet producto = null;
        DefaultTableModel dfTm = (DefaultTableModel) Grilla_prod.getModel();
        double peso=0;
        fmMain.LimpiaGrilla(dfTm);
        String Ubica="";
        int i =0;
        try {
           // Rs = Sql.Select("select * from pg_user where usename <> 'postgres'");
            String Qry = " select  p.nombre Nombre, p.sku Sku, mp.cant, u.unidad, case when mp.fecha_mod is null then mp.fecha else mp.fecha_mod END as fechita, cm.nombre as ubicametro, mp.ubicacion, mp.cant_metro  \n" +
                                " from mt_producto_auditoria mp \n" +
                                " left join producto p on p.sku = mp.sku " +
                                "left join par_unidad u on  u.codigo = p.unidad\n " +
                                " left join mt_codmetro cm  on cm.codmetro = mp.ubicacion " +
                                " where  folio = " + folio + " order by fechita DESC" ;
             Rs = Sql.Select(Qry);
             
             
             
           if (llamado ==0){
               //Ubica =txNombreUbicaOrig.getText().trim();
           }
           else    
           {
               Ubica =txNombreUbica.getText().trim();
           }                     
              if(Sql.GetRowCount()==0){  
                    Toolkit.getDefaultToolkit().beep();  
                 fmMain.Mensaje("No existen Productos asociados a esta ubicacion :" + Ubica);
                 bt_hasta.requestFocus();
                 txtSku.requestFocus();
                 return;
                }      

            while(Rs.next()){
                producto =  luv.Select("select p.nombre Nombre,trim(u.unidad) as unidad, u.um from producto p \n"
                    + "LEFT JOIN par_unidad u ON u.codigo=p.unidad\n "
                    + "where p.sku = '"+Rs.getString("sku").trim()+"'");
                producto.next();
                dfTm.addRow(new Object[]{Rs.getString("Sku"),producto.getString("Nombre"),Rs.getDouble("cant"),"NO","0",producto.getString("unidad"),Rs.getString("fechita"),Rs.getString("ubicametro"),Rs.getString("ubicacion"),Rs.getDouble("cant_metro"),Rs.getDouble("cant")-Rs.getDouble("cant_metro")});
//                if (Rs.getDouble("cant")-Rs.getDouble("cant_metro")<0)
//                        {
//                       Qry = " delete  from mt_productos where ubicacion = '" + Rs.getString("ubicacion").trim() + "' and sku = '" + Rs.getString("Sku").trim() +"'";         
//                       Sql1.ExeSql(Qry);
//                        }
                
                
                i++;
            }
            Grilla_prod.changeSelection(0, 0 , false, false);
            txtSku.requestFocus();
            lblReg.setText("Registros: " + String.valueOf(i));
             }
     catch (Exception e) {
            System.out.println(e.getMessage());
        } finally{
            Sql.Close();
            luv.Close();
        }    
        
    }
    
    
    private void Carga_Folio(String  folio ){
           ExeSql Sql = new ExeSql();
           ExeSql Sql1 = new ExeSql();
        ResultSet Rs;
        ExeSqlLuvaly luv = new ExeSqlLuvaly();
        ResultSet producto = null;
        DefaultTableModel dfTm = (DefaultTableModel) Grilla_prod.getModel();
        double peso=0;
        limpiar_prod();
        fmMain.LimpiaGrilla(dfTm);
        String Ubica="";
        String Qry="";
        int i =0;
        try {
             Rs = Sql.Select(" select  mp.ubicacion,  mp.finalizado, p.nombre Nombre, p.sku Sku, mp.cant, u.unidad, case when mp.fecha_mod is null then mp.fecha else mp.fecha_mod END as fechita,cm.nombre as ubicametro, "
                                + "mp.cant_metro,mp.cant-mp.cant_metro as dif \n" +
                                " from mt_producto_auditoria mp \n" +
                                " left join producto p on p.sku = mp.sku " +
                                " left join mt_codmetro cm  on cm.codmetro = mp.ubicacion " +
                                "left join par_unidad u on  u.codigo = p.unidad\n " +
                                " where folio = " + Integer.valueOf(folio) + " order by fechita DESC" );
           
              if(Sql.GetRowCount()==0){  
             // Estado Abierto
                  txEstado.setText("Abierto");
                  txEstado.setBackground(Color.GREEN);
                  txtSku.setEditable(true);
                  txtCant.setEditable(true);
                  
                 Toolkit.getDefaultToolkit().beep();  
                 fmMain.Mensaje("No existen Productos asociados a esta ubicacion :" + Ubica);
                 txtSku.requestFocus();
                 txFolio.setText(folio);
                 return;
                }   
              
             
            txNombre.setEditable(true);
            txNombreUbica.setEditable(true);  
            while(Rs.next()){
                producto =  luv.Select("select p.nombre Nombre,trim(u.unidad) as unidad, u.um from producto p \n"
                    + "LEFT JOIN par_unidad u ON u.codigo=p.unidad\n "
                    + "where p.sku = '"+Rs.getString("sku").trim()+"'");
                producto.next();
              //txtUbicacion.setText(Rs.getString("ubicacion"));
              txFolio.setText(folio);
              txtUbicacion.setText(Rs.getString("ubicacion").trim());
              ubicacion_enter();
              
              
              if (Rs.getInt("finalizado")==1)
              {
                 txEstado.setText("Cerrado"); 
                 txEstado.setBackground(Color.red);
                 txtSku.setEditable(false);
                 txtCant.setEditable(false);
                 txNombre.setEditable(false);
                 txNombreUbica.setEditable(false);
                 bt_Finalizar.setEnabled(false);  
              }
              else{
                  txEstado.setText("Abierto");
                  //txEstado  = new JTextField("Abierto");
                  txEstado.setBackground(Color.GREEN);
                  txtSku.setEditable(true);
                  txtCant.setEditable(true);
//                  txNombre.setEditable(true);
//                  txNombreUbica.setEditable(true);
                  }
              
              
              
                dfTm.addRow(new Object[]{Rs.getString("Sku"),producto.getString("Nombre"),Rs.getDouble("cant"),"NO","0",producto.getString("unidad"),Rs.getString("fechita"),Rs.getString("ubicametro"),Rs.getString("ubicacion"),Rs.getDouble("cant_metro"),Rs.getDouble("dif")});
                
//                 if (Rs.getDouble("dif")<0)
//                        {
//                       Qry = " delete  from mt_productos where ubicacion = '" + Rs.getString("ubicacion").trim() + "' and sku = '" + Rs.getString("Sku").trim() +"'";         
//                       Sql1.ExeSql(Qry);
//                        }
                
                
                i++;
            }
            Grilla_prod.changeSelection(0, 0 , false, false);
            txtSku.requestFocus();
            lblReg.setText("Registros: " + String.valueOf(i));
            
             }
     catch (Exception e) {
            System.out.println(e.getMessage());
        } finally{
            Sql.Close();
            luv.Close();
        }    
        
    }

    
 public  boolean  es_numero(String cadenaUno){

    if (cadenaUno.matches("[0-9]*"))
      return true;
    else
    return false;
    
 }   
    
    
    
    
    private void carga_producto(){
        String codbarfinal = txtSku.getText().replace("'", "-");
        txtSku.setText(codbarfinal.trim());
        
        if(!txtSku.getText().isEmpty())   
        {
                
                     CargaProducto(txtSku.getText());
        }     
//        else{
//            jdBuscarProductos BP = new jdBuscarProductos(null, true);
//            BP.setLocationRelativeTo(null);
//            BP.setTitle("Buscar Producto");
//            BP.SetTexto(nombrePalabra);
//            BP.setVisible(true);
//            if(!"".equals(BP.GetCodigo()))
//                CargaProducto(BP.GetCodigo());
//        }
            
    }

    public void CargaProducto(String Codigo) {
        ExeSql Sql = new ExeSql();
        ResultSet Rs = null;
        double Margen;
        ExeSqlLuvaly luv = new ExeSqlLuvaly();
        ResultSet producto = null;
        int revisa_codbar =0;
        int revisa_codchile =0;
        String codigo="";
        int pos = -1;
   
        try {
            String Query;
            //Limpia la Lista

            Rs = Sql.Select("select codbar, sku from codbar where sku='" + Codigo + "' or codbar='"+ Codigo + "'" );        
                    if (Rs.next())
                        {
                        Codigo = Rs.getString("sku").trim();
                        revisa_codbar++;
                        }
            Rs = Sql.Select("select idch, sku from codchile where sku='" + Codigo +"' or idch='"+ Codigo + "'" );
                    if (Rs.next())
                        {
                        Codigo = Rs.getString("sku").trim();
                        revisa_codchile++;
                        }
            Rs = Sql.Select("select codbar, sku from codbar where sku='" + Codigo + "' or codbar='"+ Codigo + "'" );        
                    if (Rs.next())
                        {
                        Codigo = Rs.getString("sku").trim();
                        revisa_codbar++;
                        }
             
                    
            Query ="select p.sku,p.nombre, u.unidad " 
                    + " from producto p \n"
                    + " left join inventario i\n"
                    + " on p.sku=i.Sku\n"
                    + "left join par_unidad u on  u.codigo = p.unidad\n "
                    + " where p.sku='" + Codigo + "' or p.sku in (select sku from codbar where codbar='" + Codigo + "')";
              Rs = Sql.Select(Query);
            
            

      if(Sql.GetRowCount()==0){  
                   Toolkit.getDefaultToolkit().beep(); 
                 fmMain.Mensaje("SKU: " + txtSku.getText().trim() + " no esta en Nuestra Bases de Datos. Comuniquese con Informática");
                 txtSku.setText("");
                 txtSku.requestFocus();
                 return;
      }      
      
      
            Rs.next();
            producto =  luv.Select("select p.nombre,trim(u.unidad) as unidad, u.um from producto p \n"
                + "LEFT JOIN par_unidad u ON u.codigo=p.unidad\n "
                + "where p.sku = '"+Rs.getString("sku").trim()+"'");
            producto.next();
            Codigo = Rs.getString("sku").trim();
            String Nombre = producto.getString("nombre");
            StrUnidad= producto.getString("unidad").trim();
       
            
            if (Nombre.length() > 20) {
                Nombre.substring(0, 20);
            }
            txtSku.setText(Rs.getString("sku"));
            txNombre.setText(producto.getString("nombre") + " - "  + StrUnidad );
            
            
            if ((txtCant.getText().trim().equals("")) || (txtCant.getText().trim().equals("0")) && (rbManual.isSelected()) ){
                  txtCant.requestFocus();
                  return;
               }
            
            if (txtUbicacion.getText().trim().equals("")){
                  Toolkit.getDefaultToolkit().beep(); 
                  fmMain.Mensaje("Para grabar un producto debe ingresar la ubicacion");
                  txtSku.setText("");
                  txtSku.requestFocus();
                  return;
            }
            
            
            
            // Aqui va el codigo si agrega el producto a la Grilla
            //-------------------------------------------------------------------------------------------------
                // Busca si el codigo se ha ingresado anteriormente en la grilla
                for (int i=0; i<=Grilla_prod.getRowCount()-1; i++ ){
                        codigo= Grilla_prod.getValueAt(i, 0).toString().trim();
                        if (codigo.equals(txtSku.getText().trim())){
                            pos = i;
                            break;
                        }
                    }
// Si existe el codigo en la grilla modificara la cantidad ingresada
//                if (pos==-1){
//                       fmMain.Mensaje("Codigo no pertenece a la ubicación seleccionada. \n Ubicación: " + txNombreUbica.getText().trim() + "\n SKU      : " + txtSku.getText().trim() + "\n Nombre    : " + txNombre.getText().trim());
//                       txtSku.setText("");
//                       txtSku.requestFocus();
//                       return;
//                }
                //--------------------------------------------------------------------------------------------------
            //btAgrega.doClick();
           agrega_linea();
           grabar();
           Carga_Prod_Ubicacion_Folio(txtUbicacion.getText().trim(), 1, txFolio.getText().trim());
        } catch (SQLException ex) {
            System.out.println(ex);
        } finally {
            Sql.Close();
            luv.Close();
        }
    }
    
    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Grilla_prod;
    private javax.swing.JButton btAbreFolio;
    private javax.swing.JButton btAdd;
    private javax.swing.JButton btEliminarTodo;
    private javax.swing.JButton btEliminar_linea;
    private javax.swing.JButton btLimpiaTodo;
    private javax.swing.JButton btMenos;
    private javax.swing.JButton btNuevo;
    private javax.swing.JButton btTeclado;
    private javax.swing.JButton btUbicacion;
    private javax.swing.JButton bt_Finalizar;
    private javax.swing.JButton bt_hasta;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> cbBodega;
    private javax.swing.JComboBox<String> cbMetro;
    private javax.swing.JComboBox<String> cbRack;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanelHasta;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblReg;
    private javax.swing.JRadioButton rbAutoma;
    private javax.swing.JRadioButton rbManual;
    private javax.swing.JTextField txEstado;
    private javax.swing.JTextField txFolio;
    private javax.swing.JTextField txNombre;
    private javax.swing.JTextField txNombreUbica;
    private javax.swing.JTextField txtCant;
    private javax.swing.JTextField txtSku;
    private javax.swing.JTextField txtUbicacion;
    // End of variables declaration//GEN-END:variables
}
