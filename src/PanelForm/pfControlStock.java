/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package PanelForm;

import Conexion.ExeSql;
import Conexion.ExeSqlLuvaly;
import Dialogos.jdAjustarCant;
import Dialogos.jdAjustarCantMin;
import Dialogos.jdOC_PendientesFac; 
import Formularios.fmMain;
import static Formularios.fmMain.Mensaje;
import static Formularios.fmMain.pnPestanas;
//import Utilidades.CargaGrilla;
import Utilidades.ComboCodigos;
import Utilidades.Exporter;
import Utilidades.LogError;
import Utilidades.PanelTab;
import Utilidades.Utl_Excel;
import java.awt.Color;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.Font;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author David Alcaman
 */
public class pfControlStock extends javax.swing.JPanel {
    int BigCont=0;
    int contselec = 0;
    ArrayList<ArrayList<String>> Lista  = new ArrayList<ArrayList<String>>();
            
 //*************************************************************//   
    int cant = 0;
    double dcant = 0;
    
    
    public pfControlStock() {
        initComponents();
        //CargaConvenios();
        //CargaProveedor();
        cbIdConvenio.setVisible(false);
        cbIdProveedor.setVisible(false);
        
        jButton1.setVisible(false);
        Grilla.getTableHeader().setFont(new Font("Arial", Font.BOLD, 9));
        
        jLabel1.setVisible(false);
        cbSaldos.setVisible(false);
        
        jLabel5.setVisible(false);
        txBuscarProveedor.setVisible(false);
        
        cbConvenio.setVisible(false);
        cbProveedor.setVisible(false);
        
        lbcargando.setVisible(false);
        
        lbContTotal.setVisible(false);
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        pnMenu = new javax.swing.JPanel();
        jXLabel1 = new org.jdesktop.swingx.JXLabel();
        jPanel1 = new javax.swing.JPanel();
        btCargar = new javax.swing.JButton();
        lbContProductos = new javax.swing.JLabel();
        txBuscarCodigo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        btCrearOCP = new javax.swing.JButton();
        lbcargando = new javax.swing.JLabel();
        rbTodosSALA = new javax.swing.JRadioButton();
        rbNegativosSALA = new javax.swing.JRadioButton();
        rbPositivosSALA = new javax.swing.JRadioButton();
        rbNoSALA = new javax.swing.JRadioButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        rbCeroSALA = new javax.swing.JRadioButton();
        jLabel10 = new javax.swing.JLabel();
        lbContTotal = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        chkStockBodega = new javax.swing.JRadioButton();
        chkStockPLC = new javax.swing.JRadioButton();
        lbStockBodega = new javax.swing.JLabel();
        lbStockPLC = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Grilla = new javax.swing.JTable();
        cbIdConvenio = new javax.swing.JComboBox<String>();
        cbIdProveedor = new javax.swing.JComboBox<String>();
        jLabel1 = new javax.swing.JLabel();
        cbSaldos = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        txBuscarProveedor = new javax.swing.JTextField();
        cbConvenio = new javax.swing.JComboBox<String>();
        cbProveedor = new javax.swing.JComboBox<String>();

        pnMenu.setBackground(new java.awt.Color(220, 215, 226));

        jXLabel1.setForeground(new java.awt.Color(0, 51, 0));
        jXLabel1.setText("CONTROL DE STOCK");
        jXLabel1.setToolTipText("");
        jXLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        javax.swing.GroupLayout pnMenuLayout = new javax.swing.GroupLayout(pnMenu);
        pnMenu.setLayout(pnMenuLayout);
        pnMenuLayout.setHorizontalGroup(
            pnMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnMenuLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jXLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnMenuLayout.setVerticalGroup(
            pnMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnMenuLayout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jXLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btCargar.setText("Cargar");
        btCargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCargarActionPerformed(evt);
            }
        });

        lbContProductos.setText("0 Productos");

        txBuscarCodigo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txBuscarCodigoKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txBuscarCodigoKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txBuscarCodigoKeyTyped(evt);
            }
        });

        jLabel3.setText("FILTRO");

        btCrearOCP.setText("Crear NP");
        btCrearOCP.setToolTipText("");
        btCrearOCP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCrearOCPActionPerformed(evt);
            }
        });

        lbcargando.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lbcargando.setText("Cargando");

        buttonGroup1.add(rbTodosSALA);
        rbTodosSALA.setSelected(true);
        rbTodosSALA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbTodosSALAActionPerformed(evt);
            }
        });

        buttonGroup1.add(rbNegativosSALA);
        rbNegativosSALA.setEnabled(false);
        rbNegativosSALA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbNegativosSALAActionPerformed(evt);
            }
        });

        buttonGroup1.add(rbPositivosSALA);
        rbPositivosSALA.setEnabled(false);
        rbPositivosSALA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbPositivosSALAActionPerformed(evt);
            }
        });

        buttonGroup1.add(rbNoSALA);
        rbNoSALA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbNoSALAActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("Total SALA");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setText("Negativos SALA");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel8.setText("Positivos SALA");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel9.setText("No SALA");

        buttonGroup1.add(rbCeroSALA);
        rbCeroSALA.setEnabled(false);
        rbCeroSALA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbCeroSALAActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel10.setText("En Cero SALA");

        lbContTotal.setText("de ");

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        buttonGroup2.add(chkStockBodega);
        chkStockBodega.setSelected(true);
        chkStockBodega.setText("Stock Bodega");
        chkStockBodega.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkStockBodegaActionPerformed(evt);
            }
        });

        buttonGroup2.add(chkStockPLC);
        chkStockPLC.setText("Stock Sala PLC");

        lbStockBodega.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbStockBodega.setText("0");
        lbStockBodega.setToolTipText("");
        lbStockBodega.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lbStockPLC.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbStockPLC.setText("0");
        lbStockPLC.setToolTipText("");
        lbStockPLC.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(chkStockPLC, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                    .addComponent(chkStockBodega, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lbStockBodega, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                    .addComponent(lbStockPLC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkStockBodega)
                    .addComponent(lbStockBodega))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkStockPLC)
                    .addComponent(lbStockPLC))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rbNegativosSALA)
                            .addComponent(rbPositivosSALA)
                            .addComponent(rbNoSALA)
                            .addComponent(rbTodosSALA))
                        .addGap(6, 6, 6)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                                .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(71, 71, 71)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txBuscarCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(107, 107, 107)
                                .addComponent(lbcargando, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbContProductos)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lbContTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 75, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btCargar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(31, 31, 31)
                                .addComponent(btCrearOCP, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(243, 243, 243)
                                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(rbCeroSALA)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rbTodosSALA, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(11, 11, 11)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rbNegativosSALA)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btCargar, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btCrearOCP, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(1, 1, 1)))
                        .addGap(11, 11, 11)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rbPositivosSALA)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rbCeroSALA)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbNoSALA)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lbcargando, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lbContProductos)
                        .addComponent(lbContTotal))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)
                        .addComponent(txBuscarCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        Grilla.setAutoCreateRowSorter(true);
        Grilla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CODIGO", "NOMBRE", "UM", "STOCK", "MINIMO", "N. PEDIDO", "TOTAL", "NP"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Grilla.getTableHeader().setReorderingAllowed(false);
        Grilla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                GrillaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Grilla);
        if (Grilla.getColumnModel().getColumnCount() > 0) {
            Grilla.getColumnModel().getColumn(0).setMinWidth(70);
            Grilla.getColumnModel().getColumn(0).setPreferredWidth(70);
            Grilla.getColumnModel().getColumn(0).setMaxWidth(70);
            Grilla.getColumnModel().getColumn(2).setMinWidth(50);
            Grilla.getColumnModel().getColumn(2).setPreferredWidth(50);
            Grilla.getColumnModel().getColumn(2).setMaxWidth(50);
            Grilla.getColumnModel().getColumn(3).setMinWidth(50);
            Grilla.getColumnModel().getColumn(3).setPreferredWidth(50);
            Grilla.getColumnModel().getColumn(3).setMaxWidth(50);
            Grilla.getColumnModel().getColumn(4).setMinWidth(60);
            Grilla.getColumnModel().getColumn(4).setPreferredWidth(60);
            Grilla.getColumnModel().getColumn(4).setMaxWidth(60);
            Grilla.getColumnModel().getColumn(5).setMinWidth(70);
            Grilla.getColumnModel().getColumn(5).setPreferredWidth(70);
            Grilla.getColumnModel().getColumn(5).setMaxWidth(70);
            Grilla.getColumnModel().getColumn(6).setMinWidth(50);
            Grilla.getColumnModel().getColumn(6).setPreferredWidth(50);
            Grilla.getColumnModel().getColumn(6).setMaxWidth(50);
            Grilla.getColumnModel().getColumn(7).setMinWidth(40);
            Grilla.getColumnModel().getColumn(7).setPreferredWidth(40);
            Grilla.getColumnModel().getColumn(7).setMaxWidth(40);
        }

        cbIdConvenio.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "id convenio" }));

        cbIdProveedor.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "rut proveedor" }));

        jLabel1.setText("Saldos");

        cbSaldos.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Negativos", "Positivos", "Todos" }));
        cbSaldos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbSaldosActionPerformed(evt);
            }
        });

        jButton1.setText("Excel");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel5.setText(" Proveedor");

        txBuscarProveedor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txBuscarProveedorKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txBuscarProveedorKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txBuscarProveedorKeyTyped(evt);
            }
        });

        cbConvenio.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Convenio" }));
        cbConvenio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbConvenioActionPerformed(evt);
            }
        });

        cbProveedor.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Proveedor" }));
        cbProveedor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbProveedorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txBuscarProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbSaldos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cbConvenio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cbProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(cbIdConvenio, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cbIdProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(txBuscarProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1)
                        .addComponent(cbSaldos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cbConvenio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cbProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1)
                        .addComponent(cbIdConvenio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cbIdProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 506, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btCargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCargarActionPerformed
        
        
        
        DefaultTableModel tbModel = (DefaultTableModel) Grilla.getModel();
        
        while(tbModel.getRowCount()>0)
              tbModel.removeRow(0);
        
        
        
        txBuscarCodigo.setText("");
        txBuscarProveedor.setText("");
        
        lbcargando.setVisible(true);
        lbcargando.setText("Cargando.....");
        URL urlInfo =  this.getClass().getResource("/Iconos16/wait.gif");
        ImageIcon IconoInfo =  new ImageIcon(urlInfo); 
        lbcargando.setIcon(IconoInfo);
        lbcargando.setForeground(Color.red);
        
        
        Runnable miRunnable = new Runnable() {
          
            public void run() {
                
                try{
                
                    
                    if(rbNoSALA.isSelected()){
                    
                        btCargar.setEnabled(false);
                        
                        rbPositivosSALA.setEnabled(false);
                        rbNegativosSALA.setEnabled(false);
                        rbCeroSALA.setEnabled(false);
                        rbNoSALA.setEnabled(false);
                        
                        buscarOtros();
                        
                        rbNoSALA.setEnabled(true);
                        
                    
                    }else{
                    
                       btCargar.setEnabled(false); 
                      
                       buscarDatos2(); 
                       
                       rbPositivosSALA.setEnabled(true);
                       rbNegativosSALA.setEnabled(true);
                       rbCeroSALA.setEnabled(true);
                        
                        
                    }
                    
                    
                    
                   
                    //buscarDatos();
                    
                   txBuscarCodigo.setText("");
                   txBuscarProveedor.setText("");

                   lbcargando.setVisible(false);
                    
                   btCargar.setEnabled(false);
                 
                }catch (Exception e) {
                    e.printStackTrace();
                } 
          
            }
        }; 
        
        Thread hilo = new Thread(miRunnable);
        hilo.start();
        
        miRunnable = null;
        
        
    //*************************************************************************************************************************************************************//    
        
        
        
        
        
        
        //buscarDatos();
        //buscarDatos2();
        
        //txBuscarProveedor.setText("");
    }//GEN-LAST:event_btCargarActionPerformed
   
    public void CargaProducto(String Codigo) {
        ExeSql Sql = new ExeSql();
        
        ResultSet Rs = null;
        double Margen;
        int revisa_codbar =0;
        int revisa_codchile =0;
        ExeSqlLuvaly luv = new ExeSqlLuvaly();
        ResultSet producto = null;
   
        try {
            String Query;
            //Limpia la Lista
            
            Rs = luv.Select("select codbar, sku from codbar where sku='" + Codigo + "' or codbar='"+ Codigo + "'" );        
                    if (Rs.next())
                        {
                        Codigo = Rs.getString("sku").trim();
                        revisa_codbar++;
                        }
            Rs = luv.Select("select idch, sku from codchile where sku='" + Codigo +"' or idch='"+ Codigo + "'" );
                    if (Rs.next())
                        {
                        Codigo = Rs.getString("sku").trim();
                        revisa_codchile++;
                        }
            Rs = luv.Select("select codbar, sku from codbar where sku='" + Codigo + "' or codbar='"+ Codigo + "'" );        
                    if (Rs.next())
                        {
                        Codigo = Rs.getString("sku").trim();
                        revisa_codbar++;
                        }
             
                    
                    
            Query ="select p.sku,p.nombre " 
                    + " from producto p \n"

                    + " where p.sku='" + Codigo + "' or p.sku in (select sku from codbar where codbar='" + Codigo + "')";
              Rs = luv.Select(Query);

            if(luv.GetRowCount()==0){   
                 fmMain.Mensaje("SKU: " + txBuscarCodigo.getText().trim() + " no esta en Nuestra Bases de Datos. Comuniquese con Informática");
                 txBuscarCodigo.setText("");
                 txBuscarCodigo.requestFocus();
                 return;
            }      
            Rs.next();
            Codigo = Rs.getString("sku").trim();
            String Nombre = Rs.getString("nombre");
       
            
            if (Nombre.length() > 20) {
                Nombre.substring(0, 20);
            }
            txBuscarCodigo.setText(Codigo);
          
           
        } catch (SQLException ex) {
            System.out.println(ex);
        } finally {
            Sql.Close();
            luv.Close();
        }
    }
    
    
    
    public void buscarDatos(){
    ExeSql SqlSala = new ExeSql();
    ExeSqlLuvaly SqlLuv = new ExeSqlLuvaly();
    ResultSet RsSala = null;
    ResultSet RsLuv = null;
    String QueryEcona = "";
    String QueryLuv = "";
    
    DefaultTableModel tbModel = (DefaultTableModel) Grilla.getModel();
    String conv = "";
    String prov = "";
    
    int porcodigo = 0;
    int existe = 0;
    
    if (conv.equals("") && prov.equals("")) {
//       chk_ult_proveedor.setSelected(true);
    }
    
    
    
        try {
            if (cbSaldos.getSelectedItem().toString().equals("Negativos")) {

                System.out.print("NEGATIVO!!!!");
                
//                QueryEcona = "select i.sku, i.stock, pv.minimo,i.ocp,\n" +
//                              "i.stock+i.ocp-case when pv.minimo is null then 0 else pv.minimo end as total\n" +
//                              "from inventario_sala i\n" +
//                              "left join producto_valores pv on i.sku=pv.sku \n" +
//                              "WHERE i.stock+i.ocp < case when pv.minimo is null then 0 else pv.minimo end \n";
                 
                 
                QueryEcona = "select i.sku, i.stock, pv.minimo,i.ocp,\n" +
                              "i.stock+i.ocp-case when pv.minimo is null then 0 else pv.minimo end as total\n" +
                              "from inventario_sala i\n" +
                              "left join producto_valores pv on i.sku=pv.sku \n" +
                              "WHERE i.stock+i.ocp < case when pv.minimo is null then 0 else pv.minimo end \n"; 
                 
                 
                 
                        if (!txBuscarCodigo.getText().equals("")){
                            QueryEcona = QueryEcona + " AND i.sku LIKE '"+ txBuscarCodigo.getText() + "%' \n" ;
                            porcodigo = 1;
                        }
                      
                      
                
                
            } else if (cbSaldos.getSelectedItem().toString().equals("Positivos")) {
                
                System.out.print("POSITIVO!!!!");
                
                QueryEcona = "select i.sku, i.stock, pv.minimo,i.ocp,\n" +
                             "i.stock+i.ocp-case when pv.minimo is null then 0 else pv.minimo end as total\n" +
                             "from inventario_sala i\n" +
                             "left join producto_valores pv on i.sku=pv.sku \n" +
                             "WHERE i.stock+i.ocp > case when pv.minimo is null then 0 else pv.minimo end \n";
                 
                        if (!txBuscarCodigo.getText().equals("")){
                            QueryEcona = QueryEcona + " AND i.sku LIKE '"+ txBuscarCodigo.getText() + "%' \n" ;
                        }
                      
                                    
             
                
            } else {
                    
                
                 System.out.print("TODOS!!!!");
                
                 QueryEcona = "select i.sku, i.stock, pv.minimo,i.ocp,\n" +
                              "i.stock+i.ocp-case when pv.minimo is null then 0 else pv.minimo end as total\n" +
                              "from inventario_sala i\n" +
                              "left join producto_valores pv on i.sku=pv.sku \n";
                              
                 
                        if (!txBuscarCodigo.getText().equals("")){
                            QueryEcona = QueryEcona + " AND i.sku LIKE '"+ txBuscarCodigo.getText() + "%' \n" ;
                        }
                      
                        
             }
            
            String nombre = "";
            
            RsSala = SqlSala.Select(QueryEcona);  
            
            
            
            if (porcodigo != 1){
            
                while(tbModel.getRowCount()>0)
                tbModel.removeRow(0);
            }
            
            
            
           
                if (SqlSala.GetRowCount() > 0){
             
                    while(RsSala.next()){

                        existe = 0;
                        
                        QueryLuv = "SELECT p.nombre, u.um FROM producto p \n"+
                                   "LEFT JOIN par_unidad u ON p.unidad=u.codigo\n" +
                                   "WHERE p.sku = '"+RsSala.getString("sku")+"'";
                        
                        RsLuv = SqlLuv.Select(QueryLuv);
                        
                        RsLuv.next();
                        
                        if (SqlLuv.GetRowCount() == 0){
                        
                            System.out.println("Producto "+RsSala.getString("sku")+" No Existe en Luvaly!!" );
                            nombre = "No Existe";
                            
                        }else if (SqlLuv.GetRowCount() > 0) {
                            
                            
                            for (int i = 0; i < Grilla.getRowCount(); i++) {
                            
                                
                                if (Grilla.getValueAt(i, 0).equals(RsSala.getString("sku").trim())) {    
                                
                                    existe = 1;    
                                    break;
                                
                                }
                            
                            }
                            
                            
                            
                            if (existe == 0){
                            
                                if (RsSala.getDouble("minimo") > 0){ 
                            
                                    nombre = RsLuv.getString("nombre");
                            
                                    tbModel.addRow(new Object[]{ RsSala.getString("sku"), 
                                                         nombre,   
                                                         RsLuv.getString("um"),
                                                         RsSala.getDouble("stock"),
                                                         RsSala.getDouble("minimo"),
                                                         RsSala.getDouble("ocp"),
                                                         RsSala.getDouble("total"),
                                                         false
                                                     
                                    });
                            
                                }
                            
                            }
                            
                        }
                        
                        
                    }
                }
             
            
            lbContProductos.setText(String.valueOf(Grilla.getRowCount()) + " Productos");
            
             if (porcodigo == 1){
            
                for (int i = 0; i < Grilla.getRowCount(); i++) {
                       
                    if (Grilla.getValueAt(i, 0).equals(txBuscarCodigo.getText().trim())) {
                                
                        boolean selecciona = (boolean) Grilla.getValueAt(i,7);
                                
                        if (selecciona){
             
                            Grilla.setValueAt(false, i, 7);
                            Grilla.changeSelection(i, 0, false, false);  //283591672
                                    
                            contselec--;
             
                        }else if (!selecciona) {
                                    
                            Grilla.setValueAt(true, i, 7);
                            Grilla.changeSelection(i, 0, false, false);
             
                            contselec++;
             
                        }
                                 
                    }
                }
                
                txBuscarCodigo.setText("");
                txBuscarCodigo.requestFocus();
                
            
             }
            
            
            
           
        
        } catch (SQLException ex) {
            
            LogError.Guardar(this.getClass().getSimpleName(),ex.getMessage());
            fmMain.Mensaje("Opppss existe un error");
            Logger.getLogger(pfControlStock.class.getName()).log(Level.SEVERE, null, ex);
            
        }
        finally{
            SqlSala.Close();
        }
    }
    
    
    public void buscarDatos2(){
    
        ExeSql SqlSala = new ExeSql();
        ExeSqlLuvaly Sql = new ExeSqlLuvaly();
        
        ResultSet Rs = null;
        ResultSet RsSala = null;
        ResultSet RsLuv = null;
        String QuerySala = "";
        String QueryLuv = "";
    
        DefaultTableModel tbModel = (DefaultTableModel) Grilla.getModel();
        String conv = "";
        String prov = "";
    
        int porcodigo = 0;
        int existe = 0;
        int cont = 0;
    
    
    
        try {
            
            Rs = Sql.Select("select count(i.sku) as total \n" +
                            "from inventario_sala i\n" +
                            "left join producto_valores pv on i.sku=pv.sku \n" +
                            "left join producto p on i.sku=p.sku \n" +
                            "left join par_unidad u ON p.unidad=u.codigo");  
            
            if (Sql.GetRowCount() > 0){
            
                Rs.next();
                
                lbContTotal.setText("de "+Rs.getString("total"));
            
            
            }else {
            
                    lbContTotal.setText("de 0");
            
            }
            
            
            
            
            QuerySala = "select i.sku,p.nombre, u.um, case when pv.minimo is null then 0 else pv.minimo end as minimo \n"+
                        "from inventario_sala i\n" +
                        "left join producto_valores pv on i.sku=pv.sku \n"+
                        "left join producto p on i.sku=p.sku \n"+
                        "left join par_unidad u ON p.unidad=u.codigo";
            
            
            RsSala = SqlSala.Select(QuerySala);  
            
           
                if (SqlSala.GetRowCount() > 0){
             
                    while(RsSala.next()){

                                    
                            QueryLuv = "select sum(mt.cant) as stock from mt_productos mt\n" +
                                       "where (mt.ubicacion like '%SAL.%' or mt.ubicacion IN ('TRAN.1007.2'))\n" +
                                       "and mt.sku IN ('"+RsSala.getString("sku").trim()+"') and mt.cant <> 0 ";
                            
                            
                            RsLuv = SqlSala.Select(QueryLuv);  
                                    
                            double stock = 0;
                            
                            if (SqlSala.GetRowCount() > 0){
                            
                                RsLuv.next();
                                
                                stock = RsLuv.getDouble("stock");
                                
                            
                            }else{
                            
                               stock = 0; 
                            
                            }
                            
                            double total = stock - RsSala.getDouble("minimo");
                            
                                  
                            
                            tbModel.addRow(new Object[]{ RsSala.getString("sku"), 
                                                         RsSala.getString("nombre"),   
                                                         RsSala.getString("um"),
                                                         stock,
                                                         RsSala.getDouble("minimo"),
                                                         0,
                                                         total,
                                                         false
                                                     
                            });
                            
                                
                            cont++;
                            
                            System.out.println("cont ES "+cont);
                            lbContProductos.setText(cont + "  Productos");
                        
                        
                        
                    }
                }
             
            
            lbContProductos.setText(cont + "  Productos");
            
           
        
        } catch (SQLException ex) {
            
            LogError.Guardar(this.getClass().getSimpleName(),ex.getMessage());
            fmMain.Mensaje("Opppss existe un error");
            Logger.getLogger(pfControlStock.class.getName()).log(Level.SEVERE, null, ex);
            
        }
        finally{
            SqlSala.Close();
        }
    }
    
    
    
    public void buscarOtros(){
    
        ExeSql Sql = new ExeSql();
        ExeSqlLuvaly SqlLuv = new ExeSqlLuvaly();
        ExeSql Sql2 = new ExeSql();
        
        ResultSet Rs = null;
        ResultSet RsLuv = null;
        ResultSet Rs2 = null;
        
        String Query = "";
        String QueryLuv = "";
    
        DefaultTableModel tbModel = (DefaultTableModel) Grilla.getModel();
        String conv = "";
        String prov = "";
    
        int porcodigo = 0;
        int existe = 0;
        int cont = 0;
    
        
        
        DefaultTableModel TableModel = (DefaultTableModel) Grilla.getModel();
        TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(TableModel); 
        ArrayList<RowFilter<TableModel,Object>> lista = new ArrayList<RowFilter<TableModel,Object>>();  
       
        if(rbTodosSALA.isSelected()){
        
            lista.add(RowFilter.regexFilter(""));
        
        }
        
        Grilla.setRowSorter(sorter);
        
        
    
        try {
            
            
            QueryLuv = "select i.sku,p.nombre, u.um, case when p.display is null then 0 else p.display end as minimo, iv.sku \n" +
                       "from inventario i\n" +
                       "left join producto p on i.sku=p.sku \n" +
                       "left join par_unidad u ON p.unidad=u.codigo\n" +
                       "left join inventario_sala iv on i.sku = iv.sku\n" +
                       "where iv.sku is null\n" +
                       "order by i.sku";
                       
                       //having  sum(mp.cant) <>0 
            
            
            RsLuv = SqlLuv.Select(QueryLuv);  
            
            
            if (SqlLuv.GetRowCount() > 0){  
             
                    while(RsLuv.next()){

                                    
                        Query = "select case when sum(mt.cant) is null then 0 else sum(mt.cant) end as stock from mt_productos mt\n" +
                                "where (mt.ubicacion not like '%SAL.%' and ubicacion NOT IN ('TRAN.1000.1','TRAN.1002.1','TRAN.1003.1','TRAN.1007.1','TRAN.1007.2',\n"+
                                "'TRAN.1005.1','TRAN.1006.1','TRAN.1008.1','TRAN.1009.1','TRAN.1010.1','TRAN.1012.1','TRAN.10009.1')) \n" +
                                "and mt.sku IN ('"+RsLuv.getString("sku").trim()+"') and mt.cant > 0 ";
                            
                            
                        Rs = Sql.Select(Query);  
                                    
                        double stock = 0;
                            
                        if (Sql.GetRowCount() > 0){
                            
                            Rs.next();
                                
                            stock = Rs.getDouble("stock");
                                
                            
                        }else{
                            
                            stock = 0; 
                            
                        }
                        
                        
                        if (stock != 0){
                        
                            double total = stock - RsLuv.getDouble("minimo");
                            
                            tbModel.addRow(new Object[]{ RsLuv.getString("sku"), 
                                                         RsLuv.getString("nombre"),   
                                                         RsLuv.getString("um"),
                                                         stock,
                                                         RsLuv.getDouble("minimo"),
                                                         0,
                                                         total,
                                                         false
                                                     
                            });
                            
                                
                            cont++;
                            
                            System.out.println("cont ES "+cont);
                            lbContProductos.setText(cont + " Productos");
                        }
                        
                        
                        
                    }
            }
             
            
            lbContProductos.setText(cont + " Productos");
            
            if (porcodigo == 1){
            
                for (int i = 0; i < Grilla.getRowCount(); i++) {
                       
                    if (Grilla.getValueAt(i, 0).equals(txBuscarCodigo.getText().trim())) {
                                
                        boolean selecciona = (boolean) Grilla.getValueAt(i,7);
                                
                        if (selecciona){
             
                            Grilla.setValueAt(false, i, 7);
                            Grilla.changeSelection(i, 0, false, false);  
                                    
                            contselec--;
             
                        }else if (!selecciona) {
                                    
                            Grilla.setValueAt(true, i, 7);
                            Grilla.changeSelection(i, 0, false, false);
             
                            contselec++;
             
                        }
                                 
                    }
                }
                
                txBuscarCodigo.setText("");
                txBuscarCodigo.requestFocus();
                
            
            }
            
            
            
           
        
        } catch (SQLException ex) {
            
            LogError.Guardar(this.getClass().getSimpleName(),ex.getMessage());
            fmMain.Mensaje("Opppss existe un error");
            Logger.getLogger(pfControlStock.class.getName()).log(Level.SEVERE, null, ex);
            
        }
        finally{
            Sql.Close();
        }
    }
    
    
    
    
    
    
    
    
    
    
    private void CargaConvenios(){
        ExeSql Sql = new ExeSql();
        ResultSet Rs;
        try{
            Rs = Sql.Select("Select codigo, convenio from par_convenio");
            while (Rs.next())
                {
                cbConvenio.addItem(Rs.getString("convenio"));
                cbIdConvenio.addItem(Rs.getString("codigo"));
                }
        }
        catch (Exception e)
        {
            fmMain.Mensaje("Error al cargar convenios: "+e);
        }
       finally
        {
            Sql.Close();
        }
   }
   
    private void CargaProveedor(){
        ExeSql Sql = new ExeSql();
        ResultSet Rs;
        try{
            Rs = Sql.Select("Select rut, nombre from proveedor WHERE rut IN ('76231391')order by nombre");
            
            // 76363060    ANASAC
            // 77479170    TRAMONTINA
            // 76231391    LUVALY
            // 76440015    ECONA
            // 77244658    DISOSUR
            
            while (Rs.next()){
            
                cbProveedor.addItem(Rs.getString("nombre"));
                cbIdProveedor.addItem(Rs.getString("rut"));
            
            }
        }
        catch (Exception e)
        {
            fmMain.Mensaje("Error al cargar lista de proveedores: "+e);
        }
       finally
        {
            Sql.Close();
        }
       
       
    }
    
   
    private void cbConvenioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbConvenioActionPerformed
        cbIdConvenio.setSelectedIndex(cbConvenio.getSelectedIndex());
//        chk_ult_proveedor.setSelected(true);
        btCargar.doClick();
       
    }//GEN-LAST:event_cbConvenioActionPerformed

    private void cbProveedorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbProveedorActionPerformed
       
        cbIdProveedor.setSelectedIndex(cbProveedor.getSelectedIndex());

        if (contselec == 0){
             
          //  System.out.println("NO HAY EXISTEN ELEMENTOS SELECCIONADOS!!"+contselec);
            
            btCargar.doClick();
        
        }else if (contselec > 0) {
        
//             System.out.println("EL RUT ES :"+cbIdProveedor.getSelectedItem());
//             System.out.println("HAY ELEMENTOS SELECCIONADOS!!"+contselec);
        
        }
         
    }//GEN-LAST:event_cbProveedorActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    String nombre = "Control de Stock";    
    
    String ruta_local="";
    String carpeta = "temp";
    String sistema = System.getProperty("os.name").toLowerCase();

    
        if(Grilla.getRowCount()==0){
            fmMain.Mensaje("Nada que exportar");
            return;
        }

            List<JTable> tb=new ArrayList<>();
            List<String> nom=new ArrayList<>();
            tb.add(Grilla);
            String str_convenio="conv";
            String str_proveedor="prov";
          
            nom.add(nombre);
            
            //------------------  Rescata Ruta  -------------------------------
            // Objetivo: rescatar ruta de Windows y de Linux segun sea el caso para poder
            // Generar el archivo Esxcel en forma automatica
            File f = new File("");
                    if (sistema.contains("win"))
                    {
                         ruta_local = "c:/" + carpeta + "/";
                         f = new File(ruta_local.substring(0,ruta_local.length()-1));
                    }
                    else{
                          ruta_local = "/" + carpeta + "/";
                          //folder = new File(ruta_local);
                          f = new File(ruta_local);
                    }
//                    if (!folder.exists())
//                    {
//                        folder.mkdir();
//                    }
                    if(!f.isDirectory()) {
                    String newFolder = ruta_local; //cualquierCarpeta es el nombre de la Carpeta que vamos a crear
                    
                    File myNewFolder = new File(newFolder);
                    myNewFolder.mkdirs(); //creamos la carpeta
                   }
                    else
                   {
                          System.out.println("La carpeta ya estaba creada");
                   }
                    
            //------------------  Rescata Ruta  -------------------------------
            
//            File folder = new File("c:/temp");
//            if (!folder.exists())
//            {
//                folder.mkdir();
//            }
            
            
            
             String file = ruta_local + nombre + ".xls";       
            
            
            try {
                Exporter e = new Exporter(new File(file), tb, nom);
                
                if(e.export())

                //abrir(file);
                //Abrir_Doc(file);
                Utl_Excel.Abrir_Doc(file);
                
            } catch (Exception e) {
                fmMain.Mensaje(e.getMessage());
            }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void txBuscarCodigoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txBuscarCodigoKeyTyped

    }//GEN-LAST:event_txBuscarCodigoKeyTyped

    private void txBuscarProveedorKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txBuscarProveedorKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txBuscarProveedorKeyTyped

    private void txBuscarCodigoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txBuscarCodigoKeyPressed
        // TODO add your handling code here:
          if(evt.getKeyCode()== KeyEvent.VK_ENTER)
            btCargar.doClick();
    }//GEN-LAST:event_txBuscarCodigoKeyPressed

    private void txBuscarProveedorKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txBuscarProveedorKeyPressed
        // TODO add your handling code here:
               if(evt.getKeyCode()== KeyEvent.VK_ENTER)
                        btCargar.doClick();
    }//GEN-LAST:event_txBuscarProveedorKeyPressed

    private void txBuscarCodigoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txBuscarCodigoKeyReleased
        TableRowSorter<TableModel>sorter = new TableRowSorter<TableModel>(Grilla.getModel());
        Grilla.setRowSorter(sorter);
        String sku = txBuscarCodigo.getText().trim();
        
        if (sku.length()==0){
            
            sorter.setRowFilter(null);
        
        }else{
        
            int cant=0;
            int ev=0;
            String precio = "";
            sorter.setRowFilter(RowFilter.regexFilter(sku));
        }
    }//GEN-LAST:event_txBuscarCodigoKeyReleased

    private void txBuscarProveedorKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txBuscarProveedorKeyReleased
        // TODO add your handling code here:
        txBuscarProveedor.setText(txBuscarProveedor.getText().toUpperCase());
    }//GEN-LAST:event_txBuscarProveedorKeyReleased

    private void btCrearOCPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCrearOCPActionPerformed
        
        
        if (contselec == 0){
         
            fmMain.Mensaje("No hay Productos Seleccionados!!");
            return;
         
        }
        
//        if (cbProveedor.getSelectedIndex() == 0){
//        
//            fmMain.Mensaje("Debe elegir un Proveedor!!");
//            return;
//        
//        }
        
        String Rut = "76231391";
        
       // Rut = cbIdProveedor.getSelectedItem().toString().trim();
        
        if (Rut.trim().equals("76231391")){   //LUVALY
        
            ExeSqlLuvaly  SqlLuv = new ExeSqlLuvaly();
            ExeSqlLuvaly  SqlLuv3 = new ExeSqlLuvaly();
            ResultSet Rs, Rs2, Rs3;
            String sku = "";
            double valor_uc = 0;
            double vunitario = 0;
            double cost_ref = 0;
            double cost_vent_neto1 = 0;
        
            //DefaultTableModel tbModel = (DefaultTableModel) Grilla.getModel();
        
        
            //********************************************************************************************************************************************              
            boolean agrega = false;
            int fila = 0;
            //Rut = "";
            Lista.clear();
            
            for(int i=0; i< Grilla.getRowCount(); i++){
             
                agrega = (boolean) Grilla.getValueAt(i,7);
                
                if (agrega){
                    
                    Lista.add(new ArrayList<String>());
                   
                    String sku2 = Grilla.getValueAt(i,0).toString();
                    String Nombre = Grilla.getValueAt(i,1).toString();
                    String Cantidad = Grilla.getValueAt(i,6).toString();
                    String UM = Grilla.getValueAt(i,2).toString();
                    
                    Lista.get(fila).add(0,sku2);
                    Lista.get(fila).add(1,Nombre);
                    Lista.get(fila).add(2,UM);
                    Lista.get(fila).add(3,Cantidad);
//                    
//                    System.out.println("EL SKU ES :"+Lista.get(fila).get(0));
//                    System.out.println("EL NOMBRE ES :"+Lista.get(fila).get(1));
//                    System.out.println("LA UNIDAD DE MEDIDAD ES :"+Lista.get(fila).get(2));
//                    System.out.println("LA CANTIDAD ES :"+Lista.get(fila).get(3));
//                    
                  //  Rut = Grilla.getValueAt(i, 14).toString().trim();
                  //  Rut = cbIdProveedor.getSelectedItem().toString().trim();
                    fila++;
                
                }  
            
            }
   //*************************************************************************************************************************************//      
        
        
        
            try {
            
            
            //    System.out.println("EL TAMAÑO DE LA LISTA ES :"+Lista.size());
            
                for(int i=0 ; i < Lista.size();i++){
            
                    Rs = SqlLuv.Select("select p.sku,p.valultcompra \n" +
                                        "from producto p\n" +
                                        "where p.sku='" + Lista.get(i).get(0).toString().trim() + "'");
            
                    if (SqlLuv.GetRowCount() > 0){
                    
                        Rs.next();
                
                        valor_uc = Rs.getDouble("valultcompra");
                        sku = Rs.getString("sku");
            
                        Rs3 = SqlLuv3.Select("SELECT ccd.sku, ccd.valorunitario, ccd.tipdocto, ccd.nrodocto FROM ctacteprvdet ccd\n" +
                                             "WHERE ccd.sku = '"+sku+"'\n" +
                                             "AND ccd.tipdocto IN ('OCP')\n" +
                                             "ORDER BY ccd.nrodocto DESC\n" +
                                             "LIMIT 1");
                                       
                        if (SqlLuv3.GetRowCount() > 0){
            
                            Rs3.next();
                       
                            vunitario = Rs3.getDouble("valorunitario");
            
                        }else{
            
                            vunitario = 0;
            
                        }
                  
            
                        if (valor_uc >= vunitario ){
            
                            cost_ref = valor_uc;
                
            
                        }else if (vunitario >= valor_uc) {
            
                            cost_ref = vunitario;      
            
                        }
             
                        cost_vent_neto1 = Math.round(cost_ref/0.94);
                        Lista.get(i).add(4,String.valueOf(cost_vent_neto1));        //Costo Referencial de Luvaly + 6 %
                //        System.out.println("EL VALOR UNITARIO ES :"+Lista.get(i).get(4));
           
                    }
            
            
                }    
              
              
                pfNPProveedor NPP = new pfNPProveedor();
            
                
                pnPestanas.addTab("NOTA PEDIDO Proveedor     ", NPP);
                PanelTab btc=new PanelTab(pnPestanas,0);
                pnPestanas.setTabComponentAt(pnPestanas.indexOfComponent(NPP), btc);
                pnPestanas.setSelectedIndex(pnPestanas.getTabCount()-1);
                
                NPP.NuevaOcp(Rut, Lista);
        
              
              
        //*******************************************************************************************************************************          
            
        
            } catch (SQLException ex) {
            
                Logger.getLogger(pfControlStock.class.getName()).log(Level.SEVERE, null, ex);
            }
        
        
        }
        
        
        
        
        
        
    }//GEN-LAST:event_btCrearOCPActionPerformed

    private void GrillaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GrillaMouseClicked
        
         if(evt.getClickCount()==1){
             
            //*********************************************** STOCK BODEGA y SALA PLC *****************************************************// 
             
            ExeSqlLuvaly  Sql = new ExeSqlLuvaly();
            ResultSet Rs; 
            
            ExeSqlLuvaly  Sql2 = new ExeSqlLuvaly();
            ResultSet Rs2; 
            
            
            String sku =  Grilla.getValueAt(Grilla.getSelectedRow(), 0).toString().trim();
            int stockbod = 0;
            int stockplc = 0;
                
             try {
                 Rs = Sql.Select("select (case when sum(mt.cant) is null then 0 else sum(mt.cant) end - p.display) as stock, p.display from mt_productos mt\n" +
                                 "left join producto p on mt.sku = p.sku\n" +
                                 "where (mt.ubicacion not like '%SAL.%' and mt.ubicacion not like '%SALP%' and ubicacion NOT IN ('TRAN.1000.1','TRAN.1002.1','TRAN.1003.1','TRAN.1007.1','TRAN.1007.2',\n" +
                                 "'TRAN.1005.1','TRAN.1006.1','TRAN.1008.1','TRAN.1009.1','TRAN.1010.1','TRAN.1012.1','TRAN.10009.1'))\n" +
                                 "and mt.sku IN ('"+sku.trim()+"') \n" +
                                 "group by p.display\n" +
                                 "having (case when sum(mt.cant) is null then 0 else sum(mt.cant) end - p.display) > 0");  
                 
                if (Sql.GetRowCount() > 0){
                
                    Rs.next();
                    
                    stockbod = Rs.getInt("stock");
                    
                    if (stockbod < 0){
                    
                        stockbod = 0;
                     
                    }
                    
                    
                }else{
                
                
                    stockbod = 0;
                
                } 
                
                
                
                
                Rs2 = Sql2.Select("select (case when sum(mt.cant) is null then 0 else sum(mt.cant) end - p.display) as stock, p.display from mt_productos mt\n" +
                                "left join producto p on mt.sku = p.sku\n" +
                                "where mt.ubicacion like '%SALP%'\n" +
                                "and mt.sku IN ('"+sku.trim()+"') \n" +
                                "group by p.display\n" +
                                "having (case when sum(mt.cant) is null then 0 else sum(mt.cant) end - p.display) > 0");  
                 
                if (Sql2.GetRowCount() > 0){
                
                    Rs2.next();
                    
                    stockplc = Rs2.getInt("stock");
                    
                    if (stockplc < 0){
                    
                        stockplc = 0;
                     
                    }
                    
                    
                }else{
                
                
                    stockplc = 0;
                
                } 
                
                
                
                
                
                 
                 
             } catch (SQLException ex) {
                 Logger.getLogger(pfControlStock.class.getName()).log(Level.SEVERE, null, ex);
             }
            
             
             lbStockBodega.setText(""+stockbod);
             lbStockPLC.setText(""+stockplc);
             
             
            //*************************************************************************************************************// 
             
             
             
             
         
             boolean selecciona = (boolean) Grilla.getValueAt(Grilla.getSelectedRow(),7);
             double cantidad = (double)  Grilla.getValueAt(Grilla.getSelectedRow(), 6);
             
             
             if (cantidad < 0){
             
                 cantidad = (cantidad * -1);
             
             }
             
             
             
             if (selecciona){
                 
                 if (cantidad == 0){
                 
                    Grilla.setValueAt(false,Grilla.getSelectedRow(), 7);
                    fmMain.Mensaje("Total no puede ser 0...!!");
                    return;
                 
                 }
                 
                 
                if(chkStockBodega.isSelected()){
                 
                    int cantbod = Integer.parseInt(lbStockBodega.getText().trim());
                    
                    if (cantidad > cantbod){
                    
                        Grilla.setValueAt(false,Grilla.getSelectedRow(), 7);
                        fmMain.Mensaje("La Cantidad Supera al Stock de Bodega...!!");
                        return;
                    
                    
                    }
                 
                 
                }
                
                
                if(chkStockPLC.isSelected()){
                 
                    int cantplc = Integer.parseInt(lbStockPLC.getText().trim());
                    
                    if (cantidad > cantplc){
                    
                        Grilla.setValueAt(false,Grilla.getSelectedRow(), 7);
                        fmMain.Mensaje("La Cantidad Supera al Stock de SALA PLC...!!");
                        return;
                    
                    
                    }
                 
                 
                }
                
                
                
                
                
                
                
                
                 
                 
                 
                 contselec++;
             
             }else if (!selecciona) {
             
                 contselec--;
             
             }
             
             
             if (contselec > 0){
             
                System.out.println("HAY ELEMENTOS SELECCIONADOS!!"+contselec);
             
             }else if (contselec == 0){
             
                System.out.println("NO EXISTEN ELEMENTOS SELECCIONADOS!!"+contselec);
                 
             }
             
             
             
             
             
             
         }else if(evt.getClickCount()==2) {
                
             
            int columna = Grilla.getSelectedColumn(); // luego, obtengo la columna seleccionada
            
            if (columna == 4){  //Si es la columna 4 (opcion Minimo) 
             
                jdAjustarCantMin Ajustar =  new jdAjustarCantMin(null,true);
                Ajustar.setLocationRelativeTo(null);
          
            
                dcant = Double.parseDouble(Grilla.getValueAt(Grilla.getSelectedRow(),4).toString().trim());
            
                cant = (int) dcant;
            
                Ajustar.SetValor(cant);
            
                Ajustar.setVisible(true);
            
            
                if (Ajustar.GetRetorno()){
                
                    ExeSql Sql = new ExeSql();
                    
                    try {
                    
                        String Sku = Grilla.getValueAt(Grilla.getSelectedRow(),0).toString().trim();
                        String stock = Grilla.getValueAt(Grilla.getSelectedRow(),3).toString().trim();
                        String np = Grilla.getValueAt(Grilla.getSelectedRow(),5).toString().trim();
                    
                        int Stock = Integer.parseInt(stock.substring(0,stock.indexOf('.')));
                        int Np = Integer.parseInt(np.substring(0,np.indexOf('.')));;
                        
                        int Total = (Stock+Np)-Ajustar.GetCant();
                    
                        Grilla.setValueAt(Ajustar.GetCant(),Grilla.getSelectedRow(),4);
                        Grilla.setValueAt(Total,Grilla.getSelectedRow(),6);
                    
                        String Query = "UPDATE producto_valores SET minimo = " +  Ajustar.GetCant() + " \n" +
                                       "WHERE sku = '" + Sku + "' ";
                    
                        Sql.ExeSql(Query);
                        Sql.Commit();
                    
                    } catch (SQLException ex) {
                        Sql.Rollback();
                        Logger.getLogger(pfControlStock.class.getName()).log(Level.SEVERE, null, ex);
                    }finally{
                
                        Sql.Close();
                
                    }
                
                }
            
            }  
            
        }
        
        
        
    }//GEN-LAST:event_GrillaMouseClicked

    private void cbSaldosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbSaldosActionPerformed
        
        
//        DefaultTableModel TableModel = (DefaultTableModel) Grilla.getModel();
//        TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(TableModel); 
//        ArrayList<RowFilter<TableModel,Object>> lista = new ArrayList<RowFilter<TableModel,Object>>();  
//       
//        if(chk_occ.isSelected()){
//        
//           lista.add(RowFilter.numberFilter(RowFilter.ComparisonType.BEFORE, 0,6));  //Filtra todos menores a 0
//           
//           
//            if (cbSaldos.getSelectedItem().toString().equals("Negativos")){
//           
//           
//              lista.add(RowFilter.numberFilter(RowFilter.ComparisonType.BEFORE, 0,17));  //Filtra todos menores a 0
//           
//           
//            }
//           
//           
//            if (cbConvenio.getSelectedIndex()>0){
//             
//                int convenio = Integer.parseInt(cbIdConvenio.getSelectedItem().toString().trim());
//             
//                System.out.println("El convenio ES : "+convenio);
//             
//                lista.add(RowFilter.numberFilter(RowFilter.ComparisonType.EQUAL, convenio,21));  //Filtra todos menores a 0
//            
//            }
//           
//           
//            String Texto = txBuscarProveedor.getText().trim();
//         
//            if(!Texto.trim().isEmpty()){
//            
//                lista.add(RowFilter.regexFilter(Texto,12));
//             
//            }
//            
//
//             
//            RowFilter filtroAnd = RowFilter.andFilter(lista); // and de ambos filtros
//            sorter.setRowFilter(filtroAnd);
//            //**********************************************************************************************************//
//        
//        }else{
//        
//            lista.add(RowFilter.regexFilter(""));
//        
//        }
//        
//        Grilla.setRowSorter(sorter);
//        
//        int cont = 0;
//        
//        cont = Grilla.getRowCount();
//        
//        lbContProductos.setText(cont + " Productos");
//        
        
        
        
        
        
    }//GEN-LAST:event_cbSaldosActionPerformed

    private void rbTodosSALAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbTodosSALAActionPerformed

        btCargar.setEnabled(true);
        
//        rbPositivosSALA.setEnabled(true);
//        rbNegativosSALA.setEnabled(true);
//        rbCeroSALA.setEnabled(true);
        
        DefaultTableModel TableModel = (DefaultTableModel) Grilla.getModel();
        TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(TableModel); 
        ArrayList<RowFilter<TableModel,Object>> lista = new ArrayList<RowFilter<TableModel,Object>>();  
       
        if(rbTodosSALA.isSelected()){
        
            lista.add(RowFilter.regexFilter(""));
        
        }
        
        Grilla.setRowSorter(sorter);
        
        int cont = 0;
        
        cont = Grilla.getRowCount();
        
        lbContProductos.setText(cont + " Productos");
        
        

    }//GEN-LAST:event_rbTodosSALAActionPerformed

    private void rbNegativosSALAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbNegativosSALAActionPerformed
        
        
        btCargar.setEnabled(false);
        
        DefaultTableModel TableModel = (DefaultTableModel) Grilla.getModel();
        TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(TableModel); 
        ArrayList<RowFilter<TableModel,Object>> lista = new ArrayList<RowFilter<TableModel,Object>>();  
       
        if(rbNegativosSALA.isSelected()){
        
           lista.add(RowFilter.numberFilter(RowFilter.ComparisonType.BEFORE, 0,6));  //Filtra todos menores a 0
             
            RowFilter filtroAnd = RowFilter.andFilter(lista); // and de ambos filtros
            sorter.setRowFilter(filtroAnd);
            //**********************************************************************************************************//
        
        }else{
        
            lista.add(RowFilter.regexFilter(""));
        
        }
        
        Grilla.setRowSorter(sorter);
        
        int cont = 0;
        
        cont = Grilla.getRowCount();
        
        lbContProductos.setText(cont + " Productos");
        
        
        
    }//GEN-LAST:event_rbNegativosSALAActionPerformed

    private void rbPositivosSALAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbPositivosSALAActionPerformed
        
        btCargar.setEnabled(false);
        
        DefaultTableModel TableModel = (DefaultTableModel) Grilla.getModel();
        TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(TableModel); 
        ArrayList<RowFilter<TableModel,Object>> lista = new ArrayList<RowFilter<TableModel,Object>>();  
       
        if(rbPositivosSALA.isSelected()){
        
           lista.add(RowFilter.numberFilter(RowFilter.ComparisonType.AFTER, 0,6));  //Filtra todos mayores a 0
             
            RowFilter filtroAnd = RowFilter.andFilter(lista); // and de ambos filtros
            sorter.setRowFilter(filtroAnd);
            //**********************************************************************************************************//
        
        }else{
        
            lista.add(RowFilter.regexFilter(""));
        
        }
        
        Grilla.setRowSorter(sorter);
        
        int cont = 0;
        
        cont = Grilla.getRowCount();
        
        lbContProductos.setText(cont + " Productos");
        
        
    }//GEN-LAST:event_rbPositivosSALAActionPerformed

    private void rbNoSALAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbNoSALAActionPerformed
        
        btCargar.setEnabled(true);
    }//GEN-LAST:event_rbNoSALAActionPerformed

    private void rbCeroSALAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbCeroSALAActionPerformed
         btCargar.setEnabled(false);
        
        DefaultTableModel TableModel = (DefaultTableModel) Grilla.getModel();
        TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(TableModel); 
        ArrayList<RowFilter<TableModel,Object>> lista = new ArrayList<RowFilter<TableModel,Object>>();  
       
        if(rbCeroSALA.isSelected()){
        
           lista.add(RowFilter.numberFilter(RowFilter.ComparisonType.EQUAL, 0,6));  //Filtra todos mayores a 0
             
            RowFilter filtroAnd = RowFilter.andFilter(lista); // and de ambos filtros
            sorter.setRowFilter(filtroAnd);
            //**********************************************************************************************************//
        
        }else{
        
            lista.add(RowFilter.regexFilter(""));
        
        }
        
        Grilla.setRowSorter(sorter);
        
        int cont = 0;
        
        cont = Grilla.getRowCount();
        
        lbContProductos.setText(cont + " Productos");
    }//GEN-LAST:event_rbCeroSALAActionPerformed

    private void chkStockBodegaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkStockBodegaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkStockBodegaActionPerformed
    
    
    public void abrir(String file ){
        
       try {
           String url = file;
           ProcessBuilder p = new ProcessBuilder();
           p.command("cmd.exe", "/c",url);
           p.start();
       } catch (IOException ex) {
           Logger.getLogger(jdOC_PendientesFac.class.getName()).log(Level.SEVERE, null, ex);
       }
        
    }
    
      public void Abrir_Doc(String file) throws IOException{
          File pathCompleto = new File(file);
          Desktop.getDesktop().open(pathCompleto); 
      }
      

    
    public void Limpiar(){
        
        DefaultTableModel tbModel = (DefaultTableModel) Grilla.getModel();
        
        while(tbModel.getRowCount()>0)
              tbModel.removeRow(0);
        
        
        
        txBuscarCodigo.setText("");
        txBuscarProveedor.setText("");
        cbConvenio.setSelectedIndex(0);
        cbIdConvenio.setSelectedIndex(0);
        cbIdProveedor.setSelectedIndex(0);
        cbProveedor.setSelectedIndex(0);
        cbSaldos.setSelectedIndex(0);
        btCargar.doClick();
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Grilla;
    private javax.swing.JButton btCargar;
    private javax.swing.JButton btCrearOCP;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JComboBox<String> cbConvenio;
    private javax.swing.JComboBox<String> cbIdConvenio;
    private javax.swing.JComboBox<String> cbIdProveedor;
    private javax.swing.JComboBox<String> cbProveedor;
    private javax.swing.JComboBox cbSaldos;
    private javax.swing.JRadioButton chkStockBodega;
    private javax.swing.JRadioButton chkStockPLC;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private org.jdesktop.swingx.JXLabel jXLabel1;
    private javax.swing.JLabel lbContProductos;
    private javax.swing.JLabel lbContTotal;
    private javax.swing.JLabel lbStockBodega;
    private javax.swing.JLabel lbStockPLC;
    private javax.swing.JLabel lbcargando;
    private javax.swing.JPanel pnMenu;
    private javax.swing.JRadioButton rbCeroSALA;
    private javax.swing.JRadioButton rbNegativosSALA;
    private javax.swing.JRadioButton rbNoSALA;
    private javax.swing.JRadioButton rbPositivosSALA;
    private javax.swing.JRadioButton rbTodosSALA;
    private javax.swing.JTextField txBuscarCodigo;
    private javax.swing.JTextField txBuscarProveedor;
    // End of variables declaration//GEN-END:variables
}
