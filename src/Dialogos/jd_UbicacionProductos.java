/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Dialogos;

import Conexion.ExeSql;
import Conexion.ExeSqlLuvaly;
import Formularios.fmMain;
import Utilidades.ComboCodigos;
import Utilidades.Exporter;
import Utilidades.POI_excel;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;



/**
 *
 * @author DavidAlcaman
 */
public class jd_UbicacionProductos extends javax.swing.JDialog {
   DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
    private Object GrillaOCS;
     public boolean Ingresa =false;
    
    public static int pano; 
    public static int pmes;
    public static int pmes_oc;
    public static int convenio = 0;
    public static int Id = 0;
    public static String Fecha = "";
    public static int esFecha = 0;
    
    int id_trans=-1;
    String Ubicacion_sel="", UbicaCodigo_Sel="";
    private Object btIngresar;
    /**
     * Creates new form jdTrasnporte
     */
    public jd_UbicacionProductos(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
         //Setea fecha inicial Desde y Hasta
        Date date = new Date();
  
        rightRenderer.setHorizontalAlignment(SwingConstants.RIGHT);
        Grilla.getColumnModel().getColumn(0).setCellRenderer(rightRenderer);
        Grilla.getColumnModel().getColumn(2).setCellRenderer(rightRenderer);
        Grilla.getColumnModel().getColumn(4).setCellRenderer(rightRenderer);
        
                
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu2 = new javax.swing.JPopupMenu();
        mnuCopiarOrden = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        Grilla = new javax.swing.JTable();
        btAceptar = new javax.swing.JButton();
        lblTotalDesp = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        btOk = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        lbStock = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        txtUbicacion = new javax.swing.JTextField();
        txNombreUbica = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txCant = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        lbTotal = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        lbSku = new javax.swing.JLabel();
        lbSkuDesc = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        lblDescOrigen = new javax.swing.JLabel();
        lblCodOrigen = new javax.swing.JLabel();
        lblUnidad = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        lblPendiente = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        lblAnticipada = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        Grilla_detalle = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        Grilla_detalle_posibles = new javax.swing.JTable();

        mnuCopiarOrden.setText("Copiar Orden");
        mnuCopiarOrden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuCopiarOrdenActionPerformed(evt);
            }
        });
        jPopupMenu2.add(mnuCopiarOrden);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        Grilla.setAutoCreateRowSorter(true);
        Grilla.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Grilla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sku", "Nombre", "Unidad", "cod_ubica", "Ubicacion", "Cantidad"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Grilla.setColumnSelectionAllowed(true);
        Grilla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                GrillaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Grilla);
        Grilla.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (Grilla.getColumnModel().getColumnCount() > 0) {
            Grilla.getColumnModel().getColumn(0).setPreferredWidth(100);
            Grilla.getColumnModel().getColumn(1).setMinWidth(300);
            Grilla.getColumnModel().getColumn(1).setPreferredWidth(300);
            Grilla.getColumnModel().getColumn(1).setMaxWidth(400);
            Grilla.getColumnModel().getColumn(2).setMinWidth(130);
            Grilla.getColumnModel().getColumn(2).setPreferredWidth(130);
            Grilla.getColumnModel().getColumn(2).setMaxWidth(180);
            Grilla.getColumnModel().getColumn(3).setMinWidth(0);
            Grilla.getColumnModel().getColumn(3).setPreferredWidth(0);
            Grilla.getColumnModel().getColumn(3).setMaxWidth(0);
            Grilla.getColumnModel().getColumn(4).setMinWidth(180);
            Grilla.getColumnModel().getColumn(4).setPreferredWidth(180);
            Grilla.getColumnModel().getColumn(4).setMaxWidth(250);
            Grilla.getColumnModel().getColumn(5).setMinWidth(70);
            Grilla.getColumnModel().getColumn(5).setPreferredWidth(70);
            Grilla.getColumnModel().getColumn(5).setMaxWidth(80);
        }

        btAceptar.setText("Cerrar");
        btAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAceptarActionPerformed(evt);
            }
        });

        lblTotalDesp.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblTotalDesp.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblTotalDesp.setText("0");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 0, 0));
        jLabel1.setText("Pendiente         :");

        btOk.setText("GRABAR METRO");
        btOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btOkActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Stock                 :");

        lbStock.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbStock.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbStock.setText("0");

        jPanel1.setToolTipText("Otra Ubicaci贸n");

        txtUbicacion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtUbicacionKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtUbicacionKeyTyped(evt);
            }
        });

        txNombreUbica.setEditable(false);
        txNombreUbica.setEnabled(false);

        jLabel3.setText("Codigo Ubicaci贸n");

        jLabel5.setText("Descripci贸n Ubicaci贸n");

        txCant.setText("0");
        txCant.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txCantKeyPressed(evt);
            }
        });

        jLabel6.setText("Cant");

        jButton1.setText("UBIC");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtUbicacion, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txNombreUbica, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(txCant, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUbicacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txNombreUbica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txCant, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setText("Total                  :");

        lbTotal.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbTotal.setText("Tot");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Sku Consultado: ");

        lbSku.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lbSku.setText("sku");
        lbSku.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lbSkuDesc.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lbSkuDesc.setText("DescSku");
        lbSkuDesc.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel7.setText("Ubicacion Origen");

        lblDescOrigen.setBackground(new java.awt.Color(0, 51, 204));
        lblDescOrigen.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblDescOrigen.setText("Descripcion-Origen");
        lblDescOrigen.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblCodOrigen.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblCodOrigen.setText("Codigo-Origen");
        lblCodOrigen.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblUnidad.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblUnidad.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblUnidad.setText("unidad");
        lblUnidad.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblCodOrigen, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(lblDescOrigen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lbSku, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(lbSkuDesc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblUnidad, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbSkuDesc)
                    .addComponent(jLabel2)
                    .addComponent(lbSku)
                    .addComponent(lblUnidad))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(lblDescOrigen)
                    .addComponent(lblCodOrigen))
                .addContainerGap())
        );

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setText("Ubicados           :");

        lblPendiente.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblPendiente.setForeground(new java.awt.Color(204, 0, 0));
        lblPendiente.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblPendiente.setText("0");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(204, 0, 0));
        jLabel10.setText("Vta Anticipada :");

        lblAnticipada.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblAnticipada.setForeground(new java.awt.Color(204, 0, 0));
        lblAnticipada.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAnticipada.setText("0");
        lblAnticipada.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblAnticipadaMouseClicked(evt);
            }
        });

        Grilla_detalle.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Grilla_detalle.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Orden", "Pendiente"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Grilla_detalle.setComponentPopupMenu(jPopupMenu2);
        Grilla_detalle.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Grilla_detalleMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(Grilla_detalle);

        Grilla_detalle_posibles.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Grilla_detalle_posibles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SKU", "Producto", "Cantidad", "Separado", "Despachado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(Grilla_detalle_posibles);
        if (Grilla_detalle_posibles.getColumnModel().getColumnCount() > 0) {
            Grilla_detalle_posibles.getColumnModel().getColumn(0).setMinWidth(50);
            Grilla_detalle_posibles.getColumnModel().getColumn(0).setPreferredWidth(100);
            Grilla_detalle_posibles.getColumnModel().getColumn(0).setMaxWidth(200);
            Grilla_detalle_posibles.getColumnModel().getColumn(1).setMinWidth(100);
            Grilla_detalle_posibles.getColumnModel().getColumn(1).setPreferredWidth(200);
            Grilla_detalle_posibles.getColumnModel().getColumn(1).setMaxWidth(400);
            Grilla_detalle_posibles.getColumnModel().getColumn(2).setMinWidth(30);
            Grilla_detalle_posibles.getColumnModel().getColumn(2).setPreferredWidth(50);
            Grilla_detalle_posibles.getColumnModel().getColumn(2).setMaxWidth(150);
            Grilla_detalle_posibles.getColumnModel().getColumn(3).setMinWidth(30);
            Grilla_detalle_posibles.getColumnModel().getColumn(3).setPreferredWidth(50);
            Grilla_detalle_posibles.getColumnModel().getColumn(3).setMaxWidth(150);
            Grilla_detalle_posibles.getColumnModel().getColumn(4).setMinWidth(30);
            Grilla_detalle_posibles.getColumnModel().getColumn(4).setPreferredWidth(50);
            Grilla_detalle_posibles.getColumnModel().getColumn(4).setMaxWidth(100);
        }

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 472, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane3)
                    .addContainerGap()))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 224, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btAceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btOk, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9)
                            .addComponent(jLabel1)
                            .addComponent(jLabel10))
                        .addGap(54, 54, 54)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblAnticipada, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(10, 10, 10)
                                    .addComponent(lbStock, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(lblTotalDesp, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblPendiente, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lbTotal, javax.swing.GroupLayout.Alignment.TRAILING)))
                        .addGap(18, 18, 18)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 857, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(btAceptar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(lblAnticipada)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1)
                                    .addComponent(lblPendiente)))
                            .addComponent(btOk, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(lblTotalDesp))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(lbStock))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(lbTotal)))
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private String Get_Ubicacion(String Ubica)
    {
         ExeSql Sql = new ExeSql();
        ResultSet Rs, Rs1;
        String Query2 ;
        String strUbicacion = "";

        try{
            lblCodOrigen.setVisible(true);
            strUbicacion = Ubica.trim();
            String ubicaArray[] = strUbicacion.split("\\.");

//            Query2 = "SELECT (b.bodega ||' - '|| r.rack ||' - '|| m.metro) as ubc\n" +
//            " from mt_bodega b, mt_rack r, mt_metro m\n" +
//            " where b.codigo='" + ubicaArray[0] + "' and r.codigo= " + ubicaArray[1] +  " and m.codigo= " + ubicaArray[2] + "  and m.rack=" + ubicaArray[1];
            
            
            Query2 = "SELECT nombre AS ubc FROM mt_codmetro WHERE codmetro = '"+strUbicacion.trim()+"'";  
            
            
            
            Rs1 = Sql.Select(Query2);
            if (Rs1.next()){
                strUbicacion =Rs1.getString("ubc").trim();
                return strUbicacion;
            }
            else
            {
                return null;
            }
        }
        catch (Exception e) {
            System.out.println(e.getMessage());
        } finally{
            Sql.Close();
        }
        return null; 
    }
    
    
    public void CargaMetroDestino(String sku, String nomSku ,double cant, String StOrigen){
        ExeSql Sql = new ExeSql();
        ExeSql Sql_1 = new ExeSql();
        ExeSqlLuvaly luv = new ExeSqlLuvaly();
        ResultSet Rs,Rs1,producto;
        DefaultTableModel TableModel = (DefaultTableModel) Grilla.getModel();
        double SumaDespachos = 0, SumaPendiente = 0, totAnticipada=0;
        double SumaBultos = 0;
        
        String Query="",QryPend = "", QryUnid = "",QryPendiente = "";
        double total=0;
                lblCodOrigen.setVisible(true);
                lblTotalDesp.setText(fmMain.FormatoTotal(SumaDespachos));
                lbStock.setText(fmMain.FormatoTotal(cant));
                //txCant.setText(lbStock.getText().trim());
                lblCodOrigen.setText(StOrigen);
                
                
                //lblDescOrigen.setText(Get_Ubicacion(StOrigen));
                
                if (StOrigen.equals(fmMain.BodegaTransito()))
                {
                    lblDescOrigen.setText("TRANSITO");
                }
                else
                {
                lblDescOrigen.setText(Get_Ubicacion(StOrigen));
                }
                
                
                lbSkuDesc.setText(nomSku);
                total = SumaDespachos +cant;
                lbTotal.setText(fmMain.FormatoTotal(total));
        
        int ContReg=0;
        lbSku.setText(sku);
        while(TableModel.getRowCount()>0)
             TableModel.removeRow(0);
         
        try {
            Query = "select mp.sku, mp.ubicacion,sum(mp.cant) cantidad  \n" +
                    "from mt_productos mp\n" +
                    "\n" +
                    "\n" +
                    "\n" +
                    //"where  mp.ubicacion <> '" + StOrigen.trim() + "' \n" +
//                    "where  mp.ubicacion <> '" + fmMain.BodegaTransito() + "' \n" +
                    "group by mp.sku,mp.ubicacion\n" +
                    "having sum(mp.cant) >0 and mp.sku = '" + sku + "'";
            
            Rs = Sql.Select(Query);
            
            while (Rs.next()){
                producto =  luv.Select("select p.nombre,trim(u.unidad) as unidad, p.convenio from producto p \n"
                            + "LEFT JOIN par_unidad u ON u.codigo=p.unidad\n "
                            + "where p.sku = '"+Rs.getString("sku").trim()+"'");
                producto.next();
                ContReg++;
                        TableModel.addRow(new Object[]{
                                               Rs.getString("sku").trim(),
                                               producto.getString("nombre").trim(), 
                                               producto.getString("unidad"),
                                               Rs.getString("ubicacion"),
                                               Get_Ubicacion (Rs.getString("ubicacion")),
                                               Rs.getInt("cantidad")
                        });
                SumaDespachos = SumaDespachos + Rs.getInt("cantidad");
                convenio = producto.getInt("convenio");
                lblTotalDesp.setText(fmMain.FormatoTotal(SumaDespachos));
                total = cant+SumaDespachos;
                lbTotal.setText(fmMain.FormatoTotal(total));
                txtUbicacion.requestFocus();
               }

                // Trae lo pendiente
                     QryPend = "select \n" +
                     "p.sku,p.nombre,p.unidad\n" +
                     "from producto p\n" +
                     "\n" +
                     "\n" +
                     "where p.sku = '" + sku + "'";
                     
                     QryPendiente = "select \n" +
                     "i.stock,i.ocp,i.occ,i.gdc, (select sum(separado) from occhdet where sku=p.sku) as separado\n" +
                     "\n" +
                     "from inventario i\n" +
                     "\n" +
                     "where i.sku = '" + sku + "'";
                    
                Rs1 = Sql_1.Select(QryPendiente);
                ResultSet RsLuv = luv.Select(QryPend);
                if (Rs1.next()){
                    SumaPendiente = SumaPendiente + Math.abs(Rs1.getInt("occ") + Rs1.getInt("separado")) ;
                }
                ExeSql exe = new ExeSql();
                ResultSet rss = exe.Select("select distinct on (o.codigo_oc, o.orden) CAST(o.codigo_oc as varchar) || '-' || o.orden as orden,\n" +
                                            "case when o.separado >= 0 \n" +
                                            "then (o.cantidad - (o.separado+o.despachado))\n" +
                                            "else o.separado\n" +
                                            "end as diferencia\n" +
                                            "from occhdet o\n" +
                                            "left join mt_productos mt on  mt.sku = o.sku\n" +
                                            "where o.sku = '"+sku+"'\n" +
                                            "and (o.separado + o.despachado) < o.cantidad");

                int sumados = 0;
                for(int u = 0; rss.next();u++){   
                    sumados = sumados + rss.getInt("diferencia");
                }
                rss.beforeFirst();
                DefaultTableModel model = (DefaultTableModel) Grilla_detalle.getModel();
                while(model.getRowCount()>0){
                    model.removeRow(0);
                }
                for(int o = 0; rss.next();o++){
                    model.addRow(new Object[]{
                        rss.getString("orden"),
                        rss.getString("diferencia")
                    });
                }
                
//                
                lblPendiente.setText( fmMain.FormatoTotal(sumados));


                // Trae lo anticipado
                     QryPend = " select sku,cant from mt_productos mt\n" +
                               " where mt.sku = '" + sku + "' and mt.ubicacion = '" + fmMain.BodegaAnticipada() + "';";
                Rs1 = Sql_1.Select(QryPend);
                if (Rs1.next()){
                    totAnticipada= Rs1.getDouble("cant");
                }
                lblAnticipada.setText( fmMain.FormatoTotal(totAnticipada));

                // Trae la unidad
                     QryUnid = "select p.sku, p.nombre,u.unidad\n" +
                        "from producto p\n" +
                        "left join par_unidad u on  u.codigo = p.unidad\n" +
                        "where p.sku = '" + sku + "'";
                Rs1 = luv.Select(QryUnid);
                if (Rs1.next()){
                    lblUnidad.setText(Rs1.getString("unidad").trim());
                }
                else{
                    lblUnidad.setText("S/U");
                }            
        } catch (Exception e) {
          
        } finally{
            Sql.Close();
            
          }
    }   
    
    
    public void abrir(String file ){
        
       try {
           String url = file;
           ProcessBuilder p = new ProcessBuilder();
           p.command("cmd.exe", "/c",url);
           p.start();
       } catch (IOException ex) {
           Logger.getLogger(jd_UbicacionProductos.class.getName()).log(Level.SEVERE, null, ex);
       }
        
    }
    
    
    
    private void btAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAceptarActionPerformed
        dispose();
    }//GEN-LAST:event_btAceptarActionPerformed

    
    public String GetUbicacion(){
        if (Ubicacion_sel .equals("")){
            Ubicacion_sel= Grilla.getValueAt(Grilla.getSelectedRow(),4).toString();
            UbicaCodigo_Sel = Grilla.getValueAt(Grilla.getSelectedRow(),3).toString();
        }
        return Ubicacion_sel;
    }
    
    public String GetUbicacionCod(){
        if (UbicaCodigo_Sel.equals("")){
            Ubicacion_sel= Grilla.getValueAt(Grilla.getSelectedRow(),4).toString();
            UbicaCodigo_Sel = Grilla.getValueAt(Grilla.getSelectedRow(),3).toString();
        }
        return UbicaCodigo_Sel;
    }
    
    
    public void ubica_cursor_inicio(){
        txtUbicacion.requestFocus();
    }
    
    
    private  boolean valida_ubicacion(String Ubica){
        ExeSql Sql = new ExeSql();
        ResultSet Rs,Rs1;
        String  Query2;
        boolean esta = false;
        
        try
        {
                    Query2 = "select *  from mt_codmetro where codmetro = '" + Ubica + "';";
                    Rs1 = Sql.Select(Query2);
                     if (Rs1.next()){
                         esta =  true;
                     }
                     else{
                         esta =  false;
                         }
        
          }
            catch (Exception e) {
                System.out.println(e.getMessage());
                Sql.Rollback();
            } finally{
                Sql.Close();
            }          
        
        return esta;
    }
    
    public void graba(){
           // TODO add your handling code here:
       
        ExeSql Sql2 = new ExeSql();
        ResultSet Rs1, Rs2;
        
       //********************************* 
        ExeSql Sql = new ExeSql();
        ExeSql Sql3 = new ExeSql();
        ExeSql Sql4 = new ExeSql();
        ExeSql Sql5 = new ExeSql();
      
        ResultSet Rs3 = null;
        ResultSet Rs4 = null; 
        ResultSet Rs5 = null; 
     //********************************   
        
        
        String Sku,Ubicacion,StUsuario,QryIns, qryUpd, Query2;
        String inv_positivo ="INV.1011.1", inv_negativo ="INV.1011.2";
        
        double cantidad_insertada;
        int Stock = 0;
        
        Ubicacion_sel= "";
        UbicaCodigo_Sel = "";
        try{
                Sku=lbSku.getText().trim();
                Ubicacion = txtUbicacion.getText().trim();
                StUsuario = fmMain.GetUsuario();
                cantidad_insertada=Double.valueOf(fmMain.SetGuardar(txCant.getText().trim()));
               
                
                if (Double.valueOf(fmMain.SetGuardar(lbStock.getText().trim())) < cantidad_insertada){
                    fmMain.Mensaje("Cantidad ingresada: " + txCant.getText().trim() + " es mayor a la que existe en el metro " + lblDescOrigen.getText().trim() + " que es :" + fmMain.SetGuardar(lbStock.getText().trim()));
                    return;
                }
                
                if (txtUbicacion.getText().trim().equals("")){
                    fmMain.Mensaje("Debe ingresar la Ubicacion del Metro.");
                    txtUbicacion.requestFocus();
                    return;
                }
                
                
                if (txCant.getText().trim().equals("")){
                    fmMain.Mensaje("Debe ingresar cantidad en la Ubicaci贸n.");
                    txCant.requestFocus();
                    return;}
                else if (Double.valueOf(txCant.getText().trim())== 0){
                    fmMain.Mensaje("La cantidad debe ser mayor que 0." + " y no mayor a " + fmMain.SetGuardar(lbStock.getText().trim()));
                    txCant.requestFocus();
                    return;    
                }
               
           
                //*************************************************** Fecha Vencimiento Productos *****************************************************// 
           
                if (convenio == 4){             //Si el producto pertenece al Convenio de ALIMENTOS
                
                    try {   
                            if (lblCodOrigen.getText().equals("TRAN.1004.1") ||
                                lblCodOrigen.getText().equals("TRAN.1002.1") ||
                                Ubicacion.equals("TRAN.1002.1") ){    //NC CLIENTE (Ubc. origen) || NC PROVEEDOR ( Ubc. orig-destino)
                        
                                System.out.println("Sku :"+Sku);
                                System.out.println("Ubcacion Destino :"+Ubicacion);
                                System.out.println("StUsuario :"+StUsuario);
                                System.out.println("cantidad_insertada :"+cantidad_insertada);
                                System.out.println("convenio :"+convenio);
                    
               
                                jdProductosVenc IngFecha = new jdProductosVenc(null, true);
                                IngFecha.setLocationRelativeTo(null);
                                IngFecha.setVisible(true);
                                IngFecha.setAlwaysOnTop(true);  
                                esFecha = IngFecha.GetesFecha();
                                Id = Integer.parseInt(IngFecha.GetCodigo());
                                Fecha = IngFecha.GetFecha();
                                Ingresa = IngFecha.GetIngresa();
                    
                                System.out.println("Ingresa :"+Ingresa); 
                    
                                if(!Ingresa){
                        
                                    return;
                        
                                }else if(Ingresa){     // Si se ingres贸 una fecha
                                
                                    int cantactual = 0;
                                    int cantidad = 0;
                                    int nuevacant = 0;
                                    int totalprod = 0;
                                    int suma = 0;
                                                                                   
                            
                                    String filtro5 = "SELECT stock FROM inventario WHERE sku = '"+Sku+"'";
                                    Rs5 = Sql5.Select(filtro5);
                                    Rs5.next();
                            
                                    Stock = Rs5.getInt("stock");
                                    System.out.println("Stock :"+Stock);
                    
                        
                                    String filtro4 = "SELECT sum(cantidad_venc) as total FROM producto_venc WHERE sku = '"+Sku+"'";
                                    Rs4 = Sql4.Select(filtro4);
                            
                                    if(Sql4.GetRowCount() > 0){         //Si existe sku con fechas de vencimiento
                                
                                        Rs4.next();
                                        totalprod = Rs4.getInt("total");     //Total recepciones del producto
                            
                                    }else if(Sql4.GetRowCount() == 0){   //Si no existe sku con fechas de vencimiento
                            
                                        totalprod = 0;     //Total recepciones del producto es igual a 0
                            
                                    }
       
                                    System.out.println("totalprod :"+totalprod);
                                                                
                                    System.out.println("Ubicacion Origen :"+lblCodOrigen.getText());     
                                
                                    String Query3 = "SELECT pv.* FROM producto_venc pv \n"
                                                   +"WHERE pv.sku = '"+Sku+"' \n"
                                                   +"AND pv.id_venc ='"+Id+"' ORDER BY pv.fecha_venc ASC";
                                
                                    Rs3 = Sql3.Select(Query3);
                                
                                    if(Sql3.GetRowCount() > 0){         //Si existen sku con esa fecha de vencimiento
                                    
                                        Rs3.next();
                                    
                                        cantidad = Integer.parseInt(txCant.getText());
                                    
                                        if (cantidad > 0){     
                                        
                                            cantactual = Rs3.getInt("cantidad_venc");
                                            System.out.println("cantactual :"+cantactual);
                                                                             
                                        
                                            if (lblCodOrigen.getText().equals("TRAN.1004.1") || lblCodOrigen.getText().equals("TRAN.1002.1") ){      //NC CLIENTE/NC PROVEEDOR (Ubc. origen)
                                         
                                                nuevacant = cantactual + cantidad;      //Se suma cantidad al registro existente
                                        
                                            }else if (Ubicacion.equals("TRAN.1002.1")) {  //NC PROVEEDOR (Ubc. destino)
                                        
                                                nuevacant = cantactual - cantidad;      //Se resta la cantidad al registro existente
                                        
                                            }
                                        
                                            System.out.println("nuevacant :"+nuevacant);
                                        
                                            suma = (totalprod - cantactual) + nuevacant;
                                        
                                            System.out.println("suma :"+suma);
                                        
                                            if (suma > Stock){                  //Si la suma de esa fecha de vencimiento es mayor al stock general del producto
                                            
                                                fmMain.Mensaje("Nuevo total es mayor al Stock del producto");
                                                return;
                                            
                                            }
                                        
                                        
                                        }else if (cantidad <= 0){              //Cantidad es negativa o 0  
                                            
                                            fmMain.Mensaje("Cantidad debe ser Mayor a O");
                                            return;
                                                                                
                                        }
                                    //*******************************
                                    
                                    
                                        if (nuevacant < 0){                //Si el resultado es negativo (lo que se quiere devolver es mayor a lo existente)
                                        
                                            fmMain.Mensaje("Cantidad ser Mayor a lo existente");
                                            return;
                                            
                                        }if (nuevacant == 0){                //Si el resultado del stock con esa fecha de vencimiento queda en cero, se elimina el registro
                                        
                                            Sql.ExeSql("DELETE FROM producto_venc \n"+
                                                       "WHERE sku='"+ Sku +"'"+
                                                       "AND id_venc='" +Id+"'" );
                                                                                
                                        }else if (nuevacant > 0){             //Si el resultado del stock con esa fecha de vencimiento es mayor a cero, se actualiza el registro
                                        
                                        
                                            Sql.ExeSql("UPDATE producto_venc\n" +
                                                       "SET cantidad_venc=" + nuevacant+"\n" +
                                                       "WHERE sku='"+ Sku +"'"+
                                                       "AND id_venc='" +Id+"'" );
                                        
                                            }
                                    
                                            Sql.Commit();
                                    
                                    //********************************
                                    
                                    
                                    }else if(Sql3.GetRowCount()==0){  //Si no existe el registro 
                                    
                                        if (lblCodOrigen.getText().equals("TRAN.1004.1") || lblCodOrigen.getText().equals("TRAN.1002.1")){      //NC CLIENTE/NC PROVEEDOR  (Ubc. origen)
                                        
                                    
                                            if(fmMain.OkCancel("Id no existe. Desea Agregarlo? ") == JOptionPane.OK_OPTION){
                                      
                                                cantidad = Integer.parseInt(txCant.getText());
                                        
                                                if (cantidad > 0){     
                                                
                                                    suma = totalprod + cantidad; 
                                                    System.out.println("suma :"+suma);
                                                
                                                    if (suma > Stock){                  //Si la suma de esa fecha de vencimiento es mayor al stock general del producto
                                            
                                                        fmMain.Mensaje("Nuevo total es mayor al Stock del producto");
                                                        return;
                                            
                                                    }
                                                
                                             //************************************************************************************//      
                                                    int Rut = 0;
                                                    String TipoDoc = "";
                                                    int NroDoc = 0;
                                        
                                                    Sql.ExeSql("INSERT INTO producto_venc\n" +
                                                               "(id_venc,rut,tipdocto,nrodocto,sku,fecha_venc,cantidad_venc) " +
                                                               "VALUES (" +
                                                                Id + "," +
                                                                Rut + ",'"+
                                                                TipoDoc + "',"+
                                                                NroDoc + ",'"+
                                                                Sku + "','" +
                                                                Fecha+ "', " +
                                                                cantidad + ")"
                                                    );
                                        
                                        
                                                    Sql.Commit();
                                        
                                            //********************************************************************************//
                                
                                        
                                                }else if (cantidad <= 0){              //Cantidad es negativa o 0  
                                        
                                                    fmMain.Mensaje("Cantidad debe ser Mayor a O");
                                                    return;
                                        
                                                }
                                            
                                            }else{
                                    
                                                return;
                                    
                                            }
                                    
                                        }else if (Ubicacion.equals("TRAN.1002.1")) {   //NC PROVEEDOR (Ubc. destino)
                                    
                                            fmMain.Mensaje("No existe Producto con esa Fecha para devolver");
                                            return;
                                    
                                        }
                                    
                                    }
                         
                                }
                        
                            }  
                    
                    }catch (SQLException ex) {
                            Logger.getLogger(jd_UbicacionProductos.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                   
                        
                }
            
            //************************************************************************************************************            
                    //---------------------------------------------------------------------------------------           
                // UBICA PRODUCTOS EN METRO DESTINO 
                Query2 = "select *  from mt_productos where ubicacion = '" + Ubicacion + "' and sku = '" + Sku + "';";
                Rs1 = Sql.Select(Query2);
                    
                if (Rs1.next()){
                            // Realiza un Update
                    String QryUpd = "  update  mt_productos set cant = cant + " +  cantidad_insertada + ",\n" +
                                    "  usuario_mod ='" +fmMain.GetUsuario() + "', fecha_mod = now() " +
                                    "  where ubicacion = '" + Ubicacion + "' and sku = '" + Sku + "' ";
                    Sql.ExeSql(QryUpd);
                }else{
                         // Inserta el producto
                    QryIns = "insert into mt_productos (ubicacion,sku,usuario,cant, rut, tipdocto, nrodocto)\n" +
                             " values ('" + Ubicacion + "','" + Sku + "','" + fmMain.GetUsuario()  + "', " + cantidad_insertada + 
                             "," + "null" + ",'" + "" + "'," + "null" + ");";
                    Sql.ExeSql(QryIns);
                }
            //-------------------------------------------------------------------------------------
             
                     
              //  SI UBICACION ORIGEN ES POSITIVO       
              if (lblCodOrigen.getText().trim().equals(inv_positivo)){
                  
                  // Saca los productos del metro de origen 
                    qryUpd = "update mt_productos set cant = cant -" +  cantidad_insertada +
                             " where ubicacion = '" + lblCodOrigen.getText().trim() + "' and sku = '" + Sku + "' ";
                    Sql.ExeSql(qryUpd);
                    Sql.Commit();
                    fmMain.Mensaje("Grabacion realizada con Exito.");
                  
              //---------------------------------------------------------------------------------------------------------------------              
                    // Ahora descontare del metro negativo los productos ya que se ubicaran EN UN METRO
                    double canti =0;
                    Query2 = "select *  from mt_productos where ubicacion = '" + inv_negativo + "' and sku = '" + Sku + "';";
                    Rs2 = Sql2.Select(Query2);
                    
                    if (Rs2.next()){
                        
                        canti = canti + Rs2.getDouble("cant")+ cantidad_insertada;
                    }  
                    
                    if(canti >0){
              
                        canti =0;
                    }
                    
                    qryUpd = "update mt_productos set cant = " + canti +
                             " where ubicacion = '" +inv_negativo + "' and sku = '" + Sku + "' ";
                    Sql2.ExeSql(qryUpd);
                    Sql2.Commit();
                    Sql2.Close();
                    fmMain.Mensaje("Grabacion realizada con Exito.");    

              }else{
                   
                   qryUpd = "update mt_productos set cant = cant -" +  cantidad_insertada +
                            " where ubicacion = '" + lblCodOrigen.getText().trim() + "' and sku = '" + Sku + "' ";
                   Sql.ExeSql(qryUpd);
                   Sql.Commit();
                   fmMain.Mensaje("Grabacion realizada con Exito.");
                  
              }
              
         
        }catch (Exception e) {
        
            System.out.println(e.getMessage());
            Sql.Rollback();
        
        } finally{
            
            Sql.Close();
        }          
        
        dispose();
        
    }
    
    
    private void btOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btOkActionPerformed
        // TODO add your handling code here:
        graba();
        //graba2();
        
    }//GEN-LAST:event_btOkActionPerformed

    
    public void graba2(){
     
        ExeSql Sql = new ExeSql();
        ExeSql Sql3 = new ExeSql();
        ExeSql Sql4 = new ExeSql();
        ExeSql Sql5 = new ExeSql();
      
        ResultSet Rs3 = null;
        ResultSet Rs4 = null; 
        ResultSet Rs5 = null; 
         
        String Sku=lbSku.getText().trim();
        String Ubicacion = txtUbicacion.getText().trim();
        String StUsuario = fmMain.GetUsuario();
        double cantidad_insertada=Double.valueOf(fmMain.SetGuardar(txCant.getText().trim()));
        int Stock = 0;
           
       
           
           
        //*************************************************** Fecha Vencimiento Productos *****************************************************// 
           
                if (convenio == 4){             //Si el producto pertenece al Convenio de ALIMENTOS
                
                    try {   
                            if (lblCodOrigen.getText().equals("TRAN.1004.1") ||
                                lblCodOrigen.getText().equals("TRAN.1002.1") ||
                                Ubicacion.equals("TRAN.1002.1") ){    //NC CLIENTE (Ubc. origen) || NC PROVEEDOR ( Ubc. orig-destino)
                        
                                System.out.println("Sku :"+Sku);
                                System.out.println("Ubcacion Destino :"+Ubicacion);
                                System.out.println("StUsuario :"+StUsuario);
                                System.out.println("cantidad_insertada :"+cantidad_insertada);
                                System.out.println("convenio :"+convenio);
                    
               
                                jdProductosVenc IngFecha = new jdProductosVenc(null, true);
                                IngFecha.setLocationRelativeTo(null);
                                IngFecha.setVisible(true);
                                IngFecha.setAlwaysOnTop(true);  
                                esFecha = IngFecha.GetesFecha();
                                Id = Integer.parseInt(IngFecha.GetCodigo());
                                Fecha = IngFecha.GetFecha();
                                Ingresa = IngFecha.GetIngresa();
                    
                                System.out.println("Ingresa :"+Ingresa); 
                    
                                if(!Ingresa){
                        
                                    return;
                        
                                }else if(Ingresa){     // Si se ingres贸 una fecha
                                
                                    int cantactual = 0;
                                    int cantidad = 0;
                                    int nuevacant = 0;
                                    int totalprod = 0;
                                    int suma = 0;
                                                                                   
                            
                                    String filtro5 = "SELECT stock FROM inventario WHERE sku = '"+Sku+"'";
                                    Rs5 = Sql5.Select(filtro5);
                                    Rs5.next();
                            
                                    Stock = Rs5.getInt("stock");
                                    System.out.println("Stock :"+Stock);
                    
                        
                                    String filtro4 = "SELECT sum(cantidad_venc) as total FROM producto_venc WHERE sku = '"+Sku+"'";
                                    Rs4 = Sql4.Select(filtro4);
                            
                                    if(Sql4.GetRowCount() > 0){         //Si existe sku con fechas de vencimiento
                                
                                        Rs4.next();
                                        totalprod = Rs4.getInt("total");     //Total recepciones del producto
                            
                                    }else if(Sql4.GetRowCount() == 0){   //Si no existe sku con fechas de vencimiento
                            
                                        totalprod = 0;     //Total recepciones del producto es igual a 0
                            
                                    }
       
                                    System.out.println("totalprod :"+totalprod);
                                                                
                                    System.out.println("Ubicacion Origen :"+lblCodOrigen.getText());     
                                
                                    String Query3 = "SELECT pv.* FROM producto_venc pv \n"
                                                   +"WHERE pv.sku = '"+Sku+"' \n"
                                                   +"AND pv.id_venc ='"+Id+"' ORDER BY pv.fecha_venc ASC";
                                
                                    Rs3 = Sql3.Select(Query3);
                                
                                    if(Sql3.GetRowCount() > 0){         //Si existen sku con esa fecha de vencimiento
                                    
                                        Rs3.next();
                                    
                                        cantidad = Integer.parseInt(txCant.getText());
                                    
                                        if (cantidad > 0){     
                                        
                                            cantactual = Rs3.getInt("cantidad_venc");
                                            System.out.println("cantactual :"+cantactual);
                                                                             
                                        
                                            if (lblCodOrigen.getText().equals("TRAN.1004.1") || lblCodOrigen.getText().equals("TRAN.1002.1") ){      //NC CLIENTE/NC PROVEEDOR (Ubc. origen)
                                         
                                                nuevacant = cantactual + cantidad;      //Se suma cantidad al registro existente
                                        
                                            }else if (Ubicacion.equals("TRAN.1002.1")) {  //NC PROVEEDOR (Ubc. destino)
                                        
                                                nuevacant = cantactual - cantidad;      //Se resta la cantidad al registro existente
                                        
                                            }
                                        
                                            System.out.println("nuevacant :"+nuevacant);
                                        
                                            suma = (totalprod - cantactual) + nuevacant;
                                        
                                            System.out.println("suma :"+suma);
                                        
                                            if (suma > Stock){                  //Si la suma de esa fecha de vencimiento es mayor al stock general del producto
                                            
                                                fmMain.Mensaje("Nuevo total es mayor al Stock del producto");
                                                return;
                                            
                                            }
                                        
                                        
                                        }else if (cantidad <= 0){              //Cantidad es negativa o 0  
                                            
                                            fmMain.Mensaje("Cantidad debe ser Mayor a O");
                                            return;
                                                                                
                                        }
                                    //*******************************
                                    
                                    
                                        if (nuevacant < 0){                //Si el resultado es negativo (lo que se quiere devolver es mayor a lo existente)
                                        
                                            fmMain.Mensaje("Cantidad ser Mayor a lo existente");
                                            return;
                                            
                                        }if (nuevacant == 0){                //Si el resultado del stock con esa fecha de vencimiento queda en cero, se elimina el registro
                                        
                                            Sql.ExeSql("DELETE FROM producto_venc \n"+
                                                       "WHERE sku='"+ Sku +"'"+
                                                       "AND id_venc='" +Id+"'" );
                                                                                
                                        }else if (nuevacant > 0){             //Si el resultado del stock con esa fecha de vencimiento es mayor a cero, se actualiza el registro
                                        
                                        
                                            Sql.ExeSql("UPDATE producto_venc\n" +
                                                       "SET cantidad_venc=" + nuevacant+"\n" +
                                                       "WHERE sku='"+ Sku +"'"+
                                                       "AND id_venc='" +Id+"'" );
                                        
                                            }
                                    
                                            Sql.Commit();
                                    
                                    //********************************
                                    
                                    
                                    }else if(Sql3.GetRowCount()==0){  //Si no existe el registro 
                                    
                                        if (lblCodOrigen.getText().equals("TRAN.1004.1") || lblCodOrigen.getText().equals("TRAN.1002.1")){      //NC CLIENTE/NC PROVEEDOR  (Ubc. origen)
                                        
                                    
                                            if(fmMain.OkCancel("Id no existe. Desea Agregarlo? ") == JOptionPane.OK_OPTION){
                                      
                                                cantidad = Integer.parseInt(txCant.getText());
                                        
                                                if (cantidad > 0){     
                                                
                                                    suma = totalprod + cantidad; 
                                                    System.out.println("suma :"+suma);
                                                
                                                    if (suma > Stock){                  //Si la suma de esa fecha de vencimiento es mayor al stock general del producto
                                            
                                                        fmMain.Mensaje("Nuevo total es mayor al Stock del producto");
                                                        return;
                                            
                                                    }
                                                
                                             //************************************************************************************//      
                                                    int Rut = 0;
                                                    String TipoDoc = "";
                                                    int NroDoc = 0;
                                        
                                                    Sql.ExeSql("INSERT INTO producto_venc\n" +
                                                               "(id_venc,rut,tipdocto,nrodocto,sku,fecha_venc,cantidad_venc) " +
                                                               "VALUES (" +
                                                                Id + "," +
                                                                Rut + ",'"+
                                                                TipoDoc + "',"+
                                                                NroDoc + ",'"+
                                                                Sku + "','" +
                                                                Fecha+ "', " +
                                                                cantidad + ")"
                                                    );
                                        
                                        
                                                    Sql.Commit();
                                        
                                            //********************************************************************************//
                                
                                        
                                                }else if (cantidad <= 0){              //Cantidad es negativa o 0  
                                        
                                                    fmMain.Mensaje("Cantidad debe ser Mayor a O");
                                                    return;
                                        
                                                }
                                            
                                            }else{
                                    
                                                return;
                                    
                                            }
                                    
                                        }else if (Ubicacion.equals("TRAN.1002.1")) {   //NC PROVEEDOR (Ubc. destino)
                                    
                                            fmMain.Mensaje("No existe Producto con esa Fecha para devolver");
                                            return;
                                    
                                        }
                                    
                                    }
                         
                                }
                        
                            }  
                    
                    }catch (SQLException ex) {
                            Logger.getLogger(jd_UbicacionProductos.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                   
                        
                }
               
               //*****************************************************************************************************// 
           
     
     }
    
    
    
    private void txtUbicacionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUbicacionKeyPressed
        // TODO add your handling code here:
        // TODO add your handling code here:
        ExeSql Sql = new ExeSql();
        ResultSet Rs, Rs1;
        String Query2 ;
        String strUbicacion = "";

        try{
            if(evt.getKeyCode() == KeyEvent.VK_ENTER){
                strUbicacion = txtUbicacion.getText().trim();
                String ubicaArray[] = strUbicacion.split("\\.");

//                Query2 = "SELECT (b.bodega ||' - '|| r.rack ||' - '|| m.metro) as ubc\n" +
//                " from mt_bodega b, mt_rack r, mt_metro m\n" +
//                " where b.codigo='" + ubicaArray[0] + "' and r.codigo= " + ubicaArray[1] +  " and m.codigo= " + ubicaArray[2] + "  and m.rack=" + ubicaArray[1];
//                
                
                Query2 = "SELECT nombre AS ubc FROM mt_codmetro WHERE codmetro = '"+strUbicacion.trim()+"'";  
                
                
                Rs1 = Sql.Select(Query2);
                if (Rs1.next()){
                    strUbicacion =Rs1.getString("ubc").trim();
                    txNombreUbica.setText(strUbicacion);
                    txtUbicacion.requestFocus();
                    txCant.setText("");
                    txCant.requestFocus();
                }
                else
                {
                    fmMain.Mensaje("Ubicacion no encontrada, favor revise la ubicaci贸n");
                    //limpia_all();
                    txNombreUbica.setText("");
                    txtUbicacion.setText("");
                }
            }
        }
        catch (Exception e) {
            System.out.println(e.getMessage());
        } finally{
            Sql.Close();
        }
    }//GEN-LAST:event_txtUbicacionKeyPressed

    private void GrillaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GrillaMouseClicked
        // TODO add your handling code here:
            if(evt.getClickCount()==2 ){
                    txtUbicacion.setText(Grilla.getValueAt(Grilla.getSelectedRow(), 3).toString().trim());
                    txNombreUbica.setText(Grilla.getValueAt(Grilla.getSelectedRow(), 4).toString().trim());
                    }
    }//GEN-LAST:event_GrillaMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
            jdBuscaUbicacion Ubicacion= new jdBuscaUbicacion(null, true);
            Ubicacion.CargaBodegaOR(0);
            Ubicacion.setVisible(true);
           txtUbicacion.setText(Ubicacion.GetUbicacion());
           txNombreUbica.setText(Ubicacion.GetNombreUbicacion());
           txCant.requestFocus();
           txCant.setText("");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void txCantKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txCantKeyPressed
        // TODO add your handling code here:
             if(evt.getKeyCode() == KeyEvent.VK_ENTER){
                 graba();
                // graba2();
             }
    }//GEN-LAST:event_txCantKeyPressed

    private void lblAnticipadaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblAnticipadaMouseClicked
        ExeSql SqlAnt = new ExeSql();
        ResultSet RsAnt;
        String qry = "select det.nrodocto, det.cantidad, EXTRACT(day from current_date-o.fcreacion) as dias from ctacteclidet det\n" +
                    "left join ctactecli cli on\n" +
                    "cli.rut=det.rut and cli.tipdocto=det.tipdocto \n" +
                    "and cli.nrodocto=det.nrodocto and cli.anticipado=1 and cli.transporte=false\n" +
                    "left join occh o on cli.rut=o.rut and cli.nrodocorigen=o.codigo_oc and cli.occh=o.orden\n" +
                    "where det.sku='"+lbSku.getText().trim()+"' \n" +
                    "and det.tipdocto='GDC' and cli.anticipado=1 and cli.transporte=false";
        Double db = Double.valueOf(lblAnticipada.getText().trim());
        if (db < 0) {
            try {
                String muestra="<br>";
                RsAnt = SqlAnt.Select(qry);
                while (RsAnt.next()) {
                    muestra =  muestra+"Guia: "+RsAnt.getString("nrodocto").trim()+
                            " || Cantidad: "+RsAnt.getString("cantidad").trim()+
                            " || Dias: "+RsAnt.getString("dias")+"<br>"; 
                }
                JOptionPane.showMessageDialog(null, String.format("<html><body>"+muestra+"</body></html>", 150, 150));
              
            } catch (Exception e) {
                fmMain.Mensaje("Error al cargar Anticipadas " + e);
            } finally {
                SqlAnt.Close();
            }
        } else {
            fmMain.Mensaje("No hay");
        }
    }//GEN-LAST:event_lblAnticipadaMouseClicked

    private void mnuCopiarOrdenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuCopiarOrdenActionPerformed
        //Copiar Ordenes
        if(!Grilla.getValueAt(Grilla_detalle.getSelectedRow(), 1).toString().trim().isEmpty()){
            StringSelection Voucher = new StringSelection(Grilla_detalle.getValueAt(Grilla_detalle.getSelectedRow(), 1).toString().trim());
            Clipboard cb = Toolkit.getDefaultToolkit().getSystemClipboard();
            cb.setContents(Voucher, null);
        }
    }//GEN-LAST:event_mnuCopiarOrdenActionPerformed

    private void Grilla_detalleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Grilla_detalleMouseClicked
        if(lblCodOrigen.getText().equals("TRAN.1001.1")){
                    ExeSql consulta = new ExeSql();
                    ResultSet rs = null;
                    String query = "select \n" +
                                    "CAST(o.codigo_oc as varchar) || '-' || o.orden,\n" +
                                    "o.sku,\n" +
                                    "p.nombre,\n"+
                                    "o.cantidad,\n" +
                                    "o.separado,\n" +
                                    "o.despachado\n" +
                                    "from occhdet o\n" +
                                    "left join producto p on p.sku = o.sku\n"+
                                    "where CAST(o.codigo_oc as varchar) || '-' || o.orden in ('"+Grilla_detalle.getValueAt(Grilla_detalle.getSelectedRow(), 0).toString()+"')";
                    
                    try {
                        rs=consulta.Select(query);
                        DefaultTableModel modelo = (DefaultTableModel) Grilla_detalle_posibles.getModel();
                        while(modelo.getRowCount()>0){
                            modelo.removeRow(0);
                        }
                        for(int i = 0; rs.next();i++){
                            modelo.addRow(new Object[]{
                                rs.getString("sku"),
                                rs.getString("nombre"),
                                rs.getString("cantidad"),
                                rs.getString("separado"),
                                rs.getString("despachado")
                            });
                        }
                    } catch (SQLException ex) {
                        Logger.getLogger(jd_UbicacionProductos.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                }
    }//GEN-LAST:event_Grilla_detalleMouseClicked

    private void txtUbicacionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUbicacionKeyTyped
        txtUbicacion.setText( txtUbicacion.getText().toUpperCase());
    }//GEN-LAST:event_txtUbicacionKeyTyped

    
    public Boolean selecciona_reg(){
        Grilla.changeSelection(0, 0 , false, false);
        return true;
    }
    
    
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(jd_UbicacionProductos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(jd_UbicacionProductos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(jd_UbicacionProductos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(jd_UbicacionProductos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                jd_UbicacionProductos dialog = new jd_UbicacionProductos(new javax.swing.JFrame(), true);
                
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Grilla;
    private javax.swing.JTable Grilla_detalle;
    private javax.swing.JTable Grilla_detalle_posibles;
    private javax.swing.JButton btAceptar;
    private javax.swing.JButton btOk;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPopupMenu jPopupMenu2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lbSku;
    private javax.swing.JLabel lbSkuDesc;
    private javax.swing.JLabel lbStock;
    private javax.swing.JLabel lbTotal;
    private javax.swing.JLabel lblAnticipada;
    private javax.swing.JLabel lblCodOrigen;
    private javax.swing.JLabel lblDescOrigen;
    private javax.swing.JLabel lblPendiente;
    private javax.swing.JLabel lblTotalDesp;
    private javax.swing.JLabel lblUnidad;
    private javax.swing.JMenuItem mnuCopiarOrden;
    private javax.swing.JTextField txCant;
    private javax.swing.JTextField txNombreUbica;
    private javax.swing.JTextField txtUbicacion;
    // End of variables declaration//GEN-END:variables
}
